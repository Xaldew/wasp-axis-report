%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 5 0 391 465
%%HiResBoundingBox: 5.500000 0.000000 390.500000 465.000000
%ADO_DSC_Encoding: Windows Roman
%%Title: AvancezChalmersU_black_centered.eps
%%Creator: Adobe Illustrator(R) 21.0
%%For: Johan Wetterberg
%%CreationDate: 6/25/2018
%%CropBox: 0 0 396.8505 468.2466
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.0.2 x242 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 108 128 8%%BeginData: 19370 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD8AFFA8FD2AFF7DF827A8FD3CFF2727A8FD13FFA8A8A8FD13FFA8
%27F8272752FD37FF7D27F82727FD12FF7DF852522727A8FD12FF7D27F827
%F87DFD34FFA852275227F8FD12FF7DF8FD04FFA726A8FD12FF7D27527D26
%527DFD31FFA8F827F852F827FD12FFF8FFA852277DFF7D27FD13FF7D2752
%52F827A8FD30FF5227527D527DFD12FF7C52FF277DA8F87DFF27A8FD0FFF
%A87D7DFFFD0427F8A8FD2CFFA852A87D52527D52527DFF527DA8FD0EFF52
%7DA852FF27A827FF27A8FD0EFF7D27F827F827527D52527DFFA87DA8FD27
%FFA8F827522752527D27F87D272752FD0FFF527DFF2727FFA852FF52A8FD
%0FFF52272752277D2727527DA8FF2727A8FD25FF7DF82727525227F827F8
%7D52524BA8FD0FFFA827FF7D275227A8FFF8FD10FFA852522727527DF827
%F8277D7DF8277DFD24FFF827F87D4B27527DF8527D277DFD11FFA82752FF
%A8A8FFFF2727A8FD12FF27F8277DA8F87D52277D272727A8FD20FF52A17D
%275227527D2752F8527C52F87DFD11FFA8272727A8A87DF87D52A8FD12FF
%7D522727527D2727277D27522727A8A8A8FD1CFF7D277D272752277D2752
%26277D27A8FD13FF7D7DFF7D265252A8FF7D7DFD09FFA87DFD0AFF7D5252
%A85252277D2752F87D277DFD1BFF5227F87D2752F8522727F87D525252FD
%14FF527DFFA852FD04FFA852FD08FFA8272752A8FD07FFA87DFD0452F827
%52275252522727FD1AFFA82727767D275227527D7D7D4B52F87DFD04FF7D
%A8FD0EFF27FFFFFF27FD05FF27FD08FF527CFF7D277DFD05FFA827F827F8
%52527D52525227527DF8277DFD19FF7DF827277DF8275252F8272727F827
%A8FFFFA82752F8A8FD0CFFA852A8FFFF7D7DFD04FF52A8FD06FFA827FFFF
%FFA82727A8277DFFFFA827F827525227525227F82752272627A8FD17FFA8
%F85252272752527D52277D7DF852A8FFFFA827A8FFA827FD0CFFA852FFFF
%FF7D7DFD04FF767DFD06FF27FD06FF7D26765252A8FFFFA826275252277D
%7D7D5252277626A8FD17FF52275227277D5251277D2727F827A8FFFFA8F8
%FD04FF7D52FD0AFF7DF87DFD04FF27FD04FFA8F852FD04FFA8277DFD07FF
%2776277DFFFFFF27F8272752527D27527D52272727A8FD16FF52F87DF852
%2727F87D7D52277DFD05FF52A8FD04FF527DFD05FFA8FFFFFF5227A8FD04
%FF27A8FFFFFFA82752FFFFFF7DFFA85252FD07FF7D277DFFFFFFA8FFFFA8
%52277D52F8277D7DF8277DFD16FF527D7D7DFD04277D5227527DFD05FF52
%27A8FFFFFFA827A8FFFFFF5227A8FFFF7DF8FD05FFF87DFD04FF2752FFFF
%5227F876A87D27A8FD06FFA82752FD04FFA85227F8527D27F827527DF852
%FD15FF7DA8A8A82727527DF8A82752F827A8FD04FF52277DFD04FF26A8FF
%FF277D7D52A8A82752FD04FFA82752FD04FF7D267D7D527D7D27FFFFA827
%7DFD07FF527DFFFFFFA8272752277D27275227527D27FF7DFD10FFA8FF52
%27527D27272752277D525252277DFFFFFFA8527D7DF8A8FFA827527DFFA8
%52527D5227525252FD04FF7D2727A8FFFFFF7D275252527D5252FFFFFFA8
%F8277DFD05FF7D52FD04FF7D27F8527D7DF85252275252522752FD0FFFA8
%F827F8525227527D277D7D7D5227A8FFFFFF7D527D7D527D275252A85252
%FFFF76527D7D527D527DFD04FF277D27A8FD04FF27FD047D5252FFFFA826
%A8A85252FD05FF27FD06FF7D27527D27F87DF827527DF827A8FD0EFF7D27
%F82752272752277D2727F8A8A8FFFFFF52527D527DFFFFA8525227A8527D
%FF5227FD047D27A8FFFFFFA8277D527DFD04FF52527D7D7D5227527DF87D
%FFFF522727A8FFFFFF52A8FD07FFA8524B275252F8762727F8A8FD0EFF52
%F87D267D5252277DF8275227A8FFFFFF527D5252A8FD05FFA827FFFF2727
%277D7D7D527D27FD04FFA8277D5252FD04FFFD05527D5252F852FFFFA852
%FFA8277DFFFF52A8FD04FFA87D527D7DA8522752275227522727FD0DFF7D
%F8FD042752277D2727522752FFFFFFA827527DFD08FF7D52FFA8F8FD057D
%5252FD04FF52527D7D27FD04FF7D27FD057D5227A8FFFF277DFFFFFF2727
%A8A852FD05FFF827F827F87D5227F87D27525227A8FD0CFF52272752277D
%F87D2727275227FD05FFA8FD07FFA8A8FFFF527DFFA727A87DA87D5252FD
%04FF52527D5227A8FFFFFFA827FD057D527DFFFF7D52FD05FF7D27277DFD
%05FF52F85227277D7D52A85227277DF8FD0DFF7DF87DF8277D27527D7D27
%F852FD0DFF52F8527D52F8A8FF524B7D527D277DFFFFFFA827FFA8FF5252
%FD04FF277D527D7C5227FFFFA8F87DFF7D27A8FFFFA87DA8FD05FFA87DF8
%272752F827527DF827522752FD0CFFA8275227F8277D7D277D2727FD0DFF
%7D27A85227527D27FFFF27527D7D27A8FFFFA8F8A8FD04FF2752A8FFFF7D
%527D527DF8FFFFFF27522727275227FD0CFF27F8277D2752527DA8277D27
%27FD0BFF7DA8F87D2727527DF8277D2727FD0DFF5252FD057D5227FFA827
%7D7D27FFFFFFF87DFD06FF5227A8FF7D527D7DF87DFFFF52277D7D527D7D
%277DFD0BFF2727F87D52525227527D272752FD0AFFA8525227527D7DA827
%27277D52FD0FFF5252FD057D277DFF7D525252FFFF7D52FD08FF527DFFA8
%277D2752FFFFA82752FD047D5252FD0DFFA852F87DF82727527D27F87DFD
%0AFF7DF85227277D7D2727F851A8FD09FFA852527D527D5252F87D527D52
%7D5227527DF827277D5227277D527D527D527D525252FFA8275227A8FFFF
%27F85252524B52F8FD07527DFD07FF7D275227F87DF87D522752FD0AFF4B
%272652277D2627272726FD0BFF5227FD18A87DA8A8A87DA87D52FFFF5227
%7DFFFF7D52FFFD0BA82752FD08FFA8275252275227267D2727A87DFD07FF
%7C27F8275252F8277D2727A8FF7D7DFD09FF5252FD1EFF52A8FF7D27FFFF
%A827FD0CFF7D27FD0AFFA8F87DFD04275227522727FD07FF7DF827F8527D
%27527DF8A87D7DF852FD0AFF527DFD1DFFA852FF27FFFFFF27FD0CFF7D27
%FD0BFFA8277D27277DF827527DF827FD07FFA8272727F87DF852F8277D27
%F82752FD0BFF277DFD04FFFD047D527D527D527D527D7D7D527D527D527D
%527D527D5252277DFFFF52277D7D527D7C7D7DFD04FF7DF8FD0DFF7D7DF8
%277D2727A82727F8FD07FFA8265227277D52522727A8275226A8FD0CFF27
%7DFD04FF26527DA87D7D7D5227A87D277DA87DA87DA87DA87DA87DA82752
%FFFFA8277DA8FD047D26A8FFFFFFA827FD0FFF7D522652F87DFD0427A8FD
%06FFF8272752F8277D2727A827522727A8FD0CFF52F8A8FD04FF27A8FD04
%FF7D7DFFFF27FFFFFFA8FFA8FFA8FFFFFFA852A8FFFF52A8FD05FF27A8FF
%FFFFA8F8A8FD0CFFA87D7D525227F8277D525252F8A8FD06FF27F8515227
%F87D27A82727522752FD0AFF7D7D7D277D27A8FD04FF27A8FFFFA827527D
%FD045227522752525227525252277D7D5227FD05FF27A7FFFFFFA8275252
%7D52FD0AFFA8F8277D5227277D7DF8522752FD07FFA827F87DF85252527D
%2727277DFD0AFFA8F827F8527D52F8A8FFFFFF7DF852275227522752527D
%527D527D7D7D527D527D527DFD04522752527D277DFD04FFF8527D522727
%7DFD09FFA827F8527D2727A8F827272752FD08FFA827525227A87D7DF87D
%52A8FD0AFF7D527D7D5252527D277DFD0552FD047DFD04A8FD05FFA8FFA8
%FFFD06A87D7D52522727527DA8FF2752527D527D527DFD0AFFF82726527D
%277D27277D2627FD07FFA8FF52272727527D2752522752FD0AFF7DF8277D
%7D7D27F8272752527D7DA8A8FD07FF7D5227A8FFFF5252A8FFFFFF7DA8A8
%FFA8A87D7D5252FD0427527D7D7D272752FD09FF7D272727F87D2752F852
%7D2752FD07FF7D7DA8F852277D277D7D27F852FD0CFF52272752527D527D
%A8FFA8FFFFFFA8A8FD06FF5227F8A8FF7D52FFFFA8F87DA87D52FD05FFA8
%A8FD04524B52277DA8FD0BFF2727522752A84B275252F8FD08FF7C274B52
%F82752275227F82752FD0BFF7D52277D527D7DFFFFFF7D52A8FFFF52F8FD
%06FF527D7DF8A87D7DFFFFF852FFFFFF7DA8FFA87D7DA8A8FFA87D525227
%277DFD0CFFA8F852F82752A8F852F87D52A8FD05FFA82726275227267D7D
%7D2652F8A8FD09FFA827527D7D7DFFFFFFA8FFFF5252FFFFFF522727FD05
%FF52A8FF76F8527DFF7D27A8FD07FF52277D7D52FFFFFFA87D5252267DFD
%0AFF7D27275226527D52277D522752FD06FFF827F8277D5227A8F8272727
%7DFD08FF7DF87D7D7DA8FFA87DF87DFFFF277DFFFF7DA8A82752FD04FF52
%7DFFFF52F87DFFA8F8A8FD06FFA82752FFFF7D7DFD04FFA87D7D27277DFD
%08FF7DF8277D27277DF8525227F827A8FD04FFA827F827F8527D7D7D2752
%7DF8A8FD07FF7DF8A87DA8FD04FF7D27F8A8FF527DFFFF7D5252272752FF
%FFFF2752FFFFFF527DFFFF2752FFFFFF52FFFFA8F87D52FD05FF277DA8FF
%A8A852277DFD08FF52F87D272752277D27522727FD05FF7DF8FD04277D52
%27F87D2752FD07FFA8F8A8A8FFFF52A8FFFFFFA852F87D27A8FFFF275227
%FF27277DFFA8A8A8FFFFFFA8A8FFFFA85252A1527DFFFF5227FF7DA8FFFF
%FFA8A87D7D52A8A8FF7D277DFD07FF52272752F8277D52F852F87DFD05FF
%A827277D26275227262752277DFD07FF277DFD04FFF827A8FD04FF7DF827
%A8FF7D52A8FFFFFFFD06A87DA87DA87DA8A8FFA8A8A8FFFFFFA82727FFFF
%FF7DFD05FF7D2727FFFFFF527DFD07FF52267D7D275252F827272752FD06
%FF52272752F85152522752F87DFD07FF277DFFFFFFA85227277DFD04FF7D
%F8FFFFA87DA8FD047DFD07527D525252FD047DA87DFD04A87D5252F87DFF
%FFFF7DF8277DFD04FF7652FD07FFA8275252F87D27275227F852FD06FF52
%F8275227F87D7D525227A8FD07FF5252FFFFFFA8A8FFF82752A8FFFFFFA8
%A8A87D7D527DFD055227F8272727267D522727FD0452FD047DA8A8FFA8A8
%FFFF7D2727A8FD06FF277DFD08FFA82752A852277D7DF87DFD07FF2727F8
%5227275252F8277DFF52A8FD05FFA8F8FFFFFF7D52277D52277DFFA8A87D
%7D525227522727F87DFFFFA827F8FFA827A8FFA8277DFF7D7DF827275252
%7D7DA8A8FFA852F87DFD06FFA827A8FD06FF7DA8FFF87D5227F852F8A8FF
%FFA8FD05FFA82627277D277D522726FF7D277DFD06FF527DFFFFA8527DA8
%FFA8A87DA87D52F827267DFFA8277DF8FFFFFFA852A8A82752FFFF7D52FF
%FF522727A87D522727527D7DA8FFFF7D52527DA8FFFFA827FD07FF26277D
%522752277D2727A87D277DFD07FF52272727F87DF87D7D27F827A8FD05FF
%7D27FFFF7D52A8FFA8A87D7D2727527D7D27A8FF277D7D7D27FFFFFFA827
%27FF5252FFFF527D52527D527DFF7D527D7D2727527D7DFFA87D7DFFFFFF
%5252FD06FF5227F827522727527D27F87D5227A8FD08FFA827272752277D
%27F82727FD07FFF8FFFFA8A8FFA87D52522752527D7D7D27FFFF27527D7D
%52F8FFFFFFA8527D5227A8FFFF27277D7D527DFFA8277D7D7DFD0552A8FD
%05FF527DFD06FF7DF852277D27277D7DF8527D52F8FD06FF7D52FFFF7D27
%277DF852FD0427FD07FF527DFFFFFF7D7D2727527D527D527D5252FFA827
%7D527D272727FFFFFF7D27A8FFF8FFFFA8277D525227FFA827527D527D52
%7D2727277DA8FFFFFF27A8FD05FFA82727F827277D2752F8527D52F87DFD
%06FFA8F87D7DFFF82752277D7D2627F8A8FD06FF527DFFFF7D2727FD087D
%527DFF52527D7D5252FFA827FD06FFA827FFFFA8277D7D27A8FF52FD087D
%5226527DFFFF27FD06FF5227F82727277D52277D7D272652FD07FF7D27F8
%275252F827527DF8272727A8FD06FF7D27FF52525227F827F87D7D7D7C7D
%27A8FF52527D2727A8FFA82727FD05FF522752FFFF7DF87D277DFF524BFD
%057D7C7D525252277DA827FD06FFA8F8277D27527D277D522727527DFD08
%FFFD04277DA8527D52274B5252FD07FFA827277DFFFF7DFFFF7D4BA87D7D
%7D52FFFF277D5227A8FFFF527C7D52FFFFFF527DFF527DFFFF52527D27FF
%7D52FD047D275252277DFFA827277DFD07FF52F87DF8527D522752527D26
%27A8FD07FF27F87D2727F87D277DF8522752FD08FFF87DFD04FFA8A8A827
%FD047D27FF7D2752277DFFFFA827FFFF5252FF2752FFFFA827A8FFA82752
%27A8A8277D527D27A8A85252FFFFFFA82752FD06FF7DF8275227F852277D
%4B7D272727FD08FF5227275227275252527DF85226A8FD07FF27A8FFFFFF
%7D7DA852527D7D7D5252FF5252527DFFFFFF27A8FFFFFF7DF87DFD04FF52
%52FFFFA82727A8FF52527D5227FFFF7D7DA8FFFFFF27A8FD06FF2727277D
%277D7D7D27512752F8A8FD09FF7D27F8522727277D52275227A8FD07FF7D
%275252277DA852527D7D527D527DFF272752FFFFFF5227A8FD04FF7DFD04
%FF7D52277DFFFF7D2752FF277D7D7D527DFFFF7D27527D5227A8FD06FFA8
%F87D527D5227527DF827F852FD0BFF2727277D27527D52F87D52FD09FFA8
%A87DFFFFFF7D525252275227A8A82752FFFFFFA82752527DA8FD05FFA852
%27527D27A8FFFF5227FF7D277D7D7DF8A8FFFFFFA87DA8FD09FF7D27527D
%52277D527D7D277DFD0BFFA8F852F827275252522752FFA827FD0DFF5227
%7CFF5227A87DF8FD04FF52277DFD0527525227F852527D525227FFFFFFF8
%A87D27277D5252A8FD0DFFA8FFA827277D2752275227A8A8FD0BFFA8A8A8
%7D7D7DA8522752277D7D272752FD0DFFA8FFFFFF52FF27A8FFFFFFA826FD
%057DFD0452FD077D2752FFFF7D7DFF52FF2727FD0EFF5227FFA827FD0452
%27262752FD0CFF7D272727F852277D5252277D5227F827FD10FF7D7DA852
%FD04FFF87D7D7D52FD077D527D7D7D527D7D277DFFA852A852FFFFA8FD0D
%FF7D27F852522727525227277DF827A8FD0CFFF8272752F827277D7D527D
%52F85227FD10FF7D7DA87DFFFFFF52527DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87D27A8FF27FF527DFD0FFFA827525252F827522727522727A8FD
%0DFF7DF8FD0527F8275252F827272752FD0FFF27A852A8FFFF7D27527D52
%7D7D7D527D767D527D527D527D527D527DF827FF527D7DF852A8FD0DFF52
%2727277DFD042752F82752FD0FFF7D262727A85227277DA827267D2727FD
%0EFF7D27A852FFFFFF51527D52272752FD097D522727277D7D5227A8A87D
%A87D7D27A8FD09FFA8FF7D272752F8A8522727A82727F8A8FD0FFFA827F8
%27F827527DF87D52275252F87DFFA8FD0AFF7D2752A852FFFF7DF87D7D27
%7DA82752527DF82726527D7D27A8FF52527DF87D27A852A852FFA8277DFD
%07FF7D27FFA1F8525227522727522727F87DFD11FF7D765227F827277DF8
%7D2727522727A8F852A8FD07FFA8277D52527DFFFF2752272752FFFF7D52
%A8527DFFA827A87D52FFFFA82752A8FFFD047D52FFFF7D2752FD05FF7D27
%F87D52275227527DF87D522752A8FD15FFA827F8272752277DF87D27277C
%27F87DFD06FFA827A8FF5227A8FF277DFFA852FFFFFF52527D277DFFFF52
%525227FFFFFFA8FFFFFFA8527D277DFF2752A8527DFD04FF52F8FD042752
%F852522752A87D7D27277DFD12FF7DFFA87D5252F827527DF8277D52F852
%27FD06FF527DFFFFFF27FF7D52FD08FF525227FFFFFF7D527DA8FD08FF52
%7D52FF27A8FFFF7DFD05FF527D277D2752F8275227277DFD0527FD12FFA8
%27F852527D52277D7D5227F87D27275227F8A8FD04FF277DFD05FF27A8FD
%1AFFA827A827A8FFFFA87DFFFFFFA85227272752272752527D2727F82752
%52F8A7FD13FFFD05277D5252277D7DA85252FD0427A8FD05FFF87DFFFFFF
%7D52FFFFFFA17D52FFFFFFA8FD05FFA8FFFFFFA87D7D52A8FD04FF5227A8
%FFFFA87DFD04FF5227277DF87D5252277D52527D7D277D52A8FD14FFA8FD
%04275227F8522752F8527DA852272752A8FD04FFA8F852A8A8F8FD05FFF8
%52FFFF52527D7DFFFF7D7D27FFFF7DF8FF2752FD04FF7D27FFFF7D52A8FD
%04FF7DF87D2752522727522752F87D7D52F8FD18FF2727277D5227525227
%525252267D52272627FD06FF7D27F8A8FD04FFA8277DFFFF27A8FF27FD04
%FF277DFF7D27A87D26FD05FF527D7DA8FD06FF272752277D52277D4B2727
%7D5227277DFD18FF52F8277DFF7D27F827527D2752527D5252F87DFD06FF
%A8A8FD05FFA8F8A8FFFF5252277DFD04FFF8A8FFFF527D5227A8FD05FFA8
%FFFFFFA8FF27A827275252F85252522727277D2752A8FD1AFFA8A87D2727
%525227F827F8272752F87D76277DFD0DFF5227FFFF7D27FF7D27FFFFFF7D
%7DFD05FF5252FD0AFF52F827527D277D2727FD0452F8522727FD1FFF7D27
%F8275252277D5227277DF87DF87D272727FD09FFA87D27A8FFA8F8FF5227
%A8FF7D275227A8FFFFA87DFD07FFA87DFFA8F827F8527D52F87D52527C52
%277D5252A8FD22FF7D5252A7522752A87D7D27517D27F8272752A8FD0CFF
%A87D7DA8FFA87D527D7DFD09FF52A8A827F8277D525252A852277D525252
%272727525227527DFD1EFFA87DA852F8272627F8FD04277D27A14B27F827
%F827A87D52527DFD19FF7D27275252272752F82727A8F8522727F827527D
%27525227F87DFD1FFF5227F8272752277D5252527D527D52A752272727F8
%527D27F82752527DFFFFFF7DFD0FFF7D5252527627F827277DF87D2727A1
%5252275252527DF827F827F8A8FD21FF5227F827F827F827F8522752F827
%27A8F8522727F8A852272752F8277DFF7D2727A8FD06FFA8525252A8A87D
%27F8275252F8277D76F85227527D522727527DF827F827F87DA8A8FD23FF
%7DA85227F8272627F8272627F852A852277D2727F8A85227275252277DA8
%26522727A8FD04FF7DF82727A8F852277D5227262727A8277D27527D27F8
%522727F827267D7DA8FD28FFA8277DFD052752277D527D7D7DF852522727
%7D5227F87D52277D272727F852FFFFF827F8522752272727527D27F8277D
%7D52525227527DF87D52A852527DA8FD2FFFA8FFFF7D52A85227F827527D
%F87D522752A8F827262727522727277DF8FFA827F852F85252275227527D
%27277D522752527D7D7DFD05277D7DFD34FF2727F827F827F8277D522752
%272727527D7D27527D52272727525227F8A827277D522752527D277D527D
%527D2752277D527D525252272627F87DFD2FFFA8522727F87D5252527D52
%7D7DA8525227277D27F87DA852F87D522752522752522727A8FD04522727
%277D52277D7D27527D52275252272627267DFD31FFA852F8272727F82727
%522752F8FD047D52F8FD0552FD0427F8A852277DA85252527D277D275252
%52F827527D5227F8272752F827A8FD34FFA8272727F827F827F827F87DA8
%27F852527D27272652F85252FD0627A8F85252275252F827277D27525252
%F87D7D5252FFFFA8A8FD36FFA8FFA827F87D522727A87D52F8272727F827
%F827F8FD047D52527D527D525227525227F8275227F827F852F82727FD44
%FFA8FF5227F8522727F8277D5227A8FD0552FF7D527D5226522752527DA8
%FFA87D27A8FFA8A8FFA8FD44FF7D27F8272752F827A8FF52A85252522752
%7DFFFF52527D7DFD0427A8FD4EFFA87D7D5252FD05FF272727A8A8275252
%27FFFFFF2727527D5227F852A8FD50FFA8FD04FFA8272727FFFFA8F827F8
%A8FFFFFFA82727F8527D52F82752A87DFD51FF7D262727FFFFFF7D27267D
%FD06FF7D277DFFFF27F8525252A8FD50FF7D2727A8FD04FF277DFD08FFA8
%FFFFFF7D5252A8A8FD52FF7D52FD14FFA8FD56FFA8FDFCFFFDFCFFFDFCFF
%FD4BFFA8FD55FFA8FD12FF7D522727277DA8FFFFFF7D7D7DFD05FFA87D52
%FD06FFA8527DA8FD05FF7D7D7DFD06FFA8527D52FD06FFA8527D7DFFFFA1
%527D7D7D52FD047DFFFF7D527D7D7D527D7DA8FD04FFA87D5227275252A8
%FD0CFFA8F827F827F827F82752FFFF27F827FD05FFA8F8277DFD04FFA8F8
%27F852FD05FF52F827FD06FF5227F82752FD05FFF827F827A8FF2727F827
%F827F827F827FFFFF827F827F827F827F827A8FFA827F827F827F827F87D
%FD0BFFF827F87DA8A87D52F82752FF272727FD05FFA827F8A8FD04FF5227
%F827F8FD05FF522727FD06FF7DF827F827FD04FF7D27F82727FFFF52F827
%7DA87DA87DA8A8FFA827F8527DA87DA85227F87DFF52F827A8FFFFA82727
%52FD0AFF5227F87DFD04FFA8527DFFFF52F852FD05FFA8F8277DFFFFFFA8
%27F852F82752FD04FF52F852FD06FF5227F827F87DFFFFA827F827F827A8
%FF272727FD08FFA8F8277DFD05FFF82752FF272727FD05FFA8FD0BFF5226
%52FD0AFF2727277D7D7D527D5227F8A8FFFFFF7D2627A87D2627A8FFFFFF
%522727FD06FF7D2652522727FFFFA826527D2727FFFF5226277DA87DA87D
%A8FFFFA827267DFD04A87D27267DFF7D2627277D7DA8A8FD0CFFF82752FD
%0AFF52F827F827F827F827F8277DFFFFFFF82752FFA827F87DFFFFFF52F8
%52FD06FF522727A8F827A8FF522752A8F827A8FF2727F827F827F827F8FF
%FFA8F827F827F827F827F827A8FFA852F827F827F82727A8FD0AFF27F852
%FD0AFF272727FD057D5227F8A8FFFF7D27F87DA8A8272727FFFFFF522727
%FD06FF7DF827FF52F87DFF27F8FFA12727FFFF52F827527D527D527DFFFF
%A827F85252522727F87DA8FD04FFA87D7D5227F82727FD0AFF2727F8A8FD
%05FF7D5252A852F852FD05FFA8F8277DFFA827F827F827F827F8277DFFFF
%52F851FD06FF522726FF7D272752F827FFA8F827A8FF272727FD09FFF827
%52FFFFA8F82752FFFFFFA8A8FD05FF7DF827A8FD09FFA8F82727A8FFFFFF
%7DF82727FF272752FD05FFA82726A8FFA82627277D525252272627FFFF52
%2727FD06FF7DF827FFFF272726277DFF7D2727FFFF52F852FD08FFA827F8
%7DFFFFFF7D26277DFFA827F87DFD04FF7D27F8FD0BFF52F827F8272727F8
%2726FFFF27F852FD05FFA8F8277DFF272727FD05FF7D27F87DFF52F827F8
%27F827F8FF5227F8FFFF7DF827F8FFFFA1F827A8FF2727F827F827F827F8
%27A8FFF82752FD04FF52F827A8FF2727F82752522727F852FD0CFF7D2727
%F827F82752FFFFFF522752FD05FFA827F8A8A827F87DFD06FF272752FF52
%272727F8272727FF7DF852FFFFA827F87DFFFF7D2727FFFF52F827F82727
%27F82727FFA827F87DFD04FFA827F852FFFF7D27F827F827F87DFD0FFFA8
%A87DA8A8FD05FFA8FD07FFA8FFFFFFA8FD09FFA8FFFFFFA8FFA8FFA8FFA8
%FFA8FFA8FFFFFFA8FD05FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FD07
%FFA8FFA8FFFFFFA8A87DA8A8FDFCFFFD57FFA8FFA8FFA8A8FFA8A8FFA8A8
%A8FFA8FF7DA8A8FFA8A8A8FFFFA87DFFFFA8A8A87DA8A8A8FFA8A8FFFFFF
%A87DA8FFA8A87DFFFFFF7DA8A8FF7DA8A8FFA8A8A8FFA8FFA8A8FFA8FFA8
%A8FFA87DA8FFA8A8FFFFA87DA8FFFFA87DFFA8A8FFA8A8FD0CFFA827FF52
%7DA826A852FFFD047DA852A827527DFF525252A8FF275252FF27A87D2727
%A827A827A8FFFF7D272752FF52277DA8FFA852267DA82752A8FF524B52A8
%52A87D52FF26A852A8FF272752FF7D52FFFF522727A8FF277D52FF277D27
%A8FD0DFF27FF527DA8272752A87D52A8277D7DFFF8527DFF277D277DA827
%52A8FF517DFF27A8FFA8F87DFFFFFF527DFFF8A8525252FFFFFFA827FFA8
%F852A8A827FFA8FF2752277DFF2727277D7D52FF27A8527DFFA827FF527D
%7D52A87DFFA8F87DFD0EFF27A852A8A82752F8FF527DFF52F8FFA8277DFF
%FF522727FFFF7D5227FF27A8FF52A8FFFF27A8FFFFFF4B7DFF27A87D52A8
%A8FFFFA827FFA8277DFFA827A8A8FF527D7D52FF277DF8A87D52FF277D7D
%52FFA827FF7652A827A8F8FFFF52A8FD0EFF522727FF7D52A827A87D52FF
%5227FFA8F82727FF27A827A8A827F87DFF277DFF27A8FFFF27A8FFFFFFA8
%F8277DFF27A8FD04FFA827FFA8F82727FF522727FF27A87D52FF27A8277D
%FF272752FF522727FF522727FFA8522727A8FF27A8FD07FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
% EPSF created by ps2eps 1.68
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-06-25T14:59:26+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-06-25T14:59:26+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-06-25T14:59:26+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>220</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADcAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FUs8y&#xA;eZNG8taLc61rNyLXTrQAzTEFvtMFUKqgsxLEAAYq8l1b/nKHQpPMdhonk7SJvM8l6VT11eS0AdyK&#xA;KiPBJI/EVLEqoHv2Ve24q7FXYq7FUl81+dPK/lPTv0h5g1CKwt2JEfMkvIwFSscahnc/6oxVh0H/&#xA;ADkN+XBniS9lvtMgnYLb3t9ZTxW8hIqOL8WoPc0xV6Pb3FvcwR3FtKk9vMoeKaNg6OrCoZWWoII7&#xA;jFVTFXYq7FWP+fofNcnlS/bypdG11+FPWsv3cUolaP4jAyzKy/vB8NdiDTfFXzz5Y/5yr82aLFfa&#xA;f5x0htU1K2mYeonGzkio/F4pkWMr8B2B4g9jXrgV9HeUPNekea/Ltnr2kyc7O8TkFageNxs8cgFa&#xA;MjbH8NsKpxirsVdirsVdirsVdirsVdirsVdiq2SSOKNpJGCRoCzuxAAA6kk4qxi6/M/yNBoN1ri6&#xA;vbzWNs0satG4Jmli2McA6ylm+FeFanpir5Nu38+eYrue+83atPbG0uvrk2ma81zDp1t6hBtiYyG/&#xA;vizqkUcdeKkkhcCvUPyR8qab5WvL38yfMXmDR7Oyv0ksrWGydEtPjkQsVc8FWjRcRGg/phV9C2d5&#xA;Z3trFd2U8dzaTqJILiF1kjdG3DI6kqwPiMVVsVdirsVfPY1j61c+aPzP1CyXWtTsdWPl7yTpUx5Q&#xA;QssqQpKF6Kzu/InrsaHcHFVTXPzB856Hqsth5nutO84eX4fSi852tvZCO201bqRYUT13YrK/KT7D&#xA;LWg349Qqyr8q7eTyp578z/l5DK0uiWqRatoUbsWaCG5JEsFT+ysh+H7+pxV6tirsVdirEfzC/NHy&#xA;z5Ct7efXVuuF2JPq5t4WkVnjAPp89kV2r8IYjFXzT+Z/mjyR5j1a082fl8buw83zTxfpHTpUZZLr&#xA;1+Kx8IuUiStyVVdEqHDVod8CpP5ej8+eT/OFvrunaXq+iaCl7DNe2Ugl4Lbsw9VZFCr6kNCVWQpQ&#xA;7ftYq+z9U1vR9JtFvdUvYLKzZ0jW5uJFjj5SGiDmxC74VRiOrqHQhkYAqwNQQehBxVvFXYq7FXYq&#xA;7FXYq7FXYqlnmHzJpGgWkN1qc3pJcXENpboByeSa4kEcaIo3Jq1T4DfFXzn/AM5G/mV5i1TUtY8l&#xA;6FLA+g6dawXWszQkGVj6ihoy/KhUPNFVUWviacsCvMYIH07y3oaWRMr3yz31jeFqJFeNSG5kP7UK&#xA;2UUQJPUsRJXiqgKofTNHu9avrLy9HrN7qflPT39e/u4frAsbRGqZJEjuFRYf2vjcCtenbFXovkH8&#xA;t9C/NK4niRrrSdL0WwtLWykMQlZ45TJIyCWRUTkknJndYwWLfDxUfEq+rLeBILeKBPsRIqL8lFB0&#xA;wqqYq7FXYq+Zf0p5ZtdX88eQvMM8+neVdT1yWfR/MagiOy1RfTneIyDZeDceO42Br1JCqYR6Bo+i&#xA;eXrKx80eeNF/wVp9wt+9npSg3eqzRMHU3LepK8hZ1qwTlWnagIVZB+UOvXev/mr5p1zVbCXTrnVN&#xA;Os59Ctp6B/0WskkQdl7GR0R/p8KYq9qxV2KuxVjH5i/l/pXnvy6dC1Oee2t/WjuFltiocPHUD7au&#xA;KUY9sVfM/wCb35Z+ZvJmpWlroUV5r2myWscsOoPaepc2ktq5Ccbq3VXHBd1BNKHoaCgVismnQaiZ&#xA;fNPkFNQtr4TelqOiWSOLmx9VORnt5LduTWzMGT4kXjsvcYqyyDzd5g8z+W9S/L+/vR5n057ea40D&#xA;WJVkj1Br21UTJbUmckvWq8GqxWvEnbFU8/JD87Nb0SLQPL/mdrdvK136tlp+rM3CS2lgofRnYtx4&#xA;p6iDcCisprTbFX0za6lp93JNFa3MU8lvw9dI3VynqIJE5UJpyRgw8RhVEYq7FXYq7FXYq7FVk00U&#xA;ELzTOscMSl5JGICqqipYk9ABir4wvvN2u/mJ+Zfl+/1nULe3jS4lGj28LCBQLZ2lhTlITwe6mRYl&#xA;dq79qCmBWJLbXmpaW0GlJCmp6veXdxqFrbScEWzgCvHyqRBFBHJ6rVZ6bKeig4qneoXPlvUdQvWX&#xA;zRcywtxgtdF06ykjM1mpJSygl4osY5H4g0XGvxkOwxVkn5Q6Z5e8y+bNP8t2GkarLomm3R1bUY57&#xA;y3lhWZQkYFxGsUMc0asgVafEatRaEjFX1H5s87eWfKVil3rd4tssrena26gyTzPsAkMSAu53HQbd&#xA;8KofyV5/0PzdFefUI7mzvNOlEN9pt/Ebe7hLDkjPESSFdd1P8cVZLirsVWXE8VvBJPKeMUSNJI3g&#xA;qipP3Yq8x/J/y/Z63+VUsmsWySr5sub7U72KRQ4Ju5mCtQilfTVSDiqW/kX5F8jy+VoZ7vQrGTzJ&#xA;od5daZqF28Ku/wBZtJiof4+VG4FDXriqe+cv9xH5teStdFFg1SO80G9fof3iC5tV96yxnFXo2KpJ&#xA;5z826Z5T8uXeuajVorZQIoE3kmmc8Y4Yx3Z22H34q820nyz+dOmWn+MbbUxf65qjG71nydenjahG&#xA;/u4LWX/dMsUQVK9CRuTTdVlOlfnP5JudJv7zVLh9DvdIXlq+k6gpju7cghdowC0oZmAUoDWo77Yq&#xA;n0PmWPW/K76z5OltdXeWMtY85THC8g/YkZVZkYdwVqDsaYq+MvNPn7UdQ8z6ilx5U0jT9We5kVl9&#xA;F1uIbkMVZjKZVrIHH7Xw16DAqK1+2fUfMuq6jb6lpsdxeND9a0XUnksLtJYQjEM06xwCXmn94sp5&#xA;VO9GYYqgNdis5tQ1DTL+JbWbWdR9eymnJg/Rd3LOi3cNynT0hE4PNdiFRh3Cqsz/AC//ADMtPLP5&#xA;1arqV0blNA1meTTpyR9mWNkCSNFViAjdFBqqtQVpTFX15hV2KuxV2KuxV2KvG/8AnKQazdeQbXS9&#xA;HhuLm4ub0TXlvaozs1lbQyPKzhQxCJIYyT0rTFXz9reiXmiara317YSJ5b0i0+r2okUWss8nApNG&#xA;rlUldvrkslXFeIrwNFGBUX5J1O8Pm1mh0S30TStIhNzf2f1cz3LhwscETy3QkuW9eaSGMIGVaGtA&#xA;Ktiq/wAq+TdT1jULfylY6/o2labdq0GoXKT2st2zngzxN/dzTMzcQqQuYtuPIkMSq+s/IPkLQfJP&#xA;l630jSoUDIi/W7wIFluZQPilkO5JJ6CvwjYbYVef/lxLpF1+bvnCDzK63fnmxuW/RckrB449KZVe&#xA;FLRaAIyLJ+8779ftYqnn5k+XtV0nVYPzG8rwmXWNMj9PW9Nj2/SOmihkjoOssQHKM9e29AMVZzoG&#xA;u6Zr+i2es6ZL61hfxLNbyUoeLdmHZlOxHY4qk4/MvyM3muLypHq8EuuTBuNtGeYDIK+m0i1RZCAa&#xA;ITy26YqwD/nJnzb5i0Hy/p9ppV01rba19csr0xxJLI5aD91GvIMV5klSV33qDir1Lyto6aJ5a0nR&#xA;0FBp1nBa+O8UaoT9JGKvP/y+1extfzk/MLyzbSAxSva6tHGNqTPBGl58/jeM+2Ko78/rC4m/Li51&#xA;OzLLqGgXNtq9nKlOcb2so5OpIYVWJnI2xVH/AJXeaL69/K+w8w+Zb4SyiO6mu9QkVIgYIbiUJI6x&#xA;qirSFFrt+OKvMtZ/MTy3+ZWq6HeeWdWjtPMOg3bT6d5Z1xPTs7+b7KFZEPH1qH91V6g/sjc4q9S8&#xA;mfmdpPmC7k0a+gl0LzXbD/S9BvqLMKDd4H2WePaoZO29Biqt58/LLyx5zt421CI2+qW1GsNXt6Jd&#xA;QMpqtGp8S1/Zao+R3xV5Hpun+YPy2/Miy1TzQ66f5duElh1HX9LidLDUJ5Pht21C2UmO1kUsWMip&#xA;Qn/ZNir0D83fyqsPzK8u2Uen3dvZ3UU63VvqSxiZZIXRgy8kIqrcgwNe2KvA/wAwPIul+SVt9K1v&#xA;zZpuuH0lhisZbJ3urbh8QBa3l9eGIctv3nxb/AcCpF5k8ymfSdN8wxabpt5pN67WWp2RsLZWhmtx&#xA;xWIXSJ9aiWaAh46y8wQwDMExVCX2lza/o1/d6Bb3s1zIyS6vpNy8dxew/VULQ3IaOOB5YHhlfkfS&#xA;qHALE1BKr6p/Inz/AKr548hpq2rekdRt7mWzuXhHBXMaq6sU6KxWQVA2wq9DxV2KuxV2KsO/Njz+&#xA;fIfk6bX0tVvJkmhghtncxq7SPv8AEAx2QMemKvluL83vOmueaNY1/Uby5hsobC7ntLSKSRraxaaI&#xA;2ttKkHJUZxJOiByPtNywKk89gvmLUH1fVmuxPPFHHoVjMELT2tlalBcXU080AihRIkZ5K0c8qEUJ&#xA;Cqc6PLpV1DJZy6n/AM7j5mVrLV5ktlvIpPVuUENlayWkqwK0qxRsx4+3NMVelflR+Qd3J5sHmrzT&#xA;Yw6dBpcqxaZo0UbCOc20axR3TiV5HVSVD8W+Jm3PuVeg+ePzYjtJLvSfLD281/aCmra3dtx0zTAd&#xA;qzyj+8mP7EKVYnr4Yq8rh/L/AM767cWnmryXayfpW1ufr8nnDW5HtbzVJCpUrBZqCsVqV2VXAqpA&#xA;rSuKp95m/N3X9bd/LOp2t55K5W0bX0KRSXGsXzzVU2+lxKvEKzKy+qx2HhirIPyjuIF8maz+X/mD&#xA;1NJu9JjnV7S5ZEli0u9Vnik9ZeKSemJCryLSjD5Yq8W8vNBdeVItKOrW9uun3J9Fk1TQ9PAubV/3&#xA;V1EJYI7regYP6lW3+LAqbLFrHmzzv5NtNe1867qUmqRyyC31LT7mzS3tlM0wWysg/pOypT1Gfcdv&#xA;BV9YSyxwxPLKwSONSzsegVRUk4VfJv5d+ZEj/M/RPN8t0it5l1W+hvbb67ayyCPUSVtVNon+kwqr&#xA;olTISv2ace4V9T65pUGr6Lf6TcCsGoW0trLX+WZCh/4lhV8heXdOt/8ACaaVPq1zYrI7xatplx5j&#xA;0y1geSGYhh9Ruk5IPUjr8VeXvXAqfW3mfRbLz95Tm8w6tA2i2lzJdSSR3WlX6pPHEVti36LhiaNQ&#xA;71Jeo27dcKs5/NHzH5X/ADA1rTfJPlSOHVvMxlSZfMcBPp6VDGyySzJcRFSzcf2VbjWlfioMVTH/&#xA;AJWP5h/LfWrby559uV1rS7iNpbHzHbL/AKVHBGwQtf2y1PFSwHqr1/yjWir1aC40fW9LWWB4NS0u&#xA;9j2ZSk0EsbDf+ZWU4qwn8lHa08vap5akJ5eWNXvdNiDdTb+p68Df6vpzAD5YqhfzM/JDTPOOoxaz&#xA;Y376FrUUMsT3NtGtLgvQp9YpxLBTWviDTFXiN1+WHmfQPL95p/mrSIbIa0gsLfV7S5tlh+s26Pc2&#xA;SvbKu8kssIh5ilVY/tfaCvNtNuZjpY121/c+YPK9xZvGylVL2ys4WWRCQ7NBMsUdV24sAaUFVWUD&#xA;zPqul+SZJvKl5d6JFruqSXv1ES8eC2NuXmELrw5R8yN+PxUVDXgaqvq/8qfM9/5o/L7Rdc1Fo2v7&#xA;yEm5aIcVLpI0ZPGpoTxqRhVlmKuxV2KvmP8A5yyu/M2oeaPLnla1Utpt1EJ7SGqqJr55Xh48mIFU&#xA;QqF3/b98CvK9JluxqHmvXrK7F5Hpdi9l6YoWube5T6gJGjJPOKKM+oxofiC1pWoVR2r6R5jfyv8A&#xA;XNK0V5LG60mA32rylzILWEpKYreN3VRHEYlDsiMSASWoWqqyv/nH3yNpHmbzfHcJc3C6P5Va2v7d&#xA;FDcbrUfhLyl2C8VV4hRKV48f8olV9P8AnDR9R1nyxqelabfNpl9ewPDBfJXlEzbVFCCKjaoNR2wq&#xA;w3yf+SulaYLWbzA8Oqy2J5adpsUPo6ZaN/vyO2ZpDJMTu00rM59sVejzzwwQyTzusUMSl5ZHIVVV&#xA;RVmYnYADFXkGteevyj/M7QL6zh1yPTNU0tnutPv7kfV7i2ltSWS6hZqc0+GpCmvHqFOKsRuhZ/nf&#xA;+XQ1C0Cr5/8ALqCK9t4mEf1yEHmU+IEGOcpzj5LRJBSlK1VS3R/MemNpdt6PmC60yJU4Lp9xrWkW&#xA;skHAlTG0L6YhTiRSlMVZB+VYGufm+l0NRl1S00HSpZY55Ly1v1S4vJBFxSS1t7VBWJWqCCcVek/n&#xA;Zrkmk/lprJtyTf6jGNMsI0+2816wgAT/ACgrs30Yq8V8x+TPzAsfJRVND1+C30aKK6szNf6PPBEb&#xA;Kjq5t4IluaKqHYSFvHl3VfSfl3WrbXNB0/WLVg0GoW8VzGVNQBIganzWtDir5t8xxWvl38xfNmlT&#xA;3c1pDNejU7ULqGm2ETLfxiV+P1+2uGaknIUVgB4d8CoDUfMei29jNM9/dXSou9vBrOg3Er1NAqxR&#xA;6e7MST2GFXqH5aeWNK/Kr8v77zX5nC22p3MQuNQFEDQRk1gso1RY058m+IKADIfADFW/y/1fy5Bo&#xA;V7+aPnPVLNLzzOGVDJIHjtrGMkR2EKmpZlpWVVWpbqNq4qrxeSr7TYo/N35QX8QsNRVbqby1Ox/R&#xA;l4ripaCu9tKRttQV2PEAjFUT+VE2v6n5w83+Yb3Q7rQLLUjYxvZXoo5vbWExzvEKDlHx4jn0br40&#xA;VZ55q0qXV/LWqaZBI0U95aywwSq7RlZGQhG5p8S0anTFXxTfxfmV5a1KTTta1DULHzDcODFaagyy&#xA;2d1GSF5+tPI8LMGHwkqV2+0GpgVEX+pWU8enX+saxLp3mi4t7tdQ1BrQFJYZXlszCfqpHJ4vSYiR&#xA;hVufUcFGKqGprBofmHyv5e+sR3kVjGPrOpVEdvcWerfvikRuKKsX1ac/GwHxM3gDir1b/nFSWy07&#xA;zT5y0M3RilSSMWenyvydkt5JUlk2CqWX4AxUb+wxV9J4VdiqF1TU7LStNu9Tv5RDZWUL3FzKQTxj&#xA;iUsxoKk0A7Yq+PvPP5n3Xnu/8malPBCP0TeTy3ZgasyLNfIIklioCqrDHEA9SrM3UHbArHn8s6L5&#xA;WebWry9s7hntvW0Py/K8txdSi5otvLciKOOD0mhYy8fU32BUg0KqO/Lnyr5n87X3m8Wkkd/qk9pH&#xA;ZC5MhjVWnu4v3qsqjjCsFvIpAX7HwBdwMVfV/wCVPkE+RPJtv5fa7F9LHJJNNcKnpqXlNSAtWNF6&#xA;VOFWX4qx/WPzB8j6LfNYavrtjYXqBWa3uJ0jcKwqp4sQaHFWE/mZ5v8Ay982+StS0Gy886bp9xdo&#xA;AsououL8Ty9KWh5enJTi3Henj0Krxyz8weX/ADLodtHqcVmYbU+lFb32vWMBUxALyihk012SM0+H&#xA;fpgVFXXmqXQ9cs/OGi3umnUdNT0ry3bX7S7+t2A3e1EUdpafF+0h5GhGyk0xVNPO3nPybZapb+cf&#xA;KOtxvY6/wOu6BBeR2dxHcuKLdlGiuiv8swWInv4nCqd/kn558m2Wo+btZ17XrOzv9QvorWJLq+im&#xA;doLGLijpKEt1eNmkbiyxgGmKrPLnmzyB5u89aj5x84+YbNLPSLxrfyjo11cxxxRxw0/04xFvieRt&#xA;1LfwWir1V/za/Kx1KP5p0pkYEMpuoiCD1BFcVeWP5h/L/wAieatJ1HyH5itZNB1W9Sz8weWobtZ4&#xA;UW4NFvbeMsxjMbfb49qDYYqi/wA8Yv0R+YWha0J3tYNXsJ9PnkW/GmR+paOJ4/VuWiuFWqysBVNz&#xA;tXFUL+U/lm586eZB5m1Q3MnlnQZiuk2t1eG/iudRiZla6jkMNsGjhGy/u/tdzQ4qk35sfmLYebPO&#xA;A0mHUIIfLnlubl8V/DYvdagh/vUaW3vVeOChUVjoSSa4FYYJfKGkXNxrdvdL9dHOVmh1ywml5P8A&#xA;a9KMaK3Fm78APfFXpX5EfmF5R8veXLxNZ8y2llZ3ty11pmi3E6T3Foj7yCSaKOCL94/xBEjUL8yQ&#xA;Cr01fzp/Kp2Cr5nsmZjRVDkkk9htirNEYMoYdGAIqCDQ+xxV5J+dn5F3f5iX9lqVprIsbixt2t0t&#xA;JovUgarF+fJSGRiTRtm2A+lV8zTSrDokWp3lpD+lPK11HpHoTostneRuZ5CjwniecZVuTKdwQfhb&#xA;dgqf6DJrepInljUpvreg6xo99N5Usbpo3lSaKKR7RYXf94hW5iMCmoDUZRscVZJ/zjlEmqfnVfXm&#xA;pWv1DULCwnkiszGsTLPyjt5S4CxnnxlctVa7mvTFX1lhV2KvJ/8AnJy98xWf5WXUmkSenbSTxwaw&#xA;eILGzmrGQCa05Ssin2OKvlbybptpJ5gby7qEzwHXbeC0t76DjILeaeWC5hlcclrGpQCShqASRWlM&#xA;Ctw3ls2j3/mPV7Y3GozNBp2hRvyS39OK3aGZgFKs31WIQKlG2ZlJr0xV6H5f83eTfydiv1062vNW&#xA;893dlEseoSqiaUIrpI7hDAFl9SSP7J5FatTYqDir6J/J3zfrfm/yBp/mHWVt47y8aYcLVHjQJFK0&#xA;QqJGkqx4VqDTfCrNMVYX+ZP5dQea7W2vbJ47LzPpTeto+pOiuAw6wzKQecMnRlIPj4gqoT8v9a8v&#xA;eYobnTdU0Wz03zbpB9LWtIMMZKN+zNEafHDIKMrCvWnuVWS6lY+TNLs5L7U7fTrGyip6t1cpBDEv&#xA;IhRydwqipNOuKpH/AIs/JX/q8+W/+kmw/wCasVd/iz8lf+rz5b/6SbD/AJqxVpfNX5JqKLrHlpR1&#xA;oLmwH/G2Kt/4s/JX/q8+W/8ApJsP+asVd/iz8lf+rz5b/wCkmw/5qxVIvPV9+TPmDyfq+jw675di&#xA;ubu2kW1lW6sVKTgcomqHB2kVcVYXrWrx/m35b8heWrCRv05Oq6hrt8nWyt4I5LO6ZqjZ5pOXpr8u&#xA;2+Ksr/MzzHo/lPRNI/Lfy9f2uhXeqRLare3EyQx2GnqCJrlpHZf3jgME35M1TWuKpxoWqfkTouj2&#xA;mlWes+Xfq1nEsUbSXdi7txG7uxb4mY7sfHFU/wBGuvy11uWSLRZtG1OWFQ0sdm1rcMik0BYR8iBX&#xA;xxVd5jPkby3o1zrOs2tla6faryllaCOpPZVHGrMx2VRuTirC/JPkmTzL5gg8/wDmPTU02KGp8reX&#xA;vTSM2sR6XV0FA5XElOQU/Y+dKKvV8Vdir5q/OD8v9P0zzrf39lo5i8qDSTq2vxpBJLFc3YmlhVIC&#xA;Ff0JqyKWdGXihLHvVV4Otm915LfVLhpiul3kVja8lZomF2kk3piSoCCIwO3EdTJ064FZfd6vr+gN&#xA;N53if9G+ZdSaKHRY5mrdJpsds0Ut5LE1Rym4RKjyV5EuQCeLBV9QfkLe3F7+Uvl+6uTI1xLHOZZJ&#xA;al3YXUoLknc8qcq98Ks+xV4V/wA5ZWnnGfyhZPpfN/L0UjvrsMagkFSht3f9r01blXsDQn2VfNk1&#xA;zqOmxeXPMFksUdxFCwFwpjm5S207KPWSrgUheJOLAVWm29SFZzqmj6Sg1i61W1WPQ/KdzC+raHZf&#xA;uYp9YuoYYZLeCRuTRxerbyepxJoq/CN1oqlaRea/P7Pp2l2Et3rGqTWrXcdtAqWFhYxKyWUAcA+h&#xA;GqsWNTQjj1YGqr7T8vaNBomgabo1vvBp1tDaxnxEKBK/TxrhVMMVYn+Yf5l6D5DsrO71eK4mW+mM&#xA;EKW3o8uSoZCzGeWBAKLT7XWmKvBPOf5k/wCLvO9h5l8nTW2h3eh2fGO51O+02zknmkm5GGUG4YTQ&#xA;ekpHHnsWJ+YV7d+Xv5h+WvzI8vXMLxwm8iU22t6O7JOilqq3Fl5JLDJvxcbEYVYAuleV/wAqPMcW&#xA;ka/p9lfeR9ZlZtK1S5ghluNOmc1MFyzKWeAn7Eh+z3xVS/Mbzz+UN95V1jR/Jun2ureY7m3MFqum&#xA;aaZCjTEIXEyRBQVUkgq1a4qx/wA46jo+peRoPLel+RLvS5VW0hn1PUoLLTp2jt3QvR5ZFkDS+nQs&#xA;T0O/XFUfJ+a+iKwjj/L7yvChJVJJtc0U8Qv88caO6/LFUQ35gQxx+tL5E8prAKFnOp2Cih/yjDTF&#xA;VBPzY0aQuqfl35ZJFVjKa5ojlnOyUjKxuwJp0xV35WebP8E6TqM0nkrU7/WtVnlu9Ru9GitrmAkl&#xA;2jijW3lf04I60HXqT7YqreQPPP5WG5v9Q/MOaNfOutTetew6tYyiK2iWqQW8BljZEjjTuSKnxpir&#xA;JPNWt+S9QntPLX5d6RouseZNWjLx3sVvbTWdjbA8Xup3RWUlf2U8eo6BlWX+VfK/lH8rPJUoedIL&#xA;a2Q3Gr6tMArzy93ele54og+QqeqrxK//ADai8w+ddL80eYILW68n2RmfRfL6ahYLcxXMZCR3V7bz&#xA;TR/vD8RQN9nt4sFe3/l1+aGjeev0iNPt5baTTDCJ0kkt5QROGKMr28kyEfu2HXrhVmWKuxV8u+Yf&#xA;zs86ar5s1jyTcRCzmt9UuU0S8tmaGUT2jyG1trgAsk8c7IsbDavKu/TAryx/LLah5l1LRYGOh6aI&#xA;U1nUYruOYG1FvbGWaJYuId/RaeSNBxqadepxVV80615b1nVfNurWkEpsJobO3024kqkpmQwr8S8m&#xA;VVlW3lkpuRQDxxV9X/kJo0mk/lRoET3v1361AL1WBqsS3P730V3P93y4n/KrhV6DirC/zX896f5M&#xA;8v21/qVpHfaZe3kdhqEDsAfq06P6rohVvVKgbptUV3xV8c+ZLCzs5NVtNNu0HljVZH1TQXV3dJFt&#xA;ZJY44n5KrpIsUkgKuoPLj2IJCsn1rVn8xxJo+r3LW9vFpOnazr2owxh5pZbaylMIKlkV5JY7yGPk&#xA;z9d/bFUf+Rvm2+1H85NAiSGWTToLaWztLYtX0Y0tCrTvxAUyP6dZGI3r7KMVfYmFXYq8v/PHyZfa&#xA;1a6Zrdr5itPL76D9YKyX6qIHNyqKSZX5BCFjKj9232jirxHRvMer6tpbXNtaauqRExzaxcX+lWul&#xA;hweNRPNpqhv9QMWwKnHlv8r/AMxdT1P9LpqWotdvE1ub3T6aPCYWP2GvZYo55R7x2bqeobFWS+Xv&#xA;yo8kXnmI6fNrljea6wMt1FZRfpW6jVAOTXF1fm8iTcgA+hHuRTfCrKfN1n+V/kUaLb+Y2u7q21a6&#xA;NrH9avJ2togEJaZ7YOluqKxRW4x7cq9sVZ5pnkjyTp6KdN0LTrZSKhoLWBK1pvyVd+g3xVgX5wax&#xA;+Yfl2bRrfyTeRG51u7kgj0+a3tyodITIFjk4pTlwI+Ou/wC0MVQ+nfnDdeZvImutZyyaD5+8u2Vx&#xA;c32jPEjMZbZCx4xzI7NGzLSg+JSaHsSqyLS/NFtp35UWXnLzpefX0m0+3v7lmhhAVruNGWGGNET7&#xA;TSKo5E79TTFWL6DpGreetHj8yf4J8s2Vjd/vdLt7+JmvJIv2ZGuIox6XOgKkKfHwxVM/LnkLQvNf&#xA;l1ri7sr/AMvXAnuLS50pb+S9gjkt5GgfjBdrNalSyVWkNCKYqwJ/yg8sXupyL5X8wafJrVsTG1pV&#xA;9F1WJgen+jfu0bt8VjiqR+fPK35ri1s7TzFqd9NpmnTi4hh1L05LdmUbV1KJJ4WO2zXsUYG/vUKl&#xA;d95turWS0sLmHV9Kvb8otpe397pn6OIYgGYXMemcJIlruyNT3xV7l+Tn5da35cmvte1fzBBrdzrM&#xA;EEf+hxqIFSAsUZJV4+p/eH9hcKvT8Vdir4f/ADH8j3un/mnreka9dg3GqNJqGn6jXkrLI7SqXUVe&#xA;pRJIgg/b49qHAqpomstrehabNa3ytr/lfT9XjnsLxpfVutPeGWRjFOEeMiGKRwYnZdgePXFWP6Va&#xA;G98p2Ply0shPruuakbq2lBReNtBG0AMjEfY5tKalgE4sx2OKvtL8rovLNv5E0qy8tX66npVlGbdL&#xA;xTXnIjH1SQaUJck0wqyrFXzF/wA5g6lp51nytp7u8k0EVxc3dsCQPRleNI2HbkxikH0YFeQ+SbbT&#xA;tV1ODyjrdpK6PNcC2uoZfSktZpIwJHdWV1kRfQVuHw9998VTLzBqk135f8u+Uba5UanqTWtxqnpF&#xA;lt+Mlpa22nQzMBWRo4ovUagopcjdq4q9E/5xy0jUJPzZ1C9tXhvtI0jThp0upQKywMyrFFH6fNIz&#xA;zf0Sx28dzsSq+pcKsM/M38xE8n6daxWdqdT8x6vL9V0PSVNGmmNAWbwjTkOXzA2rUKvMz+XnmHVI&#xA;7nzX57vUvpbKGS7uL2+jaXTrGKNS8i2Gmrx9cqqn97LRDsQkvXFXpOj+TdFfS7fWPL97BqeqvGrW&#xA;HmHUk/SKqnT9xHHJbRwrt9mDgo8MVebaf+Z3njyL+Yk9h+azNJpmpAR6TrFqGSxiHLciJKKynbkX&#xA;BkSn8prirIfyumtdR/Ob8y9UtmSS3A0uGCWMgoy/V2FUKkqQfRBrirEPzq1vRdZ8y6/Yap5f1LWr&#xA;ewtItH0G5sYi0UWrTlbiWs2/pyH1IFoFaoBFN8VTD8k/zB1/y5qM/wCWfnWGVr3SUT6jdwBrsRRt&#xA;GHW2maASU4qfgJ/1f5cVZj+Z36YuvNXk240vSLzUYNF1RrjU5IomVY4mi9OqmQIJNpCfgJ6U64qg&#xA;fzl/KD/FVqfM3lhmsPOFtC3pulYTeQshUwTcuNHKEqC3b4W26KoTzl5J1zzH/wA45aNo2n27HV7X&#xA;S9LnWycFJGa3gj9SKhpR+PKgPfbFU3/Lz82vIa+SdNttR1O30bUdJs4bTUNKvGEFxFJbosTKsL8X&#xA;epX4eKnqB12xVl2l+arWXy7feYLqwn0jTLf1rkG7RYpZLeJPUa4aKvKPn8VFejbVNK4q+f8A8pDJ&#xA;frrfnXzL5UGv6b5u1eO0E7GCc25ln9Nf9HmC/uvVuFTmrbcegArgV755M8mQeV01S3trqe4sby7N&#xA;xZW08sky20JiRfQj9RmookDkU7EeGFXmWoN5dvlvZdd8pah5S0+4mdo9UitxdaZcxcj6c1/ZBWSN&#xA;nUAlpIQy/wC/FOKpXZeRfN3ldRrn5Y6tC1rMRJ+ikmN1o1/UD+5ZndreRv5ZHPUBZv2cVeqflp+Y&#xA;9p51025L2smma5pkn1fWdImr6lvNvTchaq3E0NOxGKsxxV8o/wDOUuiT6N+YejeaZbqS5t7+MCK1&#xA;V0jlgaxKVWNmSQBWMgcFkb4uVdqYFefRXtlZef8AV4dPtmttK8wWtzaafa2yM7pDqdtzskVTVmas&#xA;kQcd9/HFVS+NxpFomhzajFba1qrOvmR7UpL9U021iVYrQSRFgTwWRpYkbeiK+9aKvZv+cPbDU08v&#xA;6/fm65aRLeJBb2hG4uIow8sv+TySWMe9PbCr6FxV86f85iQWEem+W70W7jVPXmjjvkBAWFFVjGzD&#xA;uXYMnyanfArwe+1W9j/Q3mq2ikF2Q8Wo3kxkcXF5GxEhdyakSW7pyo1S3PFU2lsPLemar5b1VYzY&#xA;m/0u41Oeymd7hIJ4vrC2jIyhJOLtBG6ozEiu5IOKvcf+cbLGHyX5Fk1bzJqFvp8Xma4ik0q2mkCu&#xA;6L+7RlUndpC42UH4aE+xV75irxr8xg+jfn15C8yX2+jXUM2kI7brDdyCUI1eimT6wor4KfDFWb/m&#xA;7P6H5Xean5ca6XdR16/3kRSn08qYq+d9G8y6v+WHmbVT5D1I+cPINikN1q8IYNHbrcOUWki/CJRT&#xA;d4xxP7S7bBXv76l5J/MLyJJc65ZSW+gXMayOdVjNp6dRUSRyScQCvaRGp4HCrAvy5g8rflhYa22l&#xA;Xdzren6jcJJBfyxxWFpFHGpCg3t5JBBMRyNWi5f6uKsesPzN8s6Bd6ldeXXgW8meS71aSyTUtfnc&#xA;tVpJpHmfTbRWIG7Aso+jFXeXvzP88+dLm5g8oQ6pqLRH1LmIXej6Sieo394YxbyzsCepExxVLPPP&#xA;mj81vLN3BHrlhNZG4R5LKSTWNYmjncdbdTp1xCvqk/ZU8dvbAqrMPzZ03zFoul6nYWen32vxtLYt&#xA;LrfmJA8q0L2rSrqLhJzyGx+Ek9SdsVRmsa5+avlTV9M0jUdLv5LzVn9PTvqWu3cqyyFgCnO+F2gY&#xA;V3DdAa+OFU0uvzB/MLy7EbzX9M120WLiXvL7T9P1e3iH2fjnsv0WwXl35VxVvUfzg8pec9Lm0fWr&#xA;q1uLOWMrMlpf3OjXDBiCVaG9WK0YHiPtXRH0HFUTo9rqGiaBBo3k3zu+hWKlhYWfmLT4GjDyOZKQ&#xA;6hGq28rFiTRTJvirNtc81H8sPJEV1qzap5rvTykuL1Iy6tKw5MzuP3VtD2Udh0BNcVYlpel/mX+b&#xA;Vgmo6xr0PlzyhdCselaHKk1zKh/ZnuVLKp8V+goDir07yV+X3lPyXp7WXl6yFqktDcTMzSSysvRp&#xA;HYknr0Gw7DFWDflkG1D85vzL1qH/AHijms9NBH2WntovTlHzQxb/ADxV63iryP8AO7yR5d/MHSNR&#xA;js76OPzR5PRpmU0oolhW49GcNQcJYwCrdAf9kMVeArqOnLd6N5716/AttPjtYdB0ewhUNNdabaW7&#xA;yBuHCK3iW4kXk27N8QC7YFY/5f8AK0Go6ZYadp0dxqPmzzFIyWenR8IYoraBmZpJJH5cxI0dQPh4&#xA;hGJNCMVfV35E/llefl95dutO1K+judVv5Rd3FtC5MUK8eChQ1CSeJ5PQV6fs1wq9MxVi/wCZFp5H&#xA;vPLTWnnRIzo1xPDB6snICOeVuETiRN4viNOdQB32rir5q/NL8kLz8uoJ9S065/SPlPUB9UumuUVp&#xA;rN5NoZWoOJ4tsJFAO5XbluFYjBY6fexfl/D5mZYrKa7nsry8Q0cWEV2iBHetP3bPLR+ykfyjFUL5&#xA;08xeaL/UoJXtE0e38mGLTLGxSQu1q0UjGNSZmZ5JOUZq1KfD0AxV906NNdT6RYzXbI91LbxPcPF/&#xA;dmRkBcp/k16YVYj+dnlX/En5b6tbRA/X7KP9Iac6/bW4tQZBwPZnUMlffFUuvbrUfzE/I2J7KSGG&#xA;816xijurmduEEJDBbt2NCaLwegA606dQqx7X/NPk3yLojWksWk2tzdlLi5uYtPSL6zJFukltpcbc&#xA;34kEpJPIiV+IM2KvNtX/ADA17Xpo7yxvNMtTXlFqes6lp95qC/s8obZ5EtLMla7RxBv8o4FSnVNO&#xA;8o3SyatrepXOrapDG7yXEvmLSbouVBNEgkt52b2QE+AxV6LqoXyp/wA4x6TpiFLa/wDMywQPIxWL&#xA;fUXNzMZGbiqgW/JSW2UYVYXe6vbaZPbeYdD1YR69o0QWxluda0e5jMCfbt5ILW3tpZUZAVC89q7b&#xA;4Fe6+XNf8r/m55MuNP1axa2vECLqmkzVS4tJ2UPFNESFcA15xSAb/eMKvK/MflnXLbWNT0Hzhbah&#xA;5p80X9pDY+QtWgIjiCRPzMpkH9xNEwWSZ2qSB1oalV6Do4bz75a1DyF51raedNBMbSXUR4yc03tN&#xA;TtHFOv7XHvUGgamKvL/OPmLzVrert5X/ADDmS1i8vCIG3gvrTTlvp61jvna9jmjmR0XZFSgNa06Y&#xA;qyf8mLHy35l0/wA4+T9RhtdRjSc3tjNNJa6g6pfxkMyzwKsfOOVOVUVaM2wGKvL/ACvZ6FZaOrW9&#xA;5c6LroDwXxTXrGzRpomMb+rZTR8uB4/ZZtxgVPfL35hebfK+41HSbmxQfGljqOnwsyjrWyMr2jbb&#xA;n0kjdv58Ksj0K+/Kzz9N6lndT+VPMM/x3F7oUsli0tN2+sWlWA7szJ6ir1aXtir3uL9EeXvK7SWY&#xA;A0zTrV7hCGMnKNEMrOZCSXZ92LEksTU4qwn/AJx30ye3/LaDVLvfUPMN1c6teP8AzPPIVU/TGin6&#xA;cVei6hqFlp1lPfX06W1nbI0txcSsFREUVLMTir4DTzXqcXmq615deuvrMuoI81yrSLJcQc2JkahW&#xA;oVVA4Ed6UpgVP1sLCz8zWMeoNA/lGG+uNfF1CVmhk0ySRIXjjWtecrQCAxuoIagNBXFVTypLOPO/&#xA;+PheR6Z5Zsbr4ri5RLYy24Tg9haWqSStI31Y+kERiFWnJl64q9V/5xc0rUNU13zD51v47mWGUCx0&#xA;i8vJXmf0zIXljDyFmfgFjHL5jxwq+i8VeX/85KaTc6j+UmqGC6+riyeG7mQ04zRxuAYmJB7sGFP2&#xA;lAxV8yaF5m10+WZ7HzTq+oP5O8wK1gJkka7Nrc2TxTxP6MjD4B8IKqy8lrTdcCozS/LWiw3VhNb6&#xA;mnmry+EvxolvLDJbj9LrAJI7W5ty3MCZlQoqyESHb+YYqx3UJdQ8w2Ou+YNUo2o3Wo2qH03hiWOW&#xA;QTV9SCodYwo4q3GgO1cVfdXk/RW0LyppGjNP9ZbTrOC2a4HRzFGFLD2NNsKprJGkkbRuOSOCrKe4&#xA;IoRir5u/Kybz1feXZvy68uRixfy/qV3DqfmS6USR20ZmYqlvDWktwW5t8QonsSCFUzuvyB806P5k&#xA;vdW0jzgmm6VLGkt7rWoKlzf8gtJzI8iIvEledfVA3pTauKpBeX3mDy95rvfLOueZLu6kWJL7TdRG&#xA;o6ZpMMlnKAFVxe201Jg1ar6lSNwtBXFUu816neaho7aVZ63NdXOqzQWCRfpzRdRU/WZViPO3sreO&#xA;dhxY7hxQ0r4EKy/86tYsoPPXlry/HdfU7Ty9YPeclvbSwYSzUt4VWS8SWMskcbGnA7NhVv8ALXyl&#xA;qPn/AFJNc1q4vp/JWnTBrDT9QlgnF9eQsR63K3gtFa3jPQFSGbvSoxVMPMkPmPzX+aV3qv5etBZ3&#xA;nk+1NpfanIG9HUbp2Dfo2ShCskaKat1Vj2+EhVnvlz80vLGqeWLvXL+UaTLo9U16xu/gmsp12aN1&#xA;PxHkRRCB8XQb7Yq8+vNO/MXzhqA/NHRIF0mXSYqeV9HlQC51Kz5c5ReNWqrOtfSTt1FPtFVOPM+m&#xA;wfmf5OsfOnk2d7DzXpySC0YFUmVhtc6fcBgRWtePIUDUYfC26rzz8tfOUSfmtoN/JcXKyatDcaJq&#xA;NvqV5aT3UUikyQo0EEFo8dJ4ytXTvscVdqt23lvzz5t0WTU7mwiXUmvraGLU9O06L079FuPhW9tp&#xA;2f4nIPBqDpTxVWW/mHzBqurwaP5bl1jW9SlR53itdb0aSNIY/tM8yae0aEkgDkRirtH8nap+Yvm6&#xA;y0zVLTXNPs9M5XWoajqE1nKeKHikdncW1nb/ABNL1YOQADtUYFTP8wdQ8+flp5U1vy/rDHX/ACxr&#xA;ttPZaVrq/DcwzTow9O7WvFiyFvj6t1qfsgq958o6UNI8qaNpQFPqFjb2x2pvFEqEn3JGKpV+aln5&#xA;fvfy91208wXKWely2zCS5kIASRSGhYV6sJVUqvc7Yq+GLODSV8oaheTWzy6n9ct7e2mZiIkikime&#xA;QqFoWcGNepIoemBWZQy2l7Z6QtrbQ3lta6Pb3K6bdt6NnG1pNdpcz3cqtGxX6wzssYYczKgrtxZV&#xA;LPNQM6rqHmK9s75oqW+m6ToM9qkEFqDyMn7hJo4VLyUEbJ6jMWZqU+JV9ffkxI0n5XeXG+ojTohZ&#xA;oILf1RMzRjZZXcJEOUo/eEU2rhVmuKoTV9I07WNLutL1KEXFheRtDcwMSAyMKEVBBHzGKvi/80fy&#xA;/uPIfnt9FtbW8u/Kupsj2kRVn9RZAPUSFgOLTQt9g9fs8qgmoVJNAfSPrjaHZTXFxZz3VjqNukiL&#xA;DdG4suay2wj5OnN45pPTo3xkIPtHiFUd5qgR/Mfnm7uWVItaWfUNCVK8LlG1COcPGVXjWOBZOQaj&#xA;A8lNGqMVfX2m6p5a8paR5U8uve8/rscOnaS5PJpjFb8hIf8AJYIN/FgO+FWVYq8w/wCVbefND81a&#xA;3q3k3zBaWmna9Ob270u/tTMi3Lj95IjRsjfEant71piqY235c6/fzJfeb/MTa3dW37zT9PS3W30y&#xA;GcbxyyWyNyuGjcAr6j/R0OKvDIJ/M+jeadS0K6tfMF555vbgzX31C6s1jvORpHcxmXT5zHb8aAcp&#xA;OKdNumBU18tReaNS/Nfyz5a8y22qW17pdy+rXUGoXNrc27Lbwu1vNA1tbWwP7xgtebDr0OKr9A0H&#xA;VfzR/MrzTdRT3Ft5Vk1A2+s3UbhY7q0tFWK2s46LzDOEZpCr0CN0qRUq9R/N7zzZ+QfJ1vpujmCy&#xA;1bUqadoURZIYbcABWnJb4FjgUjrtXj2xV5z+WH54eUPI+j2/lXzBbx27RF5H1rTbiLUoLmSQ8nmm&#xA;MLNKrsTTo3TsMVT/AF3zB/zjZ5l8xWXmfUNZtnvLehliIljjuuH919ahaMGT0jutfkajbFV/mj/n&#xA;JryzR9P8l+lqepupCXl9IlhYRU/aZ7loWkp/KoFfHFXn/kX8xLnyP5nOr6nqdpf6br8xPmhLa9sp&#xA;+NzK5K3lvbWzclCBqSAA1G/hRVln5+eQ762jj/MfydJyWKa21HV7SGjxytbHnBfpx7oDRyvVfi/m&#xA;qqgPzX16LT/Ouk+a7OS/TSfNGhxTF9Nlhhetu/MSSNNBdqUWG4WtEBHWtK4qg/KfmS+0f8yNKv8A&#xA;RHfW5/MDCx1mzGp6dqc8kCgGOYCxjgEH1fdiZRQioqMVeya9+Xmp/pWbW/J+uy+XdTun9S+tjGtz&#xA;p90/QvLbOQFkYDeRCCe9TiqTa7+X35h+cVs9M84atpS+X7a6iurm30u1nSa6EO6xyPPLIqKT14jF&#xA;XqGKsZ89+XNG86eXNV8oXN0iXFxBHIyIymaE8+dvMyV5BTJCf9ahGKvkjyxZR2E9l5b1i2j9HTNU&#xA;1q5123ZmaK5k0WyWaKOUfyIyyLtsQ2474FX2OoX95ZyRahLpfpXSRvHZwRafpGmCSWMTKl6UFi9y&#xA;0KkH01LemxQlq/CVUz8tfk15r80S+X3tL+HWPKNxef7mTYE2tratBIFn4xusPqOYjRZEQ1O1aCuK&#xA;vsCwsLPT7G3sLKFbeztY1ht4EFFSNBxVQPAAYVV8Vdir5C/PXzF+Y3lb8wNX0mPXb1NE1NvrmnvO&#xA;xkEcdxHxlW3cq7wqhZ46REfD88CsLbz35p04fVp47HVrW5MR1C/FtDNJfW8aBvQmuWQueK/aP94D&#xA;uT8IxVHRx+Wtb9K38tXupTuk7G5t9aSFijamFsfXjlhZmYJLJEJFYfH8J8VxVIvN+tp5i82eY9dg&#xA;u7hYYppbzShK7c1V7xFRVBP7uiylgq/ZpTFX25+XPmzT/NfkzTNZsZXlSWFY5zKCJFniHCVXr3Dg&#xA;79+uFWSYq7FVvpx+oZOI9QgKXoORUEkCvhvirxbzf5nSz87ee/M0T1PlPy9BpNmwNVF9qMjSqF8X&#xA;5+mpp8sVeg+TdH0zyL+Xen2d00dpb6TYrLqVwaKvqKnO4kb5vyOKvn4eb7XzZ5pvPOuoazFpzycr&#xA;XQrVNWsLOa2skJWkkVzb3hDyn4jTj18CMCpr/iGx/wCpvk/8KHRv+8dhVCtdeXGk9RvMSNJWvM65&#xA;oZavjX9GYqih5gsAAB5ukAGwA8w6N/3jsVU7nWNJureW2ufNTTW8ymOaJ/MGjMrIwoykHTdwRiqd&#xA;/kp5+0yDUrv8sNTuo7/S3Vl8v3X1iO8RoJELPYyTxBEdlWvH4R3FB8IxVLf0nJ5b8q+XL24gmv7z&#xA;8uvMl3oN3DGoaeWyukkjTgvwhucTxKo/axV6r+Wmh/lVK135s8k2tusmp0S5kiBVoSu7Q+k39wa7&#xA;sgAqd/DFWeYq7FVk88FvC808ixQxgtJK5CqoHUljsBir400/z15nX84E8zDzBHO9xq7aVeTRkJav&#xA;ZRuqxUO0ZilSvA9ivJutSFYvBJc2Oo6gfM8MkVxaNdrqhnk4XE97MGMsIpWU+uRHFI6Gixlj+1XF&#xA;UPql7aRSmDzDYLCsNoRpOiae/pxW73AEgmmdmmk5kMCVcs52DcQoBVfVH/ON/k3zB5Z8hj9K3KvD&#xA;qzpqFjZKSxt45o1NGc0HJxxJUCgPuThV6tirsVdirCfzg/Lw+fPJdxosEkUGoK6T2FxMpKLIh3BI&#xA;BZQ6kqSPuOKvl/Wvyh/N/wDLzRdR1YRwHTZovq+pyWrR3P8Ao7MK80kTl6bH7VB/rbYFY95X8wCO&#xA;WGfSPqWk63bhl9C4X1bTUfWZKxOk4kiiYcAfiKx7VBRgKqo6e3hOrRa1+4h8uebYGt72ZwZbe01G&#xA;WIiRZa85IjBd0nQHf06faWtVWZ/k9+a+tfl95f8AN/l/UrE3LaDG95bxq6sIrprmGyeF2UlTGZZl&#xA;Y8TtRqVrir3D8mPzfsfzD0eUGF7bWtMjgGqRkARM8oYepCQSeDNG2x3H44VejYqwb8w/Omp2lzbe&#xA;UvKqrcectYWsHLeKyta8ZL24p0VP2B+03j0Krxvypoj2nmb/AJVnePPPq03mo6xrNxMC31jTbGBb&#xA;iCV33r9YloT7mmBWZfnLf+YfOuqyfl55UtnvoNPSK+81ejPHbFkLAw2SzSrJGsj/AN58SkbDwbCr&#xA;G/K3kXzH5z81RaV5jtNd0vy1osXr3tpqU8Q9a4YGO2W2ms7eyHFPiYkFulNsVUfMthd+UfPd75es&#xA;/Md2ml/Ura8thqeuWljwaR5EZElvrS89Qfu6hVpTvXsFRvkfyn+Y3nOw1HWLTzpPpthBeT2dhben&#xA;bah64t1CmRbxEtUZGl5AMsO4GFWEal5q8wy+RZryXX5INTEHCe2OuWC3QnR/TkA05LGG6Wrg0QTV&#xA;A35MOoV6x5y/I6y0bSYdY8gxXUPmSxlD3Lx3LPdX1tIQs8RkuTLGH4jkhKEAjphVJrf8kPO+sx6n&#xA;rOuXjWupNZqNAtZp47q8tru2kE9tK9zbxWsCsrhl+CNvhc/FirE9f83JqGl6vNLG8V/5406wkhtY&#xA;lPNfMmkXkdrJCkZ+wzfA5/yfxCs+/MN9M0XzDFqfk6aS1/NC4iSS+0HTIWvILwUBZb+GMhEFW2mL&#xA;K3ffqCr0X8vfOlz5o0u5fUNLm0bWdNn+p6pp09Dwm9NJaow+0jJKpUn+0qr/AMxfPVl5H8q3PmC7&#xA;tpLxIWSKO2hIDPJK3FAWb7Ir1O/yOKvmy9/O7W9a/LLzlo/mSBp9TvJ4prQOfTSC1vGRkjSg5N6R&#xA;UFFPUNudsCvO7HR7KbVPKvlW8jeKS+vIJdSm4FZo11J4UWJKmjqIESVSR9pyvbdVN9LsNZ8y63r/&#xA;AJnNnFd6tDdCWyEs1vFYRuJOBaZrsxo8cXKNY1ZvjYqCHHIYqjbPyr5dbzBaan+a3mGDTZryaW4v&#xA;9JtLfndMta1uDZRlYTM+42LFd9q1xV9n6TPYXGl2k2n/AO8EkKNa/Cyfuio4fC4Vl+HsRhVFYq7F&#xA;XYq7FXzX+fXmL8xvKnnS7uNMaaPylqtrGt39ei+vaZJPwZWT05EnSIuFVeFByO523xV5nHe/4k0P&#xA;V5da0rTbK4hgS8STTdMjF7PEzyK91HwuLSP0oSn7woGrWpUgMyhVmjXfk2fT73StPil0ez1GGO1k&#xA;vdakeSyu5UYlJ2METGzuIzV46GRKckbqSVUUfLl1qXl+/wDL3k7V280Sy3Vu14bKGS3llZAI0SdJ&#xA;TyltkpzSWvFGU8gOStiq3RtW84eQtehksZzpFzp1vbW+vSepBexXVlJcApcw0UxvGPUWP4CWXb4q&#xA;lqKvtHTNV0zVbKK/0y6ivbKYViuYHWSNh02ZSRhV5PqFzc/lh+Yer+ZdWha88oea5Izc6yiGS406&#xA;dBxSObiCxtz0WnT5/aVTXzv5q8maXaxfmBohg1jzLd2p0TQBausv1qS5kV446JWvputT0IBYdTiq&#xA;ffln5Kfyl5Z9K7c3mv37tf67eVBee8l+J6MeI4r9leg79ziqD8vfmxba35+u/Jcei3tjqGm27XOo&#xA;veNb8YgPT4Kv1eW5Vy3rL+0MVUPOh/KTVPMkumeYdLh1fXrKy+s3IS0kuZbezQlgZJI0PAVckLyr&#xA;v03FVU/8vS+TND8n2MughYfLjIJNPS1SWYuLhjIPTjUPM7Ozk8QCcVY55UtfyY8wa7qf6L0Sz/xD&#xA;ZzGfUob3TzDeRyTEsZCt1GrjkT1X+OKrNW/Oi2hl81fobSm1aHyaUXWmE6wvVi4kMKFH5iH0m5lm&#xA;XoaVxVmXlLzTpPmry7Za/pLs1jfJzjDgB1Kkq6OASAyMpB3xV4f530a48u/mr9S0uzWW/wDMkp1D&#xA;yhO4BgstTueNtqMrrT4uMQFx/rBcVekWNn5Z/LXSE03TYJNV8z6nWT0lPPUNTuqfHNM7ElU5GrOx&#xA;4IPxVZF5O0C60jTZn1CVZ9Z1Kd77Vp0FENxKAvBK78Io0SJK/sqO+Kvnj85/P3nHzB58vPI49Gw8&#xA;t6PdwT3l7GjMyRRIs5uJ5aScQgqwCJ2A+I9QrzCSY3fl3XNQ1y7ihk1fULW+0669Nna5ktTPHNHD&#xA;CRUQKtw27BV5KqePFVH6dZaEi6hfT2PmO1uVhczTrDDdSSQlSZJ2upRELYMKq/FXNDQPTkCqqDyn&#xA;Jc+VNLvbTUpZ/LV7dsdRg+qPFdw2dkpD3LRoXjkit/Vko67GViDyY0Cr0D8o/wAkJvMI8veZ7kQW&#xA;PlazmN3aWJaSa7vWjk2kugT9XTk0Y+wPsDia/axV9QYVdirsVdirsVSnzdoJ8weVtW0MSiA6naTW&#xA;gnZPUEZmQoH4ErXjWvXFXzLe/lZ5k/KuEarrVhbeaPLNLm2upLJpYryCO+tpLWSpoKRMkp2qRy7q&#xA;d8CvM9SvLe8t47fySmqw2btJLqWgtLJeQI68VWYcY41dJFoD6iVFKHamKr7Ea5rXleAR+V4LrTtK&#xA;mlE2qWMbW947SAPIpeNijlI1X/dLcV3I3JKqZ6XNouqW2lWdzYXdrpQMlhpOuzsQsEs/KQ2d1KEW&#xA;Ge3M0jHknpugdm7Yq9Q/IPztoXkrT9dtdWvHstAOqR28UdzGzzWl3JbksLp04hA/oGMUjpyQ1IGF&#xA;XvHlfzf5T86aTNeaJdx6lYc3t7hSpFGGxV45ArUYGoqNxiqT6X+TH5baT5pj8zabo8drqUPIxLGz&#xA;CBHYceaQV9NWoaCgoPnirMbu5jtbaW5kWRo4lLssUbzSED+WOMO7H2UVxV4d+Q0r335lef8AWtTt&#xA;5tP1LUpkksLG9ie3uPqZlk+LhIATxAiVqdD16jFUpvpdc1HzH+bfmLS5YvLE2kWT2V5HJH9YkvBF&#xA;G5SZuTcYS8UACGNTXlXcjdV6X+T19oUX5RaFfranSNLtLaSUreyB/TCPJ6k5lYL8L/E4ag+FvDFW&#xA;B+SPNPk/U/zh1TztHqcLT62YdG0LR4XDXU0YMSSXdwg/u1pDyVXo3HqK0qqnfnnyBo3lzUPMXmjS&#xA;9TubO48y2k9teeXbWJJ31C4lWlLdCGcSM7VZgrU5MdhXFWT/AJJeTNT8oflzpuj6pRdRrJcXMSkM&#xA;I2mcuI6jYlVpyp3rTFWSeY/K/l/X4YBrFv6n1KQXFrcpLLbzQSL+3FPA8UsfvxYe+KscudU8heS/&#xA;KGrebNGji1CKGP8Af3dvMb24uZUPGOKS6ZppXozU+NjxG+KvHtA/5yQ82eaPOlnZRQDRLHULWWxt&#xA;OCC8jjvHZWF5NzEBaOFV+IA0UVY16YFeWW1lq99ZasqtqOteb/MBE13Dp8L3RfTllEzNMynkn1iZ&#xA;IpFPpmiqD0cYqmGnw2Y0PTDqCWl1aeWJJrdb3UkuILJp7yQTLalVj+sziFhJIE4D4nYvRB+8VQ0H&#xA;lLzDNe3Ov65psmqy3HEaXDf3QEN3LL/dsLppIPrahd1S2ZixpWgrVV9CeTf+cevLs2j2V559tBqm&#xA;viJU+rLK8VrZxL/d20MVu0aEIPtE15OWNTWuFXrenadY6bYwWFhAltZWyCK3t4gFREUUAAGKojFX&#xA;Yq7FXYq7FXYqlnmQ+ZF0a4by2LRtYXibZL/1Pq7UYc1YxEOCUrxPjSu2KvjT81vzD86an5uaw1i1&#xA;i8q3unyKt9HYBkdpVWqzSSIeUtFasW9OJ2O9cCsbvvMl1rFxDNqHmbU5jpcXq2M9xHylWb4SQhW4&#xA;Yhmkp8da0AJ6YqyG386ajqJmN95li1LQ/SazOha0ktv9YSQmX4VtRNDHKHQMLhpFIfiWNK4qi4U8&#xA;qa1o8vliLUL6G41G9tZ4HuvRuXjmRDawo80LFbu2T1ivJODx7n02FaKsFNr5i0q91lrKY2D6TPxv&#xA;ltLhk4Mk/ppw+P1HVJOjb02qakVVe3Wn59/mRc/l5FrukNDc3+ksLDW7OSIXJ9IQhk1M8OEsYLfC&#xA;/MsnLw6YqjvKv/OVGr2nlgXfmfSDqk3MpHfWDLEvIGnC5Qikb8fiUrswPQUOFXtOg/mV5a1zyJL5&#xA;zsZGOm21vNcXULcVmia3QvJE4J4hxTxodjWhxVJfKvmL8o/zRe8u7Owtb+9gVI76O9tUFwYjRkDh&#xA;gfUjDL4kVGKs11Ty9oeq6YNK1GxhudMHCllIgMNI6cBw+zRabDpirGb63/J3yLcWc93aaLoF1O3G&#xA;znMFvBKxUbkOFD0Fd2Jp74qnWj+dfKms2R1DTtRinshObRLs8o4nmA5FIpJAqyfNCRt7Yq8iuP8A&#xA;nKrS7y61XTdA0O5u7yPmmj3ZeP6vLx29e45mP0Il+0SSfh+1x7KvFLnzn5shur3ypJrl55gi1u6R&#xA;tRt7WVIorm4m4qyRXLLK7xOx4fBxRgNqg4FQmnWd15fa5tdPuYo/Mr3EiyRpP68GnWcaOk0k8qf6&#xA;Oz1fjWrcQp2DFcVTvRbu9h03zNd3V5D+gBob6LoGsTIYlneOSIJFaxzrHIxmCt6tEPEH4iAMVSqX&#xA;R7m80K4gt70waJbINQ1TWp4pUW+vSeEYhjVTO8ESsVibhQEsz8OVAql935l8vz2Ect9cal5m1W2W&#xA;SC3j1iZ0tI4ZEKhokjkll5IaGnqqNh16BVNNA/LXzp5u0Gzm0DyfDBBezND+mllk9N4w6ipFzNKU&#xA;9N42q8Y3BK/NV9f/AJfeT7zypoKabea3e67cbM91fSGTiQKcIQassY7AscKsmxV2KuxV2KuxV2Ku&#xA;xV2KpNqnkryfq1zLdanodhe3c0foy3U9tDJM0dOPH1GUvSnvirxLUP8AnDvy81lKNO1+7jvq1ge4&#xA;jieKn8rKgRvpDfRgVgv5g/8AOPOlfl/5eGvaz5gk1CBnS3SztrZbeRp5NxxeSWUFVVWY/DXb7lWB&#xA;Qaj5D0N7K70ddQ1jVo5luBPdKlhHb+mQ0axxxPdGSQOK82cL0+A74qmsOvQ+Y7fzHd2GkHTNeSMX&#xA;80envPJb3sRuoopYLizcyK39/wCqWWi/CfhGKpTY3p07ULfXPLLQwXyQtBf6DMGkIHpejcKUmXhP&#xA;DOpYlOTOKkEfDyKqMv8Ayw+p6pY3nk2GEJJp8V3qapcwxQW9xQfWkb6zJWCJHkEYEzUY9KggYqnn&#xA;l+68zWvnG4sxo95ZW91YSjXNAs2Edpc262bW63VKx27RfHzap4H9hhyACrD4Ib5pzouoTtYvb2l2&#xA;ttc1dXnQI0kNr8bqrQyTJRKDq3fFXtmpfnrfaZ+R+naedSaz8+tDbJbhB6sxtFdWjuJGYOqmW3A+&#xA;0eRry74q8y8zzeetf82afY+dY/rXmLU1trO0fUOVvb2sd04WGRRbeilSTzJ3XrVS32VVK9S7jv7D&#xA;Rra7nki0BZLPTLH1A1xNqLTSyeolpAZTHxmmr8XxFV41LELiqJ1/y/fSeWo9F0TT7U6hpSpLr8Gn&#xA;XDXN7MrERrJdRRq0REclBwjkYx8vjAJJxVHaX5W/wtFY6oPLd3qN9YrDd3GtTiZbK3vOYdURQbeJ&#xA;o7f4PUleUpzr+xiqhewxa5YjQk8waVZyTXb3+pR2w1S+urmaULza4e1spbeYoRVBCyxip7/Fiq/z&#xA;Do+vXXm+4vYfKuuS6fqMUFvoRhEtlPGkIWGPjSKeNEf0ifSK7KRQjqVUEY/y5n1SzvvMFh5h8vRx&#xA;SehqAhAvPWkB2k+s3LQSRPx+2oifp8IGKvpv8s/y3/JuPQPr3lmxt9Xsb/Zr28UXLtw2KUmX4KHq&#xA;oUYVeiWNhY2FpFZ2FvFaWcC8YbaBFjjRfBUQBVHyxVXxV2KuxV2KuxV2KuxV2KuxV2KuxV82/nR/&#xA;zjddTR2moeRYbq9naVku9NuLoSBVfcSxyXLgjcUYcj2PY4FeQ+a9M/M7ync6X5b1i0Ng0aj9Gx28&#xA;MLiUM9WKywqxmbk3xAsTXtirh5g8+2fmK1sr3Q2t9auJoJI4EtJNO1CaerKJVmgEFz6k3qOC3Khr&#xA;0xVkXmzVZrXQ/rfnI2uua5NeCKy8ryave36WcCxsZJpjHeTSo7MyKq+uNq1B7KpB+lPL97ol1Zxw&#xA;6X5XtLwGe+isv0jd37raMfRt2F3NJCvOXegdT9ktQDFUNaeerRNHXy1DFqZ0F6tPYtqLlZ5BydKR&#xA;pGiJzcgFQCOh3IqVU2n8k+bn0yHTRpNnYtLIY7XRL3UIUv8A15F5fWYIp5EljpRVdRQNtVSRUKqV&#xA;lZavexS3kulRaxqM9tBa6LeLK1ssUlovpCWFbiJFu3+ChSNiBQ7bLRVNYNLh8p6VYX2paZZN5plk&#xA;Fxqes6zPNcLp8jSubaMWluW5yukPq/ErkV+IAHFUum8x2UMGo3E0UkEV9HJLb3ukXMcVtcXLn1Hh&#xA;upBb/XQHUuRHJLUGg48TUKpLpd5pK6lYatLpmoaBYOVtrfVNMuHhRZEXiziWWKQs1d34v47dsVRe&#xA;m65HJ5lfWRqExuILaaG/j8xNPdRTRzQvBcwS3NvWWsqSOEHpr7HlSqrJvJ2n3fnC3u9J8iehouqw&#xA;OyXmlR392LK+sHiYG4CXLvJzSVFGwBHNSQKEhVlnk/8A5xZ83N5ev49Z146RdXYaJNNgAuYGQEEN&#xA;PR1U8mUEcfs0rWuwVZf5D/5xb8n6do0S+boE1XWhM0kskE9wlvwDfu0CgxcvhHxVXuR0wq9tiiih&#xA;iSGFFjijUJHGgCqqqKBVA2AAxVdirsVdirsVdirsVdirsVdirsVdirsVdirRRGZWKgsu6kjcVFNs&#xA;VY158sPNl7p1vF5Xg0xtR9UEXuqc2FqBv6sMaI/KQEfD8QofHFXzz5V/5xa88QedGXU9SFlpNsvq&#xA;DWrGQetKZFoUgDfGj7kMzD5VwKmM/wDzj/8Al3+X1zceYvO+vC/0O1q+n6TwEU1y/wCzGwD1kNf2&#xA;UoD1ai1GKpT+XGk33nzW7nVfLvkzTtDW2uH/AEd5k/erDZKfsAWqsIbq5iVqowAo1C3bFWI+ZLiH&#xA;R/MOp+XLU6otpponsXjJ4Xl/q1wJvTuZ2g4hkMpHFWdiY1FKknFX07o/keLXfyp0HQ763uvLl1bW&#xA;kI9K3cJLDPGnB+a/EkiyGrOkgPKu/wAXQq+YvMMNjomrXmn+ZdKvPK+rW4ENhrOkQvbrd+kwjeaS&#xA;1d44WWQfvAbdkA6b9cCoO0bVfLU1lruoW36T8qX8gibU7COIQXaRtVopYrmCSBpFIY8Z4eZbflQV&#xA;xV9V+WPPv5Ued/K4sYLmybT2iEVxot8IYXjUAfC0BotB2ZPh8DhVP/LPkbyVoehS6VoemW8ej3tZ&#xA;J4N545w6gVdpTIZAVHckUxVNrLSNJsIYIbGygtYbZSltFBEkaxqeqoqgBQfAYqi8VdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVeB/nd+Q2seZvOdl5p0RVvRcy28OsafK4j4xxlU9VGJ&#xA;Sq+mKOoPLuK12Ve1eW/LukeXNEtNF0iD6vp9knCGOpJ3JYlidyzMSSfHFXntj/zjv5Nh/MG784XU&#xA;k94ZJ1vLSxldisV1y9R5Wkrzk+OjKp2Heu1FXqmKpH5r8j+VPNtmtp5h02LUIo+Xos4KyR86cjHI&#xA;hV0rxFeJxVbf+SPLl75PbyjPaqdENqtmkIAqiIoCMpps6kBg3jvirz3yj/zjloOkwtb6pNbaharw&#xA;EMP6Psmkbiau8tzcQ3E5Mn8sbIEGwr9rFXrdpZ2lnaxWlpClvawKEhgiUIiKNgqqKADFVXFXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXyz+cn55ecNZ83S+S/I0s1tBFP8AUWms6i6urkNwZY3HxIiv8I4kV61ptgVbb/8AOK35&#xA;kX0CahqXmSCLVyC3B3nnZCw6NP4/zcQfpxVryLqH/OQ3kfzoPL8+n3/mHTonUXVqxae3MLdJILuW&#xA;ixbfZqwHZhXoq1/zlT5o8y6X+YOnQaZqt7p8D6RDI8FtcSwqXNzcAsVjYLyooFfbFX05oDvJoWnO&#xA;7F3e1hZmY1JJjUkknCrxn/nLHW9Z0nyzocul39zYSSXrrI9rK8LMoiJoxjK1GKs7/I+9vL78qfL1&#xA;1ezyXV1LA5lnmdpJGPrOKszEk7DFXnX/ADlR+Zd9olhp/lfRb2S01K9P1u+mt5GjlS3QkRpyQhh6&#xA;jgnb+XwOKsJ/5x9/M3zLpP5it5b81X93NBq3+icL+WSRoLxCTDT1S3HnUpQdSV8MCvrTCr5R/wCc&#xA;e/NHmXUPzjuLO/1a9u7QQ3pFtPcSyxgqw4/A7Fdu2BX1dhV8nf8AOUXmjzNpf5kQW2mave2NudNg&#xA;cw21xLChYyygtxRlFdhvgVln/OKv5i6nqn6X8ra5eTXd/AfrtlLdSPJKYzSOePlISaI3Agf5Rwqz&#xA;H/nI7z3N5V/L2WGxna31bWZBZ2ckbFJET7U8ikEEUQcajoWGKvnv8m/NvnO4/NTy5Z6hrWozW81w&#xA;pkt57qd0dHiLryRmIIIIIwKy7/nKvzP5l0r8w9Ot9L1a8sLd9IhkaG2uJYULm5uAWKoyitFAriqY&#xA;WP5DfnXeWVvdp59dUuIklVTeX9QHUMAafPCrJPI/5K/mxonmzTNV1bzk2oabaS+pc2Rurx/UXiRx&#xA;4yfAdz3xVgn/ADlF5o8zaX+ZEFtpmr3tjbnTYHMNtcSwoWMsoLcUZRXYb4FTuD8gPzsmhjlHn5wJ&#xA;FDgG8v60YVwqwrzDrn5xfk95ytbW/wDMM2qK8aXaxSXE9zaXEJdkZGWf7LVQg03GxBwK9V/5yJ/N&#xA;3WtD8raDF5ameym8yQtctfLQSx24RCEjJ+y7+sPiG4pthVhfln/nGzzN5x8vaf5l1PzjSfUYUvLd&#xA;WSW8ZRKA685XmjIcftUBodsCpr5S8i/85GeR/N8dnpdwNa0FCjTG4uf9BkhY0KhZiZYpBT/dakjb&#xA;7S9VX0qtSASKHuOuFXYq7FXxN+R89vpv562C66yrcLc3duZJKAC7dJI1rU7FpDxHuRgV9s4VSDzD&#xA;5/8AJXly5W11zWrTT7p0Eq288qrIUYlQwT7XElSK0xV8uf8AOWN5bXvn7Rry1kE1rc6FbTQSr0eO&#xA;S5uWVh7EGuBU80/8h/z9uLC2nt/OcUdvLEjwx/pLUV4oygqKCGgoPDFWE/m7+W35meU9LsLrzdry&#xA;ava3M7RW0SXd1c8JAnItxuI4wNu4xV9Lfkje2th+SehX15IsNpa2c01xM2ypHHLIzMfYAYVfK8nn&#xA;PRfNX5vDzT5ud4dDlvBPNCqGRhbQD9xb8VrWoRFf6TgVF/nj5r8neYfPEXmbyhcTCW4jja95RtAy&#xA;XMFFSVSf5kC9O6174q+uPyt87xedPI+m66KC6lT0r+Nf2LmL4ZRTsCfiX/JIwq+af+cbf/J3XP8A&#xA;xgvv+JjAr7Bwq+O/+ctP/JoQf9su3/5OzYFRn5iwT/lV+f1t5ltEZNK1CYahxUbNFcEpexCm1QSz&#xA;KO1VxVU/NK/b81fzz0zyrpswl0mydbNZo2qvED1r2ZSK7hVK/wCwGKqFtbwW3/OV0VtboI4INTWO&#xA;KNeioltxVR8gMVa/5y9/8mVpv/bGg/6irnFWQ6b+WX/OTcunWstr5uWO2eGNoI/r044xlQVFBFtQ&#xA;YVZ/+Ufkz85tE8yXN35315dU0p7N4oLcXUs/G4MsTK/F0QCiK4rXvirxf/nLT/yaEH/bLt/+Ts2B&#xA;U+1nRv8AnKTQ/Ls+sy640lhZQCaSO3mjkkEIAJYJ6YrxXc+2KsO/Lnyjq/5y+cJZfMfmPlNZxxtc&#xA;pMWe7ltlahW3WgjVVJoTX4S1eJrir6T/ADb/ACl8t+dfL1lZXV2NIuNMPDSr34SqcwqekyuV5q3B&#xA;duQNQPpKvFP+hcPzt8vM58t6/F6QNUFle3FnIfmpWNQf9ngVBW/5vfnX+Wvmq30zzrLJeW5CS3Fj&#xA;eGKZnt3Yr6kNxGS1fhbj8ZFRuMVfXUciSRrIhqjgMp8QRUdcKrsVdir55/Ov/nHDU9c1y480+Tnj&#xA;F9dN6t9pkjCHlN3lgkNFDOd2DEb1PLemKsYstc/5y20u3XSktL+biOEc8ttb3LqOn9+VcN83Y4FR&#xA;Pk//AJx08+eavMf+IfzLuHiheQS3FvJKst3c8TtGTGWSKOm2xqBsAOoVTX/nIn8oPPvmvznp995X&#xA;0cXem2ulw2hZZ7aAJJHPO3AJLJG1Aki9BTFX0HotvNbaPY28y8JobeKORag0ZUAIqKjqMKvKv+ck&#xA;/IPm3zloGkWnluw+v3FrdvLOnqww8UMZUGszxg7+GKpNr3kv80o/yD0TyPo+jtJq8wMWsqLm1T0Y&#xA;EmaXhzaZVYykqPhJHHkDiqv+TX/OPej6d5Wkfz3olvc67dTu/oTFJvQhX4UQNEzpVqFzQ9wO2Ksi&#xA;86/kD5B1Pypqdnomh2thrEkDHT7qJeDLOnxxgsTsrsvFvYnFWKf844eSvzT8k6jqWm+YtHa20HUE&#xA;EyTfWbWURXUew+CKV2pIhoSB+yuKvOtH/KL/AJyG8teZ7nXPLek/VLx2mWO4+sabJWKVqn4JpXXc&#xA;U7VwKyv/AKzR/wA/0Fiq/wD5yH/KH8xPN3nyHVfL2k/XrBbCGBpvrFtF+8SSRmXjNLG3Rx2xV6B/&#xA;zkN+WV/548owfoa3W41/S5xLZRlkjMkUtEmjDyMiLtxfc/s4VYv/AM43/kz5i8o6lqmu+abEWeov&#xA;Gtpp0PqxTERsec0lYXkUVKqo3r18cVQP/Kp/zA/6GJ/xf+iv+dd/SH1j699Ytv7r0ePL0vU9Xr24&#xA;1wKp/wDOR35SfmD5x872Op+XNK+vWMOmRW0k31i2hpKtxO5XjNLG32ZFNaUxVA21v/zmXbW8VvCv&#xA;CGFFjjWuhmiqKAVNT0GKpnoH/Q3n6d039L/8cn61D+kP+OL/ALz+ovq/3fx/Yr9nfwxVCf8AOQ/5&#xA;Q/mJ5u8+Q6r5e0n69YLYQwNN9Ytov3iSSMy8ZpY26OO2Kvoy1hK2UMMqioiVJENCNlAI8MKvmTzH&#xA;+Rn5k+U/zNXzF+W1iLnTkkF3ap69vCsXMn1bV0lliLR9Rt+yaVqMCsy/Of8AJXW/zBs9P8x6dXTP&#xA;MkVsi3Wi3UqvET14rLGzxrIhJHIfC23TCrDtP8wf85aaHbR6Y+lz3wQCOKaeCC6dQBtWeNvi/wBZ&#xA;2PzwKhdM/JD83PzC83Q65+YrfU7MGNbhpWiEzwIS3oQQwGkYNSKtxpUtucVfVSqqqFUBVUUVRsAB&#xA;hVvFXYqpy3NtFJHHLKkckxKwozAM5HUKD1+jFVJtT01Y5ZWu4Vigf05nMihUcGnFjX4W9jiqp9ct&#xA;PVeH14/WjT1Hj5LyVP5iK1A98VWRajp8zxpFdQyPMpeJUkVi6g0LKAdwKdsVU31nR0j9R763WMOY&#xA;y5lQLzUVK1r9oV6YquOraULYXRvYPqpbgJ/VT0+XhyrSuKq8VxBNCJ4ZEkhYVWVGDKR4hhtiqla6&#xA;hYXaO9rcxXCR/baJ1cL8ypNMVUn1zRUjjkfULZY5QTE5mjAYKaHiSd6HbFVSDVNMuJEjt7uGaSRS&#xA;6JHIjFlBILAAmoqCMVVLa7tbpWe2mjnRGKO0bBwGHVSVJ33xVTbVNMW9Fg13CL5hyFoZEEpHWvp1&#xA;5fhiq251fSbWX0rq9gglAB9OWVEah6GjEHFVWW9s4bcXM08cdsQCJndVSjdDyJpv2xVRTW9GeKSZ&#xA;L+3aGLj6sglQqvLZeRrQVptiqpa6hYXis1pcxXCp9sxOrha9K8SaYq1Bqem3FvJc293DNbw8hLNH&#xA;IjIhT7XJgSBxpvXFVy39izQqtxEzXILW6h1JkUCpKb/EAN9sVWnU9NETym7hEUb+k8nqLxWT+Qmt&#xA;A2/TFXXmp6bZNEt5dw2zTHjCJpFjLsN6LyIqfliqrJdW0csUUkyJLPX0Y2YBn4ip4g7tT2xVTvdR&#xA;0+xjWS+uorWN2CI8zrGpY9FBYjc+GKqkt1bQ27XMsqR26rzaZ2CoF/mLHamKoePWdHktY7uO+t3t&#xA;JW4RXCyoY2f+VXB4k7dMVVxd2puTaiZDcqvNoAw9QL05Fa1pv1xVVxV2KuxV5R+dd3HpPmPyH5jv&#xA;VkXRtJ1Gd9SvEjeVYVkhAVnEYZqHie2KvMtfR7j8jfzD11EddP17zRJqGlySI0ZltZbuExyhXANG&#xA;3+7Aqd/l9H5js/P3mvRPMFZL/QfLLabHemv+lW0Upe3n3/mikUHc9N964VSsyXflz8o/y4/MbT4f&#xA;VuvLrT290g25Wt88sR5HwV6Ae7YqhvPvluDy5+VX5dWuqyxQS3GoNf6tcXsT3CLLdxmaQzxR1eTg&#xA;GCkLuaYFR3mOfQtR/I3SrXQLjT9Sji8yW9tMbe1uLKyadyZODQzKJOPCVOZANcKq/lPThH5e/NnT&#xA;9Sf9AXVY7W70HRraSeO1RYyi3NtDy5yR3PL4vs/DUmgpRVZ+QE+nJ5j1mx020stRtbfRgv8AifTo&#xA;bu1B4kfubqKfjGZnrWqrX4ep34qpNqOg6Pcf84maVrM9pHJqli0kdpdsP3kaS6vIHVT/AJQO+BWf&#xA;/nz5S0ryx5AtfMPlZP0HqXlqT0tOlsxwpBfyGOeL5Fpi48DWnU4VeqeTvKeleU/LlloOlpS2tEo0&#xA;h+3LI28krnuztufu6Yq+YtUtNJl0XX9KubG7f86DrrXFjLFDMblq3K8JYpgOAg9LlTcCtD4HArNP&#xA;NvkjW/NX5w6nBBb6PdXVro9g9z+mIZpogzFwTCIStDyHfthV7Lq/lrSb/wAoHRdVs4LmyitkVrXi&#xA;fR5QKCnEHeiso44q+cV0TSbT/nEeTVLa1ji1DU5Y/wBIXKijzfV9VkSLme/BTQYFTXSJ7G7/ACh8&#xA;9af5Hv7LUNa9O2lnXRbC6sD9WMgEqlZ1BkZoVlHw70xVNtNn/KC68oecJvIlhcQ3cXlO6i1C5RJ4&#xA;7UD6u59KbmVR7kEVLcSSOjdcKpT5CtvM8Xnf8nX1e9t7qxl0y+bSYYIjG8MP6OPwysSebU47jArC&#xA;Nbj8wWdv5iu7blN5e1XzbNZX8Z6QXlpcrcQyrTtLFKyH3X5Yq9H/ADETyhB+Z/mtvzFtJri1vtMt&#xA;ofJkhilmSohpPHb+kCFmNxuK9N96Hcqlr6xP5Ug/JPUvO8slkbCLVzeSTJI8kcLJGlsrxorSchE0&#xA;akcajvgVOvPWq+Rb38yNL8x+dUe/8haloNPLty8M7231qSTm4MSr6gmeL7NVB6dwCCrHZLDWbH8n&#xA;PKba/a3snk+08w+vqVnKriYaP6hMP1iNfi4Bqnj03WnbArIfyy07yh5/sfP3liDTLKx0V5bSa0u9&#xA;MF0kbPKsoiuIobrh6bx+gv2Y1DGteS0wqyX/AJxx0kXHk1fOuozyX/mPzGzi9vp6FxFZytaxRKR+&#xA;yFh5HxPXoMVet4q7FX//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:081fe7b8-98f7-2d42-89f7-f24e688b1327</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:081fe7b8-98f7-2d42-89f7-f24e688b1327</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:23d2012b-918d-4b12-85db-4208ef2c1ef1</stRef:instanceID>
            <stRef:documentID>xmp.did:23d2012b-918d-4b12-85db-4208ef2c1ef1</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1c667c4e-ed37-477c-a2e1-0970f36687a8</stEvt:instanceID>
                  <stEvt:when>2017-03-08T15:25:21+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:23d2012b-918d-4b12-85db-4208ef2c1ef1</stEvt:instanceID>
                  <stEvt:when>2017-03-08T16:35:19+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:081fe7b8-98f7-2d42-89f7-f24e688b1327</stEvt:instanceID>
                  <stEvt:when>2018-06-25T14:59:26+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>139.999861</stDim:w>
            <stDim:h>170.000000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Red</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Yellow</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Green</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Cyan</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Blue</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Magenta</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=15 M=100 Y=90 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>15.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>10.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=80 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>80.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=35 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>35.000000</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=5 M=0 Y=90 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>5.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>20.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>10.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>10.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=90 M=30 Y=95 K=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>90.000000</xmpG:cyan>
                           <xmpG:magenta>30.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>30.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=80 M=10 Y=45 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>10.000000</xmpG:magenta>
                           <xmpG:yellow>45.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=70 M=15 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>70.000000</xmpG:cyan>
                           <xmpG:magenta>15.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=95 Y=5 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>5.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 Y=25 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=100 Y=35 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>35.000000</xmpG:yellow>
                           <xmpG:black>10.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=10 M=100 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>10.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=95 Y=20 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>20.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=25 Y=40 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>40.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=45 Y=50 K=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>40.000000</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>5.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=50 Y=60 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>60.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=55 M=60 Y=65 K=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>55.000000</xmpG:cyan>
                           <xmpG:magenta>60.000000</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>40.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=40 Y=65 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>40.000000</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=30 M=50 Y=75 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>30.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>10.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=60 Y=80 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000000</xmpG:cyan>
                           <xmpG:magenta>60.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=65 Y=90 K=35</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>40.000000</xmpG:cyan>
                           <xmpG:magenta>65.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>35.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>40.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=70 Y=80 K=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>89.999400</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>79.998800</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>69.999700</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>59.999100</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>39.999400</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>29.998800</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>19.999700</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>9.999100</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>4.998800</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Brights</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=75 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=10 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>10.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>10.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=60 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>60.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.003100</xmpG:yellow>
                           <xmpG:black>0.003100</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -468.247 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 468.247 li
396.85 468.247 li
396.85 0 li
cp
clp
60.25 422.029 mo
59.5576 424.424 58.7041 427.197 55.3462 430.352 cv
52.3071 433.182 47.292 436.394 37.6953 436.394 cv
24.311 436.394 15.0327 429.266 15.0327 415.824 cv
15.0327 401.352 26.3359 395.475 38.2295 395.475 cv
42.5488 395.475 53.8916 396.51 58.8921 405.721 cv
49.4804 408.752 li
48.4663 407.119 45.4687 402.885 38.1616 402.885 cv
29.6308 402.885 24.8442 408.589 24.8442 415.936 cv
24.8442 424.313 31.3506 428.777 38.4965 428.777 cv
46.6543 428.777 49.1069 424.424 50.331 422.083 cv
60.25 422.029 li
60.25 422.029 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
64.373 396.673 mo
73.81 396.673 li
73.81 411.472 li
96.1064 411.472 li
96.1064 396.673 li
105.545 396.673 li
105.545 435.088 li
96.1064 435.088 li
96.1064 418.602 li
73.81 418.602 li
73.81 435.088 li
64.373 435.088 li
64.373 396.673 li
64.373 396.673 li
cp
f
134.188 408.48 mo
133.921 407.992 133.708 407.445 133.548 406.955 cv
133.388 406.466 133.282 405.977 133.227 405.433 cv
133.069 405.922 132.961 406.359 132.855 406.792 cv
132.643 407.282 132.483 407.772 132.267 408.262 cv
127.014 419.895 li
139.168 419.895 li
134.188 408.48 li
134.188 408.48 li
cp
128.217 396.673 mo
138.402 396.673 li
156.584 435.088 li
146.026 435.088 li
142.294 426.697 li
123.958 426.697 li
120.324 435.088 li
110.03 435.088 li
128.217 396.673 li
128.217 396.673 li
cp
f
161.436 396.673 mo
170.876 396.673 li
170.876 428.014 li
189.889 428.014 li
189.889 435.088 li
161.436 435.088 li
161.436 396.673 li
161.436 396.673 li
cp
f
195.568 396.673 mo
209.165 396.673 li
218.977 420.177 li
219.994 422.682 220.367 423.714 220.897 425.892 cv
221.27 424.26 221.589 423.281 222.659 420.612 cv
232.47 396.673 li
245.958 396.673 li
245.958 435.086 li
237.054 435.086 li
237.054 408.206 li
237.054 407.067 237.215 406.086 237.428 404.616 cv
237.054 405.759 236.896 406.195 236.361 407.554 cv
225.112 435.086 li
216.524 435.086 li
205.275 408.098 li
204.689 406.628 204.582 406.195 204.155 404.616 cv
204.315 406.248 204.368 406.575 204.473 408.045 cv
204.473 435.086 li
195.568 435.086 li
195.568 396.673 li
195.568 396.673 li
cp
f
254.688 396.673 mo
289.774 396.673 li
289.774 403.581 li
264.126 403.581 li
264.126 412.234 li
286.713 412.234 li
286.713 419.034 li
264.126 419.034 li
264.126 428.231 li
290.84 428.231 li
290.84 435.086 li
254.688 435.086 li
254.688 396.673 li
254.688 396.673 li
cp
f
349.5 423.374 mo
351.71 427.962 357.123 429.279 362.241 429.187 cv
364.533 429.147 371.725 428.639 371.646 423.961 cv
371.597 421.186 368.973 420.577 366.941 420.235 cv
365.387 419.936 357.638 418.874 355.873 418.581 cv
352.395 417.99 343.626 416.46 343.476 407.755 cv
343.442 405.851 343.942 403.882 344.875 402.286 cv
347.928 397.063 354.841 395.58 360.814 395.475 cv
366.301 395.377 370.528 396.116 374.457 398.224 cv
378.333 400.277 380.035 403.075 380.798 404.314 cv
371.879 406.758 li
371.551 406.165 370.784 404.765 368.522 403.662 cv
365.997 402.454 362.741 402.294 360.931 402.33 cv
356.772 402.402 352.519 403.295 352.58 406.939 cv
352.624 409.443 354.823 410.057 357.657 410.656 cv
359.207 410.958 366.908 412.126 368.672 412.477 cv
373.061 413.212 380.498 414.712 380.644 423.147 cv
380.855 435.494 367.295 436.195 361.796 436.272 cv
355.609 436.358 345.978 435.462 340.957 425.813 cv
349.5 423.374 li
349.5 423.374 li
cp
f
307.364 412.855 mo
322.4 412.855 li
324.428 412.855 328.052 412.584 328.052 408.286 cv
328.052 407.524 327.943 406.218 327.307 405.292 cv
326.615 404.366 325.707 403.443 321.974 403.443 cv
307.364 403.443 li
307.364 412.855 li
307.364 412.855 li
cp
297.925 396.695 mo
323.841 396.695 li
328.105 396.695 331.997 397.076 335.143 400.776 cv
337.066 403.06 337.597 405.945 337.597 408.175 cv
337.597 411.114 336.637 414.597 333.972 416.663 cv
331.948 418.242 329.332 418.788 327.838 419.057 cv
339.249 435.109 li
328.414 435.109 li
318.082 419.655 li
307.364 419.655 li
307.364 435.109 li
297.925 435.109 li
297.925 396.695 li
297.925 396.695 li
cp
f
34.8554 453.07 mo
34.8554 461.295 li
34.8349 462.714 34.8139 464.133 34.0161 465.469 cv
32.4609 468.017 29.2475 468.142 28.6342 468.142 cv
27.5493 468.142 26.2602 467.87 25.2783 467.349 cv
22.4951 465.887 22.4951 463.3 22.5156 461.295 cv
22.5156 453.07 li
26.1577 453.07 li
26.1577 462.255 li
26.1577 463.006 26.1787 463.632 26.4243 464.092 cv
26.874 464.865 27.8559 465.095 28.7568 465.095 cv
31.2124 465.095 31.2124 463.382 31.2329 462.235 cv
31.2329 453.07 li
34.8554 453.07 li
cp
f
40.2343 453.07 mo
43.7749 453.07 li
46.9062 458.497 li
48.0522 460.564 48.3994 461.232 49.0752 462.526 cv
48.9116 453.07 li
52.3701 453.07 li
52.3701 467.808 li
48.8296 467.808 li
46.1279 463.153 li
44.8183 460.96 44.5727 460.501 43.5908 458.538 cv
43.6933 467.808 li
40.2343 467.808 li
40.2343 453.07 li
cp
f
61.455 453.07 mo
61.455 467.808 li
57.8535 467.808 li
57.8535 453.07 li
61.455 453.07 li
cp
f
74.5092 453.07 mo
78.3574 453.07 li
73.3432 467.808 li
69.6596 467.808 li
64.707 453.07 li
68.5542 453.07 li
71.5424 463.55 li
74.5092 453.07 li
cp
f
81.6098 453.07 mo
92.292 453.07 li
92.292 455.93 li
85.2119 455.93 li
85.2119 458.603 li
91.8213 458.603 li
91.8213 461.399 li
85.2119 461.399 li
85.2119 464.906 li
92.9272 464.906 li
92.9272 467.808 li
81.6098 467.808 li
81.6098 453.07 li
cp
f
101.132 455.825 mo
101.132 459.813 li
104.121 459.813 li
104.632 459.792 106.29 459.75 106.29 457.787 cv
106.29 455.909 104.959 455.846 104.202 455.825 cv
101.132 455.825 li
cp
97.5102 453.07 mo
104.018 453.07 li
105.532 453.091 107.415 453.112 108.745 454.573 cv
109.42 455.345 109.891 456.514 109.891 457.85 cv
109.891 460.816 107.906 461.546 106.923 461.922 cv
110.259 467.808 li
106.269 467.808 li
103.404 462.547 li
101.132 462.547 li
101.132 467.808 li
97.5102 467.808 li
97.5102 453.07 li
cp
f
116.253 463.382 mo
116.622 463.8 116.929 464.133 117.645 464.53 cv
118.606 465.053 119.589 465.239 120.428 465.239 cv
121.861 465.239 123.089 464.551 123.089 463.529 cv
123.089 462.361 121.636 462.172 120.571 462.026 cv
119.773 461.922 118.975 461.817 118.198 461.649 cv
117.317 461.461 114.31 460.816 114.31 457.641 cv
114.31 453.842 117.624 452.714 120.122 452.714 cv
123.457 452.714 125.258 454.364 126.506 455.513 cv
123.845 457.452 li
123.395 456.993 122.986 456.599 122.414 456.264 cv
121.901 455.972 120.981 455.616 120.06 455.616 cv
118.627 455.616 117.911 456.451 117.911 457.161 cv
117.911 458.288 119.139 458.456 119.752 458.538 cv
121.288 458.727 123.354 459.124 124.173 459.415 cv
125.831 460.042 126.67 461.358 126.67 463.029 cv
126.67 464.092 126.281 465.262 125.524 466.159 cv
124.214 467.704 122.127 468.142 120.101 468.142 cv
116.028 468.142 114.412 466.222 113.512 465.156 cv
116.253 463.382 li
cp
f
135.08 453.07 mo
135.08 467.808 li
131.478 467.808 li
131.478 453.07 li
135.08 453.07 li
cp
f
138.496 453.049 mo
149.628 453.049 li
149.628 455.972 li
145.884 455.972 li
145.884 467.808 li
142.261 467.808 li
142.261 455.972 li
138.496 455.972 li
138.496 453.049 li
cp
f
151.735 453.07 mo
155.89 453.07 li
159 458.122 li
159.185 457.705 159.226 457.62 159.593 457.016 cv
162.07 453.07 li
166.184 453.07 li
160.72 460.836 li
160.72 467.808 li
157.159 467.808 li
157.159 460.94 li
151.735 453.07 li
cp
f
185.951 456.764 mo
185.337 456.096 184.395 455.68 183.413 455.68 cv
181.224 455.68 179.832 457.641 179.832 460.313 cv
179.832 463.82 181.755 465.115 183.454 465.115 cv
185.173 465.115 187.015 463.862 187.117 460.772 cv
187.178 459.228 186.769 457.661 185.951 456.764 cv
cp
183.454 468.226 mo
178.87 468.226 176.271 464.636 176.271 460.377 cv
176.271 456.39 178.747 452.611 183.392 452.611 cv
184.252 452.611 185.153 452.736 186.032 453.049 cv
190.453 454.615 190.74 459.521 190.74 460.522 cv
190.74 463.07 189.594 465.365 187.997 466.681 cv
186.585 467.87 184.948 468.226 183.454 468.226 cv
cp
f
205.921 453.07 mo
205.921 455.909 li
198.433 455.909 li
198.433 458.997 li
205.331 458.997 li
205.331 461.858 li
198.433 461.858 li
198.433 467.808 li
194.832 467.808 li
194.832 453.07 li
205.921 453.07 li
cp
f
215.621 453.049 mo
226.753 453.049 li
226.753 455.972 li
223.008 455.972 li
223.008 467.808 li
219.388 467.808 li
219.388 455.972 li
215.621 455.972 li
215.621 453.049 li
cp
f
230.211 453.07 mo
240.893 453.07 li
240.893 455.93 li
233.813 455.93 li
233.813 458.603 li
240.422 458.603 li
240.422 461.399 li
233.813 461.399 li
233.813 464.906 li
241.529 464.906 li
241.529 467.808 li
230.211 467.808 li
230.211 453.07 li
cp
f
258.247 464.447 mo
257.715 465.304 257.204 466.139 256.056 466.952 cv
255.443 467.391 254.031 468.246 252.025 468.246 cv
248.198 468.246 245.108 465.407 245.108 460.418 cv
245.108 456.055 248.013 452.611 252.108 452.611 cv
253.764 452.611 255.24 453.195 256.323 454.071 cv
257.328 454.886 257.798 455.7 258.205 456.431 cv
255.341 457.891 li
255.137 457.411 254.889 456.91 254.257 456.369 cv
253.561 455.804 252.865 455.637 252.27 455.637 cv
249.94 455.637 248.709 457.85 248.709 460.313 cv
248.709 463.55 250.328 465.156 252.27 465.156 cv
254.156 465.156 254.912 463.82 255.401 462.964 cv
258.247 464.447 li
cp
f
274.166 453.07 mo
274.166 467.808 li
270.545 467.808 li
270.545 461.525 li
265.265 461.525 li
265.265 467.808 li
261.623 467.808 li
261.623 453.07 li
265.265 453.07 li
265.265 458.394 li
270.545 458.394 li
270.545 453.07 li
274.166 453.07 li
cp
f
279.65 453.07 mo
283.191 453.07 li
286.323 458.497 li
287.466 460.564 287.817 461.232 288.49 462.526 cv
288.329 453.07 li
291.787 453.07 li
291.787 467.808 li
288.246 467.808 li
285.543 463.153 li
284.234 460.96 283.989 460.501 283.006 458.538 cv
283.108 467.808 li
279.65 467.808 li
279.65 453.07 li
cp
f
306.005 456.764 mo
305.392 456.096 304.452 455.68 303.469 455.68 cv
301.279 455.68 299.886 457.641 299.886 460.313 cv
299.886 463.82 301.809 465.115 303.51 465.115 cv
305.227 465.115 307.071 463.862 307.172 460.772 cv
307.233 459.228 306.827 457.661 306.005 456.764 cv
cp
303.51 468.226 mo
298.926 468.226 296.326 464.636 296.326 460.377 cv
296.326 456.39 298.802 452.611 303.447 452.611 cv
304.308 452.611 305.207 452.736 306.088 453.049 cv
310.507 454.615 310.792 459.521 310.792 460.522 cv
310.792 463.07 309.649 465.365 308.053 466.681 cv
306.642 467.87 305.004 468.226 303.51 468.226 cv
cp
f
314.907 453.049 mo
318.508 453.049 li
318.508 464.697 li
324.158 464.697 li
324.158 467.808 li
314.907 467.808 li
314.907 453.049 li
cp
f
336.581 456.764 mo
335.967 456.096 335.026 455.68 334.044 455.68 cv
331.854 455.68 330.461 457.641 330.461 460.313 cv
330.461 463.82 332.384 465.115 334.085 465.115 cv
335.802 465.115 337.646 463.862 337.748 460.772 cv
337.808 459.228 337.401 457.661 336.581 456.764 cv
cp
334.085 468.226 mo
329.501 468.226 326.901 464.636 326.901 460.377 cv
326.901 456.39 329.377 452.611 334.021 452.611 cv
334.883 452.611 335.783 452.736 336.664 453.049 cv
341.082 454.615 341.368 459.521 341.368 460.522 cv
341.368 463.07 340.224 465.365 338.628 466.681 cv
337.216 467.87 335.58 468.226 334.085 468.226 cv
cp
f
355.673 466.431 mo
355.079 466.993 353.851 468.142 351.416 468.142 cv
347.386 468.142 344.91 464.803 344.91 460.46 cv
344.91 455.722 347.916 452.57 352.03 452.57 cv
355.858 452.57 357.72 455.074 358.394 455.972 cv
355.651 457.661 li
355.143 456.869 354.303 455.574 352.297 455.574 cv
349.554 455.574 348.511 457.891 348.511 460.357 cv
348.511 462.026 348.959 463.382 349.655 464.112 cv
350.208 464.718 351.191 465.178 352.297 465.178 cv
352.953 465.178 353.686 465.01 354.281 464.614 cv
355.221 463.988 355.345 463.195 355.448 462.423 cv
352.214 462.423 li
352.214 459.624 li
358.496 459.624 li
358.496 467.808 li
355.673 467.808 li
355.673 466.431 li
cp
f
360.487 453.07 mo
364.642 453.07 li
367.75 458.122 li
367.935 457.705 367.976 457.62 368.345 457.016 cv
370.822 453.07 li
374.935 453.07 li
369.47 460.836 li
369.47 467.808 li
365.91 467.808 li
365.91 460.94 li
360.487 453.07 li
cp
f
80.8056 46.2214 mo
82.2509 44.258 83.6997 42.9987 84.7241 41.9758 cv
85.3794 41.3225 85.7749 40.9274 86.6406 40.0642 cv
87.3818 39.446 87.1157 38.8439 87.3203 38.2741 cv
87.3818 37.4108 87.6323 36.3718 87.6333 36.154 cv
88.3745 36.5974 88.0005 39.2004 90.1025 37.5954 cv
91.914 36.2145 94.3095 34.5251 96.8335 33.1921 cv
97.4262 32.8962 100.751 30.4113 101.623 30.238 cv
102.655 30.0324 92.2065 36.4186 91.8344 38.2741 cv
91.7734 38.5827 92.8857 38.7678 93.5664 39.1374 cv
93.0092 39.446 li
89.4467 39.2995 87.6123 40.8229 85.1567 43.5803 cv
84.6606 44.1364 85.852 44.2971 86.1494 44.593 cv
86.0839 45.3698 83.7036 45.4328 82.8852 45.9265 cv
82.0649 46.4191 78.6699 50.4699 78.1704 49.7492 cv
77.6137 48.9484 78.726 49.3786 79.1591 48.2687 cv
79.5874 47.1701 79.7768 46.6037 80.8056 46.2214 cv
cp
93.1318 24.7023 mo
93.6264 24.0241 93.0214 22.5554 93.3173 21.3708 cv
93.7636 21.9636 94.561 23.2233 95.0517 22.9763 cv
95.5434 22.7272 98.2636 20.446 99.9487 19.2751 cv
100.394 18.6818 101.665 17.9787 101.582 17.0539 cv
101.582 16.3132 101.582 15.5734 101.878 14.9807 cv
102.963 15.509 101.913 18.5334 106.055 15.0163 cv
106.709 14.4602 109.715 12.364 110.012 12.364 cv
109.641 13.5353 106.738 15.3259 106.178 15.8801 cv
105.618 16.4328 104.177 17.3708 104.401 17.7951 cv
104.694 18.3478 106.364 19.1506 108.407 19.1271 cv
105.588 19.718 101.878 18.238 99.9487 20.6071 cv
97.7236 22.236 94.9043 24.3098 92.9755 26.6779 cv
92.5761 26.7995 92.2329 26.8259 92.0844 26.5295 cv
92.2329 25.9377 92.6372 25.3811 93.1318 24.7023 cv
cp
75.1396 49.2556 mo
76.0053 51.1682 75.6137 51.8478 75.7612 53.0324 cv
76.5625 53.3269 77.5092 51.4548 79.3242 51.405 cv
81.1377 51.3542 82.497 53.4514 84.1059 51.7849 cv
85.4419 50.6008 86.4458 48.591 88.9677 49.0353 cv
89.8588 49.4797 90.3496 50.3044 91.6391 50.0715 cv
91.9365 49.9226 92.4648 49.7619 92.7612 49.3181 cv
91.3403 48.8244 93.1318 45.1223 93.813 44.1975 cv
95.312 42.1564 99.3154 42.2849 99.9487 40.5954 cv
100.236 39.8327 98.3877 37.4733 100.12 36.6091 cv
100.057 36.1779 li
100.923 34.821 104.942 34.758 105.143 32.3039 cv
105.508 27.8532 106.673 28.2805 106.924 27.2702 cv
107.247 25.9675 103.581 27.0583 102.098 26.614 cv
101.603 26.4909 101.047 25.4426 99.81 26.1208 cv
97.2207 27.5427 97.2754 31.8586 93.6884 31.55 cv
91.0659 31.3254 91.2163 29.2624 89.4228 29.2053 cv
87.4443 29.1447 85.7749 33.0925 85.4028 33.8317 cv
83.7465 37.1403 81.2006 40.6525 79.7768 39.5695 cv
78.8344 38.8527 81.103 37.7839 81.8457 36.7463 cv
84.2202 33.6364 85.8432 28.2829 88.3745 27.4172 cv
90.9067 26.5534 91.788 28.01 93.4204 28.8981 cv
95.646 29.1955 95.811 26.6047 97.1298 25.3459 cv
98.4492 24.0852 99.9746 22.8205 102.098 24.2097 cv
103.751 25.2902 104.936 24.7731 106.637 24.5183 cv
106.923 24.0646 108.067 22.8854 110.258 21.5559 cv
110.487 21.3732 110.726 21.2302 110.953 21.0744 cv
111.105 20.9548 111.25 20.8356 111.386 20.717 cv
111.692 20.4001 111.922 19.9577 111.971 19.1657 cv
112.115 17.9694 110.63 17.114 111.743 15.2014 cv
113.659 13.3503 116.444 12.8679 116.071 10.4514 cv
115.824 8.84687 116.875 8.29267 116.717 7.42939 cv
116.751 6.93525 114.279 7.73799 113.453 7.42939 cv
112.414 7.28193 111.079 7.133 110.039 7.57881 cv
107.723 9.64961 106.178 12.2409 103.705 11.1916 cv
102.749 10.759 101.582 10.0959 100.691 10.5388 cv
99.6528 11.5764 99.0595 13.2038 98.3164 14.3879 cv
97.1298 16.0173 96.3252 16.8312 93.6821 16.5119 cv
92.9467 16.3132 91.9585 16.2009 91.2158 16.4978 cv
86.5175 19.3356 89.8559 24.9489 83.1821 28.3063 cv
82.8994 28.4475 80.3154 28.8171 80.0107 28.8054 cv
80.2578 29.1477 80.58 29.5139 80.9555 30.0842 cv
83.4248 33.8317 77.018 37.1574 77.4897 38.7077 cv
77.9223 40.1247 79.2832 39.385 79.8393 41.2971 cv
80.4184 43.2883 80.0068 43.1301 79.7158 43.8269 cv
78.9116 45.7394 74.2871 47.3698 75.1396 49.2556 cv
cp
f
111.99 33.3391 mo
111.401 33.6755 106.302 37.7185 106.302 38.2136 cv
106.302 38.5441 106.479 39.114 106.924 38.9665 cv
106.92 39.6936 105.907 39.5695 105.312 39.5695 cv
104.719 39.7185 103.768 40.5573 103.214 39.8552 cv
102.842 39.3845 106.377 36.277 108.899 34.2033 cv
109.938 33.4626 113.536 30.1931 114.046 30.9719 cv
114.339 31.4172 113.626 31.6013 113.907 32.1061 cv
114.188 32.6105 114.649 32.6608 114.649 32.6608 cv
113.968 33.4016 112.855 32.8454 111.99 33.3391 cv
cp
117.369 27.5397 mo
116.649 27.5134 115.748 27.2121 115.267 26.923 cv
114.782 26.633 112.019 28.9274 110.172 29.2834 cv
109.665 29.3811 107.941 29.4914 108.228 29.2648 cv
108.229 29.2639 li
108.228 29.2639 li
107.803 29.8513 107.455 30.4499 107.477 31.0568 cv
107.533 32.5739 107.706 34.8288 104.756 36.3019 cv
104.138 36.6091 101.828 37.2155 101.727 38.09 cv
101.624 38.9641 102.945 39.6115 101.878 41.4836 cv
100.613 43.7033 99.2075 43.9265 97.5219 44.5056 cv
95.8374 45.0842 95.1904 46.1496 94.6069 46.9631 cv
94.2456 47.4675 93.9062 48.4709 94.061 48.7014 cv
94.3066 49.0705 95.3491 48.1467 96.2392 48.8884 cv
97.0434 49.0471 97.768 49.5441 98.5493 50.2014 cv
98.5498 50.2004 98.5503 50.1999 98.5507 50.1989 cv
98.5507 50.1975 98.5503 50.1975 98.5503 50.196 cv
98.5503 50.049 99.3794 48.4826 99.9331 48.0212 cv
100.305 47.7136 100.941 44.0275 103.807 43.5568 cv
106.673 43.0856 109.641 43.6418 110.039 41.4836 cv
110.388 39.5959 108.466 37.5954 110.63 36.1779 cv
112.8 34.7536 116.009 36.3019 117.369 34.635 cv
118.12 33.7155 115.947 31.673 117.311 30.0842 cv
118.052 29.3425 119.72 28.5891 119.72 27.6633 cv
119.72 27.2307 118.634 27.5881 117.369 27.5397 cv
cp
f
77.8398 61.7692 mo
78.2929 60.7922 78.4336 59.6955 78.581 58.5114 cv
78.9741 58.7556 li
79.4712 60.5842 li
81.103 59.9914 82.5869 59.1047 84.2202 58.5114 cv
85.1118 57.7712 86.5737 58.0319 87.041 56.883 cv
87.5058 55.7331 87.4838 55.6975 87.9301 55.1057 cv
88.3745 55.4016 88.1162 56.34 88.8657 56.3498 cv
89.6176 56.362 93.2089 55.758 94.0053 55.7751 cv
93.8188 56.0524 90.165 56.8444 89.3618 56.9055 cv
89.0522 57.2761 88.3086 57.7687 87.041 58.3635 cv
85.852 58.5114 84.2036 59.8259 84.291 60.175 cv
84.4765 60.9152 85.1118 61.0285 85.4072 61.4719 cv
85.1567 62.2121 82.9311 60.7311 81.0752 61.718 cv
80.7827 61.8742 79.6762 62.1374 78.8491 63.0744 cv
76.3154 64.3703 74.645 67.2697 74.0273 67.5173 cv
73.498 67.7272 73.0903 67.2463 72.9419 67.0993 cv
72.9419 67.0993 77.3847 62.7453 77.8398 61.7692 cv
cp
72.0415 78.0266 mo
73.5654 77.5222 74.6909 77.7775 75.3247 75.4631 cv
75.6079 74.424 75.5034 73.9377 76.06 73.1691 cv
76.6914 74.2868 75.7685 76.9865 77.2353 76.6086 cv
77.3886 76.5686 77.8364 76.6418 77.9746 76.5109 cv
78.3881 76.1218 80.8613 75.5124 81.0927 75.8967 cv
81.4384 76.4714 78.2548 77.2399 77.5239 77.4592 cv
77.0542 77.6008 75.6982 78.0788 75.7412 78.9665 cv
76.3623 79.529 li
75.7763 79.7658 75.5849 79.0969 73.9052 78.9289 cv
70.8925 78.6276 70.6186 79.863 69.9399 79.8947 cv
68.9248 79.9426 68.9653 79.7409 68.9585 79.593 cv
69.2675 79.2468 li
69.6557 78.633 71.0327 78.6667 72.0415 78.0266 cv
cp
69.7612 59.1257 mo
70.5024 59.6198 73.0542 58.5231 73.5371 60.7311 cv
73.9653 62.7048 72.6772 63.3483 72.2959 64.5544 cv
72.0097 65.4602 72.5395 66.2756 72.497 66.9504 cv
72.3584 69.1828 69.7939 70.2888 69.5141 71.1564 cv
69.1279 72.3527 70.8115 72.4533 70.5678 75.2429 cv
70.3745 77.4489 69.0014 78.0686 67.8974 78.4992 cv
66.7934 78.9289 66.6694 79.0544 65.3706 79.6076 cv
64.6323 80.5739 li
65.226 81.0173 65.5844 80.1657 66.8545 80.5334 cv
68.1259 80.9025 68.8525 82.2023 70.4199 81.4606 cv
71.9868 80.7185 71.9443 80.0554 73.3867 80.5739 cv
74.8315 81.0895 74.7221 81.6091 74.8711 82.4977 cv
75.104 83.6594 74.5546 84.4089 74.041 85.156 cv
74.1694 85.1643 74.2993 85.1789 74.4301 85.1975 cv
74.4296 85.197 li
75.4262 84.8361 75.9433 85.0998 76.8007 84.718 cv
78.8774 84.1257 78.1704 81.9528 80.8286 80.4103 cv
81.8227 79.8327 82.5341 79.1267 83.6245 78.5817 cv
83.9961 78.3981 83.8393 76.4909 84.352 76.1198 cv
84.6914 75.8732 85.0063 75.6188 85.288 75.3669 cv
85.4311 75.1472 85.6201 74.9284 85.8862 74.7106 cv
85.9741 74.6389 86.0317 74.5739 86.1088 74.5041 cv
86.3676 74.1652 86.5136 73.8601 86.4878 73.6296 cv
86.2739 71.7145 83.8149 71.6608 82.4389 71.8146 cv
81.103 71.9626 80.3339 73.1916 79.3242 71.6887 cv
78.1181 69.8967 78.4804 70.0471 77.9882 69.9113 cv
76.1943 69.4221 75.1396 71.8972 72.4199 72.5139 cv
71.6572 72.6867 70.3706 72.8371 70.1318 72.0202 cv
69.894 71.2048 71.0581 70.6013 72.4199 70.6013 cv
73.038 70.6013 73.8022 69.6345 74.5835 68.7502 cv
75.5112 67.7014 76.8715 67.5173 77.3652 67.5783 cv
78.6474 67.7394 79.4189 68.5563 80.0859 69.1213 cv
80.8921 69.7995 81.5708 70.4401 82.3125 70.2922 cv
81.6323 70.0471 81.5097 69.4304 82.2509 68.9977 cv
84.6606 67.7639 84.0434 65.9128 87.3359 65.4689 cv
89.6865 65.1535 89.7934 64.4323 89.9174 62.6433 cv
89.9882 61.6003 91.0922 60.5451 92.2671 60.1149 cv
93.8549 59.5295 95.2973 59.3117 96.1611 57.029 cv
97.0903 54.4992 98.9101 55.1057 99.9487 53.4763 cv
100.305 52.0324 98.8227 52.4592 98.0781 52.1555 cv
96.7182 51.6003 96.4716 49.6262 93.8745 51.1076 cv
93.2485 51.4631 92.2671 52.6491 90.0405 52.217 cv
89.1367 52.0417 89.2114 51.4304 88.124 51.3542 cv
86.3925 51.2311 85.8315 55.2194 81.9941 54.6628 cv
80.457 54.4387 81.5097 53.3269 78.665 53.6975 cv
76.8608 53.9328 76.7553 55.3547 75.6977 54.5607 cv
75.4492 54.3771 74.7573 54.696 74.4599 54.9934 cv
73.1245 56.6213 71.1215 57.8308 69.7612 59.1257 cv
cp
f
63.331 54.6232 mo
63.602 53.7287 64.0239 52.4572 64.0732 51.5383 cv
64.0112 51.1076 63.9048 49.4689 63.4546 48.3303 cv
64.1972 48.7746 64.7524 49.6262 65.375 48.2951 cv
65.4677 48.0515 65.7607 47.9719 65.8051 47.652 cv
65.9272 46.7258 66.415 45.7092 66.7934 44.9367 cv
67.3881 43.7248 67.9253 42.882 67.8974 42.3718 cv
67.8452 41.4216 67.6001 40.5954 67.3037 39.5593 cv
67.8974 39.5593 68.519 40.5598 69.2329 40.0031 cv
69.417 39.8591 69.7583 39.3098 70.1738 38.5695 cv
70.3081 38.3278 70.4741 38.217 70.6264 37.904 cv
70.7661 37.6184 71.3921 36.2932 71.5542 36.1779 cv
71.7539 35.8054 72.1049 34.9831 72.2959 34.635 cv
72.9707 33.4084 73.4184 32.6931 73.6845 32.6003 cv
73.9038 32.9079 72.8076 34.5456 72.4814 35.3142 cv
72.3886 35.5334 71.7407 36.7321 71.7407 36.7321 cv
71.4921 37.0412 li
71.3681 37.4108 li
71.3681 37.4108 71.1186 37.9108 70.997 38.09 cv
70.8564 38.2985 70.8173 38.5202 70.6889 38.7077 cv
70.2241 39.3771 70.3398 39.9338 70.2568 40.1247 cv
69.9428 40.84 69.081 42.9636 69.3291 43.0856 cv
69.7026 43.2731 70.5014 43.2272 71.1836 43.0856 cv
72.1103 42.656 72.769 42.7263 72.7905 43.0251 cv
70.2568 43.3947 72.4814 43.6418 69.8266 44.446 cv
67.9052 45.3073 66.5962 48.257 65.5571 50.9206 cv
65.3095 51.9709 64.6606 53.6638 65.0786 53.7722 cv
65.3105 53.8361 66.2363 53.635 67.2871 53.7604 cv
68.0297 53.7604 68.3388 52.8967 68.935 53.3293 cv
68.935 53.7722 68.1782 53.8957 68.0297 54.1911 cv
65.9526 55.2277 63.7016 55.4865 62.852 58.3635 cv
61.9091 60.237 61.813 60.7311 60.7739 60.7311 cv
61.6352 58.7814 62.6616 56.8366 63.331 54.6232 cv
cp
58.4458 43.9641 mo
58.4936 44.1701 58.5698 44.3386 58.6928 44.444 cv
59.0244 44.7282 59.8681 45.4304 60.1162 46.9118 cv
60.5078 49.279 56.9062 51.8532 57.2099 53.2663 cv
57.5815 54.9934 60.4868 54.1301 58.6928 57.7687 cv
57.3637 60.4689 55.7754 60.694 55.479 63.507 cv
55.3305 63.8024 54.8383 64.1379 54.542 63.841 cv
53.9482 61.6193 55.4331 60.1389 56.7675 58.5114 cv
57.519 55.8561 54.6123 57.6457 54.6123 53.7604 cv
54.6123 50.3044 58.8169 49.5017 57.3335 46.6643 cv
56.1294 44.3601 57.6342 40.0275 57.0869 39.6936 cv
56.5385 39.3596 55.602 39.1374 54.7983 40.9885 cv
54.0244 42.7731 53.3154 43.8894 51.2778 44.2971 cv
50.5005 44.4528 50.3798 47.6301 48.458 48.591 cv
46.2661 49.6877 46.0185 48.2062 45.0459 50.0715 cv
43.6035 52.8317 46.3276 55.9807 41.5678 58.8801 cv
40.9179 59.2766 40.2866 59.4904 39.8984 59.8059 cv
38.9868 60.5417 38.5014 62.5095 38.5385 63.26 cv
38.8032 68.6281 38.1328 71.2785 36.7138 73.1652 cv
37.3173 72.9211 37.8838 72.5715 38.352 72.0202 cv
40.6621 69.301 42.9072 71.6809 43.1499 72.5949 cv
43.5957 72.8908 44.4511 71.2434 44.6001 70.9489 cv
45.0459 68.8752 45.9541 66.9626 43.2641 64.8771 cv
43.4135 64.2858 41.8144 63.6306 42.8042 63.6306 cv
43.5464 64.2219 44.9336 65.1374 45.5249 65.173 cv
46.1147 65.2082 46.6772 61.3244 47.7163 59.5466 cv
49.0478 56.967 48.9038 55.4016 47.7163 53.4763 cv
48.0586 52.9572 48.7607 54.4309 49.4819 54.1911 cv
50.2236 53.944 51.3862 50.009 52.5727 48.0852 cv
52.7617 48.4421 li
51.5747 52.4411 48.706 59.2023 49.0512 60.1389 cv
49.1103 60.2985 50.2387 60.2878 50.832 60.1389 cv
51.1303 59.8439 51.4272 59.6955 51.8715 59.6955 cv
51.8715 60.1389 48.5542 62.1623 47.812 63.1975 cv
47.812 63.1975 46.705 66.7419 46.8252 67.0993 cv
46.9463 67.4558 48.0127 67.5436 48.7548 67.6906 cv
48.7392 68.072 48.3872 67.9226 48.1211 68.1335 cv
46.4526 69.1828 45.5864 71.0334 45.6401 73.1686 cv
46.2041 73.0695 46.8965 70.966 48.9863 70.5397 cv
51.7065 69.9846 52.4223 71.4387 53.8711 68.8137 cv
55.6113 65.6603 54.8383 64.8771 56.3227 63.3967 cv
57.3623 62.6564 58.1992 61.903 60.1162 62.5812 cv
61.6084 63.111 62.0229 62.6813 62.5278 62.2121 cv
63.0307 61.7409 64.2656 59.8698 66.1162 59.9914 cv
67.9677 60.1149 68.4902 60.4357 69.2329 59.6955 cv
68.7876 59.6955 68.2983 59.4587 68.2148 58.8181 cv
69.5141 54.0065 74.6303 55.8444 73.7392 51.5505 cv
72.998 49.9211 72.4013 47.6506 73.5756 46.2936 cv
74.7949 44.8869 77.4721 44.5646 77.6582 42.7145 cv
77.8125 41.1691 75.4306 40.987 75.4931 38.8898 cv
75.5864 35.7351 80.292 33.4582 79.6347 31.6672 cv
78.9755 29.8771 77.7338 30.2263 77.5844 28.5988 cv
77.5844 28.5988 77.7588 25.5905 77.2646 25.466 cv
76.4423 25.2604 74.9868 27.9621 73.3559 28.4069 cv
72.4653 29.0002 70.5913 28.6677 70.2802 30.5803 cv
69.9834 32.2097 68.7978 34.0959 67.5517 34.6037 cv
66.0063 35.2321 64.3452 33.6027 63.6035 36.3806 cv
63.1533 38.6403 63.353 40.4831 62.1562 42.2233 cv
60.7739 44.2341 60.0683 43.7385 58.9091 43.9201 cv
58.9165 43.9147 li
58.7529 43.9416 58.5952 43.9597 58.4458 43.9641 cv
cp
f
79.997 28.7858 mo
79.9975 28.7858 li
79.997 28.7858 li
79.997 28.7858 li
cp
f
373.309 230.863 mo
373.309 230.863 li
373.329 230.869 373.348 230.874 373.369 230.88 cv
373.351 230.875 373.329 230.868 373.315 230.865 cv
373.311 230.864 373.312 230.864 373.309 230.863 cv
cp
f
377.096 217.058 mo
376.848 217.244 376.168 217.984 375.796 218.292 cv
375.425 218.601 374.561 219.341 374.313 219.589 cv
374.065 219.834 374.065 220.143 374.065 220.576 cv
374.065 221.007 374.932 221.007 374.932 221.007 cv
376.487 221.261 li
375.242 221.377 li
375.242 221.377 374.809 221.377 373.326 221.44 cv
371.839 221.5 371.161 221.685 370.604 221.933 cv
370.047 222.178 368.996 222.363 368.688 222.549 cv
368.377 222.735 367.944 223.105 367.203 223.352 cv
366.463 223.599 365.04 224.338 364.608 224.524 cv
364.174 224.708 362.875 225.573 362.319 225.819 cv
361.763 226.066 362.379 226.313 362.812 226.497 cv
363.248 226.683 363.865 226.621 364.112 226.744 cv
364.36 226.867 364.543 227.238 365.164 227.299 cv
365.781 227.362 366.215 227.608 365.967 227.795 cv
365.719 227.978 364.731 227.916 364.42 227.916 cv
364.112 227.916 363.802 227.669 363.616 227.485 cv
363.431 227.299 362.627 227.546 362.073 227.546 cv
361.515 227.546 360.155 227.856 359.662 227.856 cv
359.164 227.856 358.424 228.225 357.929 228.596 cv
357.433 228.965 355.023 231.31 354.589 231.865 cv
354.157 232.42 353.165 233.84 352.922 234.394 cv
352.674 234.949 352.155 235.542 351.932 235.32 cv
351.747 235.135 351.871 234.888 351.994 234.457 cv
352.118 234.025 352.486 233.408 352.859 232.79 cv
353.23 232.173 353.105 231.68 353.165 231.187 cv
353.23 230.693 353.105 229.952 352.922 229.274 cv
352.734 228.596 352.426 227.485 352.426 227.053 cv
352.426 226.621 352.922 226.806 352.984 226.99 cv
353.044 227.176 353.165 227.546 353.23 227.916 cv
353.292 228.286 353.786 228.841 354.035 229.212 cv
354.282 229.581 354.465 229.52 354.837 229.397 cv
355.208 229.274 355.95 228.411 356.631 227.978 cv
357.31 227.546 359.164 226.005 360.03 225.51 cv
360.896 225.017 362.008 224.277 362.627 223.846 cv
363.248 223.413 363.123 222.918 363.248 222.549 cv
363.371 222.178 363.494 220.637 363.556 220.39 cv
363.616 220.143 363.865 220.328 363.926 220.761 cv
363.989 221.193 364.112 222.178 364.36 222.549 cv
364.608 222.918 365.347 222.673 365.967 222.363 cv
366.584 222.056 368.192 221.44 368.749 221.253 cv
369.306 221.069 369.986 220.884 370.479 220.761 cv
370.974 220.637 371.222 220.39 371.653 220.205 cv
372.088 220.02 372.274 219.589 372.953 219.341 cv
373.634 219.094 373.634 218.848 374.065 218.601 cv
374.499 218.355 374.994 217.984 375.3 217.676 cv
375.613 217.367 376.292 216.812 376.416 216.564 cv
376.54 216.319 376.848 215.886 377.344 216.195 cv
377.836 216.504 377.344 216.874 377.096 217.058 cv
cp
341.969 239.822 mo
341.165 241.797 340.236 243.154 339.99 243.339 cv
339.743 243.525 339.447 243.577 339.247 243.339 cv
338.939 242.97 339.307 242.413 339.99 241.365 cv
340.668 240.316 340.917 239.699 341.659 237.416 cv
342.4 235.135 342.339 232.051 342.339 231.434 cv
342.339 230.818 342.279 226.806 342.279 226.497 cv
342.279 226.19 341.534 225.389 341.227 225.14 cv
340.917 224.895 340.175 224.215 339.679 223.968 cv
339.184 223.721 339.062 223.535 338.875 223.352 cv
338.691 223.167 338.197 223.167 337.639 223.043 cv
337.084 222.918 337.704 222.24 338.318 222.612 cv
338.695 222.836 339.184 223.229 339.37 223.229 cv
339.557 223.229 340.175 223.352 341.227 223.783 cv
342.279 224.215 342.339 223.906 342.648 223.413 cv
342.957 222.918 342.77 221.933 343.018 220.637 cv
343.19 219.743 343.452 216.997 343.762 215.085 cv
343.9 214.234 343.543 213.678 343.389 213.295 cv
342.776 211.767 342.031 211.198 341.843 211.136 cv
341.659 211.074 341.352 210.519 341.04 210.457 cv
340.731 210.396 340.3 210.025 340.3 209.841 cv
340.3 209.655 340.979 209.717 341.227 209.841 cv
341.475 209.965 341.782 210.457 341.782 210.457 cv
341.782 210.457 342.155 210.457 343.143 211.013 cv
344.13 211.568 344.255 210.766 344.38 210.396 cv
344.501 210.025 344.812 208.792 344.937 205.153 cv
345.06 201.511 344.626 201.388 344.501 200.957 cv
344.38 200.525 343.762 200.031 343.329 199.599 cv
342.895 199.168 342.031 198.55 341.411 197.996 cv
340.794 197.441 341.596 197.255 341.782 197.441 cv
341.969 197.625 342.462 197.996 342.71 198.241 cv
342.957 198.489 343.389 198.674 343.822 198.613 cv
344.255 198.55 344.008 197.934 344.07 197.503 cv
344.13 197.071 343.389 195.528 343.266 194.788 cv
343.143 194.048 343.204 194.048 343.452 194.17 cv
343.699 194.295 344.008 195.342 344.751 197.749 cv
345.493 200.155 345.553 200.648 345.553 202.994 cv
345.553 205.337 345.553 208.546 345.678 209.1 cv
345.801 209.655 346.297 209.593 346.48 209.348 cv
346.665 209.1 347.409 208.915 347.717 208.853 cv
348.028 208.792 348.15 208.73 349.202 208.299 cv
350.253 207.866 349.881 208.668 349.512 208.792 cv
349.141 208.915 349.264 209.348 348.646 209.593 cv
348.028 209.841 347.903 210.089 347.471 210.336 cv
347.038 210.581 346.48 211.136 345.987 211.691 cv
345.493 212.246 345.428 213.665 345.247 214.591 cv
345.06 215.517 344.937 217.182 344.751 218.355 cv
344.566 219.526 344.812 219.712 345.122 219.957 cv
345.428 220.205 346.111 219.712 346.73 219.465 cv
347.344 219.218 348.275 219.279 348.337 219.589 cv
348.398 219.896 347.657 220.02 347.286 220.205 cv
346.913 220.39 346.665 220.761 346.111 221.007 cv
345.553 221.253 344.874 221.994 344.38 223.29 cv
343.885 224.584 343.699 230.014 343.452 233.284 cv
343.204 236.553 342.77 237.849 341.969 239.822 cv
cp
343.832 259.258 mo
345.316 257.036 344.697 256.172 344.575 254.939 cv
344.45 253.705 344.139 253.334 343.893 252.593 cv
343.646 251.852 343.46 250.805 343.77 250.683 cv
344.079 250.557 344.327 251.545 344.45 252.284 cv
344.575 253.025 344.945 253.457 345.378 254.383 cv
345.809 255.308 346.303 254.753 346.614 254.444 cv
346.924 254.136 348.344 252.224 348.716 251.791 cv
349.087 251.36 350.387 249.57 351.066 248.953 cv
351.747 248.337 352.486 247.411 352.674 247.104 cv
352.859 246.794 352.734 245.437 352.734 245.191 cv
352.734 244.944 352.178 244.327 351.932 243.401 cv
351.685 242.477 352.301 242.722 352.486 243.031 cv
352.674 243.339 353.165 244.512 353.292 244.758 cv
353.414 245.005 353.476 245.437 354.157 245.684 cv
354.837 245.931 356.135 244.512 356.817 243.956 cv
357.498 243.401 359.289 241.983 359.844 241.488 cv
360.401 240.994 360.773 240.442 361.082 239.946 cv
361.392 239.453 361.576 237.541 361.64 237.293 cv
361.7 237.047 361.948 237.356 362.008 237.725 cv
362.073 238.097 362.379 238.466 362.875 238.588 cv
363.371 238.713 363.494 238.097 364.42 237.293 cv
365.347 236.492 365.101 237.416 364.978 237.602 cv
364.854 237.787 364.543 238.404 364.295 238.588 cv
364.05 238.774 363.742 239.515 363.494 239.822 cv
363.248 240.131 362.984 240.285 363.185 240.687 cv
363.371 241.058 364.42 240.748 365.412 240.748 cv
366.399 240.748 366.647 240.131 367.203 240.131 cv
367.758 240.131 368.067 239.946 368.192 239.762 cv
368.317 239.577 369.119 239.453 369.119 239.762 cv
369.119 240.071 368.317 240.626 367.758 240.748 cv
367.203 240.871 366.894 241.058 366.584 241.304 cv
366.276 241.55 364.36 241.736 363.865 241.797 cv
363.371 241.859 362.131 242.229 361.021 242.477 cv
359.908 242.722 358.424 244.018 357.746 244.45 cv
357.06 244.883 355.085 247.104 354.221 247.904 cv
353.353 248.706 352.922 249.51 352.612 249.818 cv
352.301 250.126 352.426 250.496 352.797 250.557 cv
353.144 250.614 354.157 250.805 355.023 250.805 cv
355.887 250.805 359.351 250.743 359.596 250.683 cv
359.844 250.618 361.144 250.312 361.144 250.743 cv
361.144 251.174 359.043 251.237 358.61 251.237 cv
358.178 251.237 357.681 251.668 357.185 251.852 cv
356.694 252.038 353.538 251.976 352.674 252.038 cv
351.808 252.1 350.633 252.84 349.891 253.088 cv
349.15 253.334 346.924 256.913 345.191 259.626 cv
343.46 262.34 341.296 265.24 340.183 266.413 cv
339.07 267.585 338.373 267.993 338.145 267.646 cv
337.893 267.277 337.959 266.844 338.265 266.658 cv
338.579 266.474 339.07 265.857 339.69 265.178 cv
340.306 264.499 340.677 263.945 341.113 263.391 cv
341.544 262.833 342.348 261.476 343.832 259.258 cv
cp
349.289 270.669 mo
349.104 270.362 348.981 269.558 348.981 269.251 cv
348.981 268.942 348.608 268.447 348.485 268.015 cv
348.36 267.585 347.991 266.721 347.805 266.165 cv
347.621 265.61 347.867 264.993 348.299 265.303 cv
348.732 265.61 348.608 266.658 348.608 266.658 cv
348.981 267.09 li
348.981 267.09 349.104 267.771 349.228 267.956 cv
349.349 268.14 349.845 269.065 350.403 270.178 cv
350.959 271.286 351.7 270.485 351.948 270.178 cv
352.196 269.867 353.802 268.264 354.42 267.646 cv
355.039 267.03 356.461 265.916 356.832 265.549 cv
357.205 265.178 357.328 264.562 357.513 264.006 cv
357.699 263.45 357.758 261.476 357.758 261.476 cv
358.254 261.724 358.131 262.958 358.317 263.079 cv
358.502 263.204 358.625 263.265 358.81 263.45 cv
358.996 263.636 361.061 263.098 361.061 263.098 cv
360.688 263.408 359.306 264.315 358.996 264.562 cv
358.685 264.808 357.39 265.736 356.77 266.598 cv
356.44 267.059 356.338 267.585 356.647 267.892 cv
356.956 268.203 358.131 268.079 358.81 267.956 cv
359.49 267.833 359.862 268.323 359.677 268.57 cv
359.49 268.819 359.058 268.879 358.377 268.879 cv
357.699 268.879 356.029 269.003 355.039 269.251 cv
354.05 269.495 353.124 270.855 352.506 271.533 cv
351.886 272.212 349.104 275.541 348.608 276.036 cv
348.114 276.529 348.237 276.469 348.424 276.9 cv
348.608 277.333 348.856 277.146 349.969 277.023 cv
351.082 276.9 351.021 277.579 350.588 277.64 cv
350.156 277.701 349.597 277.826 349.289 278.01 cv
348.981 278.195 347.929 278.319 347.248 278.195 cv
346.569 278.07 345.703 278.319 344.776 278.503 cv
343.849 278.689 343.724 278.405 343.724 278.07 cv
343.724 277.701 344.712 277.579 345.209 277.333 cv
345.703 277.085 346.628 276.159 347.744 275.172 cv
348.856 274.187 349.165 273.506 349.476 272.767 cv
349.783 272.026 349.476 270.976 349.289 270.669 cv
cp
324.497 285.29 mo
324 285.165 323.136 284.673 322.332 284.24 cv
321.528 283.811 320.538 283.811 319.92 283.811 cv
319.304 283.811 318.435 284.24 318.002 284.796 cv
317.572 285.353 315.531 287.57 314.974 288.068 cv
314.417 288.56 313.241 289.423 312.501 289.857 cv
311.758 290.286 311.043 290.547 311.142 290.166 cv
311.202 289.918 312.376 289.116 312.808 288.744 cv
313.241 288.374 313.924 287.57 314.417 287.018 cv
314.912 286.462 316.274 284.549 316.705 283.996 cv
317.14 283.439 318.5 282.023 318.994 281.527 cv
319.487 281.033 320.352 280.234 321.528 279.367 cv
322.703 278.503 322.455 278.01 322.828 277.269 cv
323.199 276.529 323.199 275.235 323.568 274.187 cv
323.938 273.136 324.497 273.816 324.434 274.122 cv
324.372 274.433 324.063 275.421 324.063 275.911 cv
324.063 276.408 324.186 277.208 324.62 277.457 cv
325.052 277.701 325.857 277.085 326.227 277.023 cv
326.597 276.961 327.401 276.839 327.898 276.777 cv
328.391 276.715 328.638 276.593 329.505 276.343 cv
330.37 276.098 332.223 275.851 332.905 275.79 cv
333.584 275.728 333.957 275.421 334.452 275.359 cv
334.943 275.295 336.428 275.541 336.428 275.541 cv
336.428 275.541 335.935 275.851 335.376 275.977 cv
334.82 276.098 334.327 276.159 334.266 276.777 cv
334.204 277.394 334.266 277.517 334.452 277.701 cv
334.635 277.887 334.266 278.135 333.707 278.01 cv
333.152 277.887 331.171 277.457 330.555 277.457 cv
329.937 277.457 328.143 277.701 327.773 277.947 cv
327.401 278.195 325.67 278.814 324.497 279.367 cv
323.32 279.924 322.207 280.726 321.775 280.973 cv
321.343 281.219 320.911 281.956 321.095 282.204 cv
321.279 282.453 321.836 282.576 322.455 282.883 cv
323.074 283.192 323.816 283.811 324.247 284.056 cv
324.682 284.303 324.745 284.735 325.548 284.859 cv
326.349 284.982 326.722 285.045 326.538 285.413 cv
326.349 285.783 324.99 285.413 324.497 285.29 cv
cp
303.163 286.339 mo
302.361 286.587 301.744 286.771 300.939 287.08 cv
300.137 287.389 299.516 287.82 298.835 288.686 cv
298.157 289.546 293.582 295.408 292.837 296.271 cv
292.098 297.136 291.596 297.919 291.169 297.568 cv
290.798 297.258 291.293 296.641 291.542 296.271 cv
291.79 295.904 293.209 294.112 293.706 293.371 cv
294.202 292.631 298.587 285.908 298.898 285.353 cv
299.208 284.796 301.31 281.466 301.62 280.848 cv
301.928 280.234 301.557 278.999 301.372 278.135 cv
301.189 277.269 299.948 275.605 299.269 274.433 cv
298.587 273.262 298.898 273.136 299.146 273.136 cv
299.394 273.136 299.702 273.878 299.887 274.371 cv
300.073 274.863 300.999 275.79 301.928 276.839 cv
302.855 277.887 303.103 277.394 303.351 277.023 cv
303.599 276.654 304.462 274.617 304.894 273.629 cv
305.332 272.644 306.69 269.065 307.058 267.646 cv
307.43 266.228 306.815 265.303 306.01 263.945 cv
305.205 262.588 305.575 261.663 305.575 261.663 cv
305.885 261.787 306.256 262.649 306.749 263.45 cv
307.248 264.254 307.864 264.439 308.11 264.315 cv
308.358 264.193 310.234 256.24 310.234 256.24 cv
310.234 256.24 309.533 262.588 309.658 262.896 cv
309.78 263.204 310.213 262.958 310.338 262.773 cv
310.461 262.588 311.08 262.466 311.328 262.401 cv
311.574 262.34 312.252 261.476 312.563 261.23 cv
312.886 260.972 313.241 261.109 313.181 261.417 cv
313.119 261.724 312.501 262.278 311.881 262.649 cv
311.265 263.019 310.213 264.069 309.41 265.056 cv
308.606 266.042 307.926 268.57 307.616 269.314 cv
307.307 270.051 306.998 271.409 306.749 272.026 cv
306.504 272.644 306.874 272.767 307.678 272.829 cv
308.482 272.89 309.658 272.398 310.028 272.273 cv
310.398 272.15 311.017 271.719 311.017 271.719 cv
311.511 271.471 li
312.19 271.594 312.129 271.471 311.636 272.273 cv
311.142 273.074 308.482 273.816 307.864 274.064 cv
307.248 274.31 306.194 275.05 305.823 275.421 cv
305.453 275.79 305.019 277.208 304.155 278.999 cv
303.288 280.784 301.496 284.24 301.433 284.427 cv
301.372 284.612 301.62 284.859 301.991 284.919 cv
302.361 284.982 304.403 284.919 304.711 284.919 cv
305.019 284.919 306.317 284.859 306.566 284.735 cv
306.815 284.612 307.248 284.303 307.494 284.18 cv
307.742 284.056 308.174 283.933 308.419 283.747 cv
308.667 283.562 309.226 283.192 309.101 283.871 cv
308.978 284.549 307.801 284.859 307.555 284.919 cv
307.307 284.982 307.123 285.413 306.504 285.537 cv
305.885 285.66 303.967 286.093 303.163 286.339 cv
cp
292.837 307.623 mo
293.458 307.376 294.572 306.882 297.415 305.648 cv
300.26 304.414 302.176 303.121 302.547 302.441 cv
302.908 301.78 303.042 300.589 303.103 299.664 cv
303.163 298.739 303.228 297.136 303.473 296.457 cv
303.721 295.779 304.094 295.47 304.462 295.592 cv
304.835 295.715 304.28 297.013 304.094 297.505 cv
303.907 297.998 303.907 298.676 303.907 298.986 cv
303.907 299.294 304.032 300.033 304.155 300.404 cv
304.28 300.775 304.155 301.147 304.339 301.516 cv
304.525 301.886 305.39 301.639 306.01 301.393 cv
306.627 301.147 309.101 300.156 309.719 299.912 cv
310.338 299.664 312.376 298.923 313.056 298.676 cv
313.739 298.43 315.84 297.998 316.83 297.691 cv
317.82 297.381 317.942 297.074 318.5 296.579 cv
319.054 296.087 319.363 294.731 319.425 294.298 cv
319.487 293.865 319.612 292.939 319.672 292.631 cv
319.736 292.324 319.92 292.076 320.168 292.199 cv
320.415 292.324 320.106 293.249 319.983 293.68 cv
319.859 294.112 319.92 294.731 319.92 295.221 cv
319.92 295.715 319.736 296.457 320.168 296.764 cv
320.599 297.074 321.404 296.889 322.022 296.889 cv
322.641 296.889 324.124 296.677 324.99 296.641 cv
326.538 296.579 327.216 296.148 327.649 296.148 cv
328.081 296.148 329.195 296.21 330.122 295.964 cv
331.048 295.715 331.236 295.16 331.482 294.79 cv
331.729 294.421 332.348 293.68 332.656 293.249 cv
332.966 292.816 333.091 293.436 332.905 293.742 cv
332.719 294.052 332.286 295.346 332.223 295.655 cv
332.165 295.964 332.656 295.964 332.844 296.087 cv
333.029 296.21 334.389 296.271 334.635 296.21 cv
334.883 296.148 335.376 296.21 335.376 296.518 cv
335.376 296.828 334.139 296.641 333.771 296.641 cv
333.4 296.641 331.113 296.949 330.617 296.949 cv
330.122 296.949 329.257 297.074 329.009 297.381 cv
328.761 297.691 329.318 298.369 329.505 298.616 cv
329.689 298.862 329.999 299.109 330.184 299.171 cv
330.37 299.234 330.923 300.033 331.421 300.221 cv
331.915 300.404 332.286 300.529 332.286 300.529 cv
332.04 300.775 331.792 300.775 330.989 300.652 cv
330.184 300.529 329.195 299.912 328.638 299.603 cv
328.081 299.294 326.783 298.43 326.349 298.063 cv
325.918 297.691 324.867 297.751 324.311 297.877 cv
323.753 297.998 323.199 298.244 322.395 298.309 cv
321.588 298.369 320.415 298.492 319.552 298.676 cv
318.686 298.862 316.643 299.357 316.149 299.603 cv
315.653 299.85 314.974 300.098 314.974 300.466 cv
314.974 300.835 315.717 300.835 315.963 301.147 cv
316.211 301.453 316.892 302.07 317.261 302.378 cv
317.633 302.687 318.56 303.182 318.994 303.365 cv
319.425 303.551 319.92 303.551 320.168 303.551 cv
320.415 303.551 320.352 303.923 320.724 304.108 cv
321.095 304.293 321.279 304.475 321.035 304.66 cv
320.787 304.846 319.983 304.354 319.797 304.23 cv
319.612 304.108 319.363 304.042 318.746 303.984 cv
318.127 303.923 316.705 303.182 315.903 302.687 cv
315.097 302.195 313.614 301.453 312.808 301.206 cv
312.004 300.96 311.636 300.9 311.08 301.023 cv
310.523 301.147 307.058 302.562 306.442 302.81 cv
305.823 303.059 303.411 304.108 303.103 304.414 cv
302.794 304.723 302.732 305.032 302.919 305.402 cv
303.103 305.771 303.721 305.771 304.094 305.956 cv
304.462 306.143 304.958 306.635 306.071 307.315 cv
307.182 307.994 307.742 308.241 308.049 308.362 cv
308.358 308.487 308.73 308.178 308.667 308.487 cv
308.606 308.796 308.235 308.734 307.555 308.734 cv
306.874 308.734 305.638 308.241 304.958 307.933 cv
304.28 307.623 303.163 307.068 302.547 306.761 cv
301.928 306.449 300.751 306.266 300.073 306.203 cv
299.394 306.143 299.146 306.513 297.969 306.945 cv
296.796 307.376 293.706 308.609 293.334 308.734 cv
292.962 308.855 292.036 308.796 291.356 309.166 cv
290.673 309.533 287.956 309.598 287.582 309.35 cv
287.212 309.106 287.249 308.566 287.582 308.362 cv
287.891 308.178 288.759 308.362 289.995 308.362 cv
291.232 308.362 292.221 307.869 292.837 307.623 cv
cp
286.223 320.516 mo
287.212 320.516 288.202 320.639 289.44 320.639 cv
290.673 320.639 290.925 320.084 291.293 319.654 cv
291.665 319.222 292.159 317.925 292.531 317.188 cv
292.902 316.445 293.395 315.891 293.829 316.138 cv
294.26 316.385 293.706 316.876 293.395 317.369 cv
293.085 317.866 292.714 318.729 292.591 319.589 cv
292.468 320.455 292.714 320.455 293.209 320.639 cv
293.706 320.825 294.88 320.825 295.685 320.825 cv
296.488 320.825 300.26 320.639 300.751 320.578 cv
301.248 320.516 301.433 320.578 301.62 320.885 cv
301.805 321.196 301.496 321.934 301.557 322.183 cv
301.62 322.431 302.114 322.431 302.361 322.489 cv
302.609 322.551 304.435 322.5 303.941 322.685 cv
303.447 322.871 301.62 322.551 301.062 322.551 cv
300.506 322.551 298.712 321.996 298.217 321.752 cv
297.725 321.504 296.055 321.811 295.189 321.873 cv
294.323 321.934 291.417 322.121 290.925 322.183 cv
290.428 322.244 288.882 322.431 288.634 322.8 cv
288.388 323.17 289.811 324.464 289.934 324.774 cv
290.059 325.08 291.356 325.638 291.602 325.821 cv
291.85 326.008 292.654 326.5 292.468 326.807 cv
292.283 327.118 290.866 326.603 289.995 326.008 cv
289.007 325.326 288.016 324.341 287.582 323.911 cv
287.151 323.477 286.41 322.862 285.606 322.489 cv
284.802 322.121 281.216 322.244 279.979 322.244 cv
278.744 322.244 276.146 322.431 275.774 322.551 cv
275.403 322.675 275.094 322.675 275.033 323.108 cv
274.97 323.541 275.467 324.157 275.711 324.528 cv
275.959 324.896 276.642 326.008 277.133 326.807 cv
277.629 327.612 278.309 328.475 278.681 328.845 cv
279.054 329.212 279.608 329.832 279.362 330.139 cv
279.113 330.45 278.556 329.77 278.246 329.401 cv
277.937 329.029 277.629 328.905 276.763 327.92 cv
275.899 326.934 274.91 325.698 274.229 324.836 cv
273.549 323.971 272.746 323.477 271.878 323.292 cv
271.015 323.108 270.397 323.356 270.088 323.477 cv
269.775 323.603 269.408 323.664 268.912 323.723 cv
268.415 323.786 267.676 324.031 267.305 324.157 cv
266.932 324.279 266.81 324.528 266.376 324.713 cv
265.944 324.896 265.392 324.973 265.265 324.464 cv
265.202 324.218 266.253 323.664 266.624 323.477 cv
266.996 323.292 267.737 323.233 267.985 323.17 cv
268.232 323.108 268.356 322.862 268.664 322.737 cv
268.974 322.614 270.642 321.996 271.324 321.811 cv
272.002 321.627 274.353 321.135 275.033 321.009 cv
275.711 320.885 277.877 320.639 278.929 320.639 cv
279.979 320.639 280.102 320.455 280.535 320.145 cv
280.968 319.839 281.464 319.158 281.772 318.48 cv
282.081 317.801 282.636 316.751 283.009 316.445 cv
283.38 316.138 283.504 316.013 283.69 316.507 cv
283.875 316.999 283.256 317.678 283.132 317.925 cv
283.009 318.173 282.884 318.664 282.761 319.405 cv
282.636 320.145 283.256 320.33 283.75 320.516 cv
284.244 320.702 285.236 320.516 286.223 320.516 cv
cp
259.865 316.502 mo
259.061 316.814 256.419 317.552 255.676 317.798 cv
254.937 318.044 254.197 318.109 254.197 317.866 cv
254.197 317.618 255.184 317.188 256.421 316.751 cv
257.659 316.323 261.801 314.409 263.532 313.546 cv
264.66 312.984 266.309 312.054 267.428 311.262 cv
268.027 310.838 268.473 310.323 268.603 310.214 cv
270.001 309.053 269.59 308.855 269.655 308.362 cv
269.715 307.869 268.726 306.945 268.664 306.449 cv
268.603 305.956 268.849 305.896 269.097 306.082 cv
269.344 306.266 269.59 306.882 269.963 307.315 cv
270.334 307.746 270.334 307.869 271.2 307.869 cv
272.065 307.869 272.187 307.376 273.427 306.266 cv
274.662 305.157 276.518 303.121 277.01 302.441 cv
277.504 301.763 279.113 300.033 279.545 299.234 cv
279.979 298.43 280.165 297.877 280.597 296.641 cv
281.029 295.408 280.349 293.805 280.165 293.126 cv
279.979 292.445 279.297 290.532 279.297 290.166 cv
279.297 289.794 279.668 290.04 279.733 290.348 cv
279.793 290.658 280.288 291.581 280.597 292.139 cv
280.906 292.693 281.464 293.496 281.772 293.616 cv
282.081 293.742 282.087 293.407 282.205 293.249 cv
282.39 293.003 282.761 292.693 283.069 291.581 cv
283.38 290.473 283.813 290.286 283.813 290.286 cv
283.813 291.645 283.813 292.385 284.184 292.445 cv
284.555 292.508 285.236 292.014 285.479 291.706 cv
285.731 291.398 286.04 291.091 286.347 291.335 cv
286.656 291.581 285.852 291.953 285.731 292.199 cv
285.606 292.445 285.236 292.631 285.047 292.816 cv
284.865 293.003 284.74 293.126 283.875 293.865 cv
283.009 294.607 282.636 295.655 282.329 296.148 cv
282.02 296.641 280.474 299.48 280.165 299.973 cv
279.854 300.466 279.485 301.453 279.608 301.948 cv
279.733 302.441 280.658 302.503 281.897 302.503 cv
283.132 302.503 282.946 302.255 283.195 302.07 cv
283.44 301.886 283.997 301.886 284.432 301.886 cv
284.865 301.886 284.121 302.441 283.628 302.81 cv
283.132 303.182 281.464 303.24 280.597 303.365 cv
279.733 303.488 278.496 303.798 277.629 304.108 cv
276.763 304.414 275.158 306.513 274.476 307.315 cv
273.795 308.116 271.015 310.523 270.458 311.201 cv
269.9 311.88 270.519 312.003 270.892 312.249 cv
271.765 312.834 273.117 312.865 273.549 312.929 cv
273.983 312.99 275.281 312.929 275.158 313.361 cv
275.033 313.791 273.427 313.546 272.558 313.546 cv
271.694 313.546 270.397 313.361 269.775 313.237 cv
269.16 313.112 268.415 312.929 267.924 312.99 cv
267.428 313.052 266.439 313.546 265.698 313.916 cv
264.954 314.286 260.668 316.195 259.865 316.502 cv
cp
242.848 313.622 mo
241.216 313.323 239.275 312.475 237.873 314.039 cv
236.473 315.604 234.005 317.602 231.744 319.294 cv
231.45 319.442 229.713 320.207 229.643 319.987 cv
229.415 319.286 229.957 319.345 231.752 318.109 cv
234.962 315.903 237.008 314.718 237.505 307.699 cv
237.654 306.958 li
238.099 308.291 237.581 311.474 238.677 310.83 cv
239.775 310.189 241.582 308.362 243.438 306.945 cv
245.293 305.527 247.003 304.442 248.932 303.107 cv
250.268 302.813 250.415 301.183 251.159 299.999 cv
251.307 300.445 251.53 301.206 252.156 301.206 cv
252.785 301.206 255.829 299.579 257.906 298.986 cv
260.577 297.947 263.325 297.036 265.996 296.151 cv
266.145 296.151 267.119 296.271 266.442 296.595 cv
265.468 297.055 263.315 297.6 263.164 298.063 cv
263.038 298.43 263.624 298.369 263.472 298.815 cv
264.215 299.703 266.568 299.051 266.442 299.85 cv
266.314 300.652 264.892 300.221 263.964 300.098 cv
262.542 299.973 261.926 298.676 258.833 299.726 cv
255.743 300.775 254.422 301.626 252.048 302.663 cv
251.603 303.405 250.052 304.108 250.268 304.442 cv
250.624 304.995 251.167 304.969 252.464 305.648 cv
253.207 306.082 255 306.698 255 307.005 cv
255 307.649 250.847 306.033 250.65 305.948 cv
248.281 305.07 246.404 306.814 244.925 307.699 cv
243.738 308.587 242.079 310.029 241.582 310.46 cv
241.088 310.891 241.104 311.582 241.366 311.696 cv
243.809 312.745 243.496 313.675 244.736 313.731 cv
246.16 313.791 247.452 314.399 247.299 314.804 cv
247.147 315.211 244.184 314.36 242.848 313.622 cv
cp
328.638 254.506 mo
328.268 254.939 327.709 256.296 327.031 257.897 cv
326.349 259.503 325.548 260.923 325.052 261.663 cv
324.557 262.401 324.99 262.34 325.422 262.526 cv
325.857 262.709 326.165 262.649 327.587 262.588 cv
329.009 262.526 328.329 263.079 327.957 263.079 cv
327.587 263.079 326.66 263.204 326.29 263.329 cv
325.918 263.45 325.918 263.511 325.422 263.697 cv
324.93 263.881 324.745 263.881 324 264.129 cv
323.259 264.376 323.199 264.624 322.518 265.116 cv
321.836 265.61 321.714 265.916 321.279 266.353 cv
320.847 266.783 320.352 267.151 319.983 267.522 cv
319.612 267.892 319.344 268.149 319.239 267.892 cv
319.117 267.585 320.97 265.796 321.775 264.376 cv
322.173 263.676 323.63 261.54 324.063 260.86 cv
324.497 260.181 325.177 258.824 325.363 258.269 cv
325.548 257.713 325.238 256.913 325.052 256.48 cv
324.867 256.047 324.557 255.247 324.372 255.124 cv
324.186 254.999 323.938 254.815 324.186 254.629 cv
324.434 254.444 325.238 255.431 325.979 255.739 cv
326.722 256.047 326.846 255.124 327.834 252.038 cv
328.824 248.953 328.948 246.547 328.7 245.621 cv
328.521 244.955 326.908 243.154 326.538 242.783 cv
326.165 242.413 325.486 241.674 325.486 241.674 cv
325.486 241.674 325.238 241.304 325.363 241.242 cv
325.486 241.18 325.857 241.55 326.165 241.797 cv
326.473 242.044 327.031 242.353 327.957 242.847 cv
328.886 243.339 328.886 240.626 328.886 240.626 cv
330.432 246.918 329.628 248.953 329.443 250.126 cv
329.257 251.299 329.132 252.347 329.38 252.593 cv
329.628 252.84 330.122 252.469 330.678 252.347 cv
331.236 252.224 332.409 252.347 332.409 252.532 cv
332.409 252.717 330.923 253.211 330.245 253.396 cv
329.566 253.579 329.009 254.074 328.638 254.506 cv
cp
355.783 178.317 mo
355.47 178.685 355.039 179.117 354.854 179.735 cv
354.668 180.351 354.543 182.326 354.483 182.943 cv
354.42 183.56 354.358 188.248 354.298 188.989 cv
354.235 189.728 353.371 190.223 353.309 188.494 cv
353.248 186.768 353.371 183.93 353.371 183.005 cv
353.371 182.079 353.677 181.092 352.813 180.166 cv
351.948 179.242 351.082 178.501 350.34 178.193 cv
349.597 177.884 348.981 177.637 348.485 177.576 cv
347.991 177.515 347.498 176.651 348.917 176.896 cv
350.34 177.143 351.578 177.884 352.319 178.008 cv
353.058 178.131 353.371 178.193 353.371 177.021 cv
353.371 175.848 353.183 170.728 352.072 169.555 cv
350.959 168.383 349.783 167.643 349.104 167.459 cv
348.424 167.274 347.681 167.149 347.373 167.026 cv
347.065 166.903 346.754 166.532 346.448 166.471 cv
346.136 166.409 345.085 166.039 345.703 166.039 cv
346.321 166.039 346.692 166.102 347.558 166.348 cv
348.424 166.595 349.845 166.718 350.403 166.655 cv
350.959 166.595 351.267 166.655 350.959 165.546 cv
350.648 164.435 349.845 162.524 349.289 161.165 cv
348.732 159.808 347.558 156.538 347.312 156.107 cv
347.065 155.675 347.124 155.181 346.876 154.872 cv
346.628 154.565 346.136 154.441 345.888 154.132 cv
345.64 153.824 345.085 153.824 344.899 153.577 cv
344.712 153.33 344.53 153.084 344.157 152.96 cv
343.786 152.838 342.612 152.775 342.301 152.775 cv
341.994 152.775 341.439 152.159 342.178 152.221 cv
342.92 152.282 343.414 152.282 344.035 152.406 cv
344.653 152.529 344.776 152.96 345.394 152.838 cv
346.013 152.714 345.948 152.282 345.888 151.911 cv
345.827 151.542 345.085 149.753 344.837 149.011 cv
344.589 148.273 344.282 147.284 344.035 146.854 cv
343.786 146.421 343.105 144.817 342.92 144.324 cv
342.735 143.831 342.487 143.461 342.92 143.213 cv
343.197 143.056 343.414 143.645 343.601 144.077 cv
343.786 144.509 344.712 146.976 345.023 147.594 cv
345.333 148.211 346.569 151.418 346.816 152.035 cv
347.065 152.652 347.558 153.147 347.621 153.515 cv
347.681 153.885 348.176 156.107 348.795 155.983 cv
349.412 155.86 350.156 154.996 350.834 153.639 cv
351.515 152.282 351.64 151.85 351.824 151.602 cv
352.01 151.357 352.626 151.418 352.444 152.035 cv
352.258 152.652 351.64 154.256 351.267 154.936 cv
350.897 155.613 350.34 156.23 350.215 156.6 cv
350.093 156.971 349.969 157.095 349.783 157.712 cv
349.597 158.328 349.597 158.945 350.28 160.426 cv
350.959 161.906 351.824 163.818 352.072 164.065 cv
352.319 164.313 352.381 165.238 353.371 164.249 cv
354.358 163.263 355.039 162.584 355.47 162.214 cv
355.905 161.843 356.461 161.227 356.711 161.042 cv
356.956 160.857 357.758 161.227 357.08 161.659 cv
356.399 162.091 356.09 162.524 355.718 162.893 cv
355.347 163.263 355.162 163.633 354.791 164.003 cv
354.42 164.374 353.556 165.546 353.431 166.163 cv
353.309 166.779 353.058 167.335 353.248 168.013 cv
353.431 168.692 353.987 170.482 354.174 171.282 cv
354.358 172.086 354.543 174.614 354.543 174.984 cv
354.543 175.354 354.668 176.095 354.731 176.342 cv
354.791 176.589 355.102 177.205 356.338 176.466 cv
357.574 175.725 357.822 175.663 358.81 174.245 cv
359.802 172.825 360.234 173.072 360.047 173.443 cv
359.862 173.812 359.862 173.873 359.677 174.182 cv
359.49 174.49 358.933 175.046 358.685 175.418 cv
358.44 175.787 357.822 176.527 357.142 177.021 cv
356.461 177.515 356.09 177.946 355.783 178.317 cv
cp
360.695 137.924 mo
360.68 138.356 360.665 138.787 360.234 138.773 cv
359.902 138.762 359.875 138.39 359.849 137.341 cv
359.818 136.29 359.51 134.429 359.406 133.809 cv
359.303 133.188 359.082 132.378 358.301 131.612 cv
357.522 130.846 357.279 130.715 356.786 130.636 cv
356.294 130.559 356.487 130.381 356.185 130.124 cv
355.882 129.866 355.648 129.489 354.965 129.529 cv
354.965 129.529 355.597 129.116 356.271 129.385 cv
356.94 129.654 357.487 129.981 357.923 129.933 cv
358.357 129.886 358.549 129.706 358.558 129.397 cv
358.57 129.09 358.61 127.856 358.374 127.418 cv
358.143 126.977 358.226 126.3 358.062 125.679 cv
357.895 125.057 357.518 123.377 357.346 122.879 cv
357.179 122.379 356.867 120.517 356.694 120.203 cv
356.516 119.888 356.232 119.138 355.99 118.946 cv
355.749 118.752 354.848 117.982 354.542 117.787 cv
354.243 117.592 353.765 116.96 352.781 116.804 cv
351.796 116.651 351.183 116.506 351.993 116.346 cv
352.801 116.188 354.155 116.416 354.53 116.306 cv
354.904 116.195 354.922 115.639 354.634 115.012 cv
354.345 114.386 353.763 113.257 353.531 112.818 cv
353.297 112.378 352.54 110.87 352.309 110.432 cv
352.074 109.991 351.374 108.672 350.833 108.285 cv
350.288 107.898 349.438 107.315 348.953 106.991 cv
348.471 106.666 348.169 106.409 347.618 106.33 cv
347.065 106.25 346.572 106.173 346.261 106.162 cv
345.953 106.153 345.906 105.658 346.586 105.74 cv
347.261 105.825 347.878 105.906 348.513 105.371 cv
349.151 104.837 348.401 104.997 348.293 104.501 cv
348.185 104.002 348.154 103.84 348.012 103.627 cv
346.045 100.669 348.346 102.896 348.751 103.713 cv
348.751 103.713 348.81 103.9 349.053 103.969 cv
349.298 104.038 349.228 104.344 349.861 103.934 cv
349.861 103.934 350.419 103.827 350.411 104.074 cv
350.403 104.321 350.61 105.501 350.907 105.942 cv
351.203 106.383 351.988 106.965 352.339 107.593 cv
352.687 108.222 352.916 108.846 352.958 109.466 cv
352.958 109.466 353.259 109.661 353.375 109.972 cv
353.489 110.285 354.536 112.294 354.77 112.733 cv
355.002 113.173 355.383 114.728 356.023 114.132 cv
356.661 113.536 357.313 112.507 357.574 112.145 cv
357.832 111.784 358.234 110.809 358.488 110.57 cv
358.488 110.57 358.892 111.447 358.365 112.541 cv
357.832 113.634 356.975 115.337 356.881 116.259 cv
356.79 117.181 357.115 118.611 357.915 120.673 cv
358.716 122.736 359.271 124.607 359.385 124.858 cv
359.502 125.108 359.928 125.307 360.635 124.528 cv
361.342 123.748 361.972 123.337 362.484 122.858 cv
362.668 122.685 362.745 122.436 362.999 122.196 cv
363.255 121.958 363.843 120.928 364.097 120.69 cv
364.357 120.451 365.086 120.843 364.697 121.387 cv
364.307 121.93 363.787 122.715 363.597 122.834 cv
363.408 122.951 363.222 122.944 363.088 123.248 cv
362.957 123.553 361.937 124.446 361.413 125.354 cv
360.886 126.263 360.186 126.861 360.233 127.415 cv
360.276 127.972 360.288 129.515 360.434 130.693 cv
360.581 131.87 360.708 133.665 360.746 134.469 cv
360.779 135.272 360.708 137.491 360.695 137.924 cv
cp
368.495 106.925 mo
367.908 107.574 367.917 108.871 368.003 110.535 cv
368.093 112.198 367.769 112.841 367.438 112.665 cv
367.119 112.497 367.109 112.312 367.156 112.063 cv
367.206 111.812 367.219 110.884 367.252 110.389 cv
367.29 109.894 366.992 107.81 366.905 107.319 cv
366.817 106.829 366.516 104.684 366.482 104.066 cv
366.452 103.451 365.994 101.868 365.854 101.568 cv
365.715 101.265 364.36 100.226 363.72 99.8269 cv
363.079 99.4289 362.262 99.2243 362.008 99.1154 cv
361.757 99.0046 356.885 97.8347 362.292 98.6057 cv
362.759 98.6721 363.35 98.7341 364.415 98.986 cv
365.483 99.239 365.195 98.4514 365.156 97.7731 cv
365.122 97.0969 364.624 95.8874 364.525 95.2131 cv
364.428 94.5383 364.263 93.8063 364.229 93.1281 cv
364.191 92.4504 363.721 91.7341 363.324 91.26 cv
362.927 90.7873 362.484 90.5651 361.901 90.0993 cv
361.319 89.6364 360.385 89.5622 360.385 89.5622 cv
360.374 89.3171 360.807 89.2936 362.044 89.2893 cv
363.28 89.2868 363.063 88.6789 363.044 88.3107 cv
363.024 87.9401 362.715 86.7834 362.567 86.3581 cv
362.421 85.9333 362.371 84.9479 362.274 84.3342 cv
362.178 83.7224 362.264 82.9758 362.264 82.9758 cv
362.264 82.9758 362.651 83.2648 362.852 83.5622 cv
363.055 83.8625 363.525 83.404 363.7 83.2097 cv
363.876 83.0144 364.185 82.9977 364.185 82.9977 cv
364.349 83.7311 363.721 84.7531 363.449 85.446 cv
363.177 86.1403 363.99 87.5192 364.089 88.1921 cv
364.188 88.8674 364.661 89.5842 364.697 90.2614 cv
364.733 90.9396 365.008 91.4811 365.234 92.2097 cv
365.458 92.9392 365.68 93.6071 366.362 93.632 cv
367.043 93.6584 367.08 93.1618 367.258 93.0295 cv
367.438 92.8957 367.923 92.7453 368.278 92.4191 cv
368.631 92.0915 368.821 92.1428 369.069 92.1291 cv
369.314 92.1159 369.025 92.5026 368.857 92.821 cv
368.686 93.1384 368.275 93.531 367.574 94.3093 cv
366.872 95.0886 366.592 95.6584 366.499 96.2194 cv
366.406 96.781 366.874 98.6086 366.905 99.1638 cv
366.932 99.718 367.364 101.981 367.558 103.33 cv
367.753 104.679 367.95 104.854 368.275 105.145 cv
368.599 105.438 369.124 104.853 369.367 104.717 cv
369.609 104.581 370.161 104.551 370.401 104.415 cv
370.641 104.279 370.94 104.015 370.94 104.015 cv
371.731 103.788 371.692 104.161 371.332 104.428 cv
370.974 104.693 370.627 105.143 370.332 105.407 cv
370.036 105.67 369.078 106.276 368.495 106.925 cv
cp
365.973 165.113 mo
366.098 164.867 366.407 164.62 366.965 163.942 cv
367.521 163.263 368.756 161.165 369.376 160.117 cv
369.993 159.068 370.86 156.662 371.231 155.798 cv
371.599 154.936 371.847 153.947 372.157 153.147 cv
372.467 152.343 372.405 151.727 372.157 151.172 cv
371.91 150.617 371.599 150 371.353 149.506 cv
371.108 149.011 370.735 148.334 370.303 148.087 cv
369.868 147.839 369.499 147.779 369.933 147.594 cv
370.366 147.409 370.551 147.779 370.796 147.963 cv
371.044 148.149 371.044 147.839 372.096 148.827 cv
373.147 149.815 373.208 148.888 373.394 148.334 cv
373.58 147.779 374.012 144.57 374.135 143.953 cv
374.26 143.337 374.508 140.868 374.815 139.512 cv
375.127 138.154 374.692 137.969 374.199 137.414 cv
373.703 136.86 372.961 136.057 372.528 135.687 cv
372.096 135.317 371.787 134.761 371.724 134.268 cv
371.664 133.775 372.28 134.143 372.467 134.576 cv
372.653 135.007 373.208 135.255 374.199 135.933 cv
375.187 136.613 375.56 135.44 375.56 134.761 cv
375.56 134.084 375.744 132.601 375.926 131.801 cv
376.115 130.998 376.61 129.395 376.61 129.395 cv
376.61 129.395 376.61 129.395 376.855 128.653 cv
377.103 127.913 377.907 125.508 378.278 124.951 cv
378.649 124.397 378.897 124.088 378.958 124.706 cv
379.02 125.323 378.528 126.001 378.217 126.802 cv
377.907 127.605 377.539 128.839 377.166 130.381 cv
376.793 131.923 376.487 134.638 376.424 135.193 cv
376.362 135.749 376.177 136.796 376.053 137.723 cv
375.926 138.648 376.547 138.586 376.978 138.463 cv
377.412 138.339 377.226 138.339 378.834 137.414 cv
380.442 136.489 380.627 137.353 380.196 137.538 cv
379.761 137.723 379.33 137.969 379.082 138.216 cv
378.834 138.463 378.528 138.586 378.217 138.71 cv
377.907 138.833 376.793 140.129 376.177 140.744 cv
375.56 141.362 375.683 141.98 375.619 142.658 cv
375.56 143.337 375.496 144.57 375.31 145.495 cv
375.127 146.421 375.187 146.606 374.94 147.839 cv
374.692 149.074 374.567 150.06 374.444 151.295 cv
374.323 152.529 374.94 151.911 375.248 151.666 cv
375.56 151.418 376.177 151.172 376.487 150.801 cv
376.793 150.431 377.476 149.753 377.969 149.196 cv
378.463 148.643 379.082 148.951 378.897 149.444 cv
378.709 149.937 378.403 150 378.03 150.308 cv
377.659 150.617 377.539 150.986 377.289 151.172 cv
377.043 151.357 376.299 152.035 375.992 152.282 cv
375.683 152.529 375.374 153.147 374.754 153.701 cv
374.135 154.256 373.394 154.749 372.157 157.588 cv
370.919 160.426 368.631 164.065 367.953 164.929 cv
367.273 165.793 366.206 166.578 365.914 166.286 cv
365.665 166.039 365.85 165.36 365.973 165.113 cv
cp
358.874 206.261 mo
359.429 205.153 361.654 201.019 362.027 200.403 cv
362.397 199.783 362.768 199.045 363.818 197.441 cv
364.87 195.836 364.436 195.218 364.128 193.676 cv
363.818 192.134 362.953 191.394 362.397 190.654 cv
361.839 189.914 362.645 189.791 363.078 190.223 cv
363.509 190.654 363.697 190.963 364.684 192.443 cv
365.673 193.924 365.673 193.431 366.293 192.937 cv
366.913 192.443 367.404 191.518 369.136 189.174 cv
370.867 186.829 370.374 186.398 370.497 185.349 cv
370.62 184.3 370.311 183.005 370.063 182.512 cv
369.815 182.017 369.63 181.893 369.447 181.277 cv
369.259 180.66 369.075 180.723 368.518 179.673 cv
367.962 178.624 368.95 178.624 369.136 179.117 cv
369.322 179.611 369.259 179.366 369.568 179.92 cv
369.878 180.475 369.939 180.043 370.311 181.463 cv
370.682 182.881 370.434 181.956 371.239 183.005 cv
372.042 184.053 372.473 183.066 372.784 182.572 cv
373.094 182.079 373.67 180.955 374.292 179.946 cv
374.915 178.934 375.213 178.149 375.657 177.065 cv
376.098 175.98 376.964 174.058 377.2 173.27 cv
377.438 172.48 378.07 170.357 378.295 169.754 cv
378.52 169.149 379.207 167.153 379.525 166.061 cv
379.842 164.969 380.293 165.617 380.214 165.92 cv
380.134 166.224 379.889 167.135 379.732 167.621 cv
379.579 168.106 379.283 168.828 379.815 169.233 cv
380.345 169.638 380.635 168.976 381.3 168.277 cv
381.964 167.579 382.238 168.153 382.097 168.452 cv
381.953 168.751 381.768 168.74 381.297 169.327 cv
380.825 169.916 379.29 171.61 378.756 172.194 cv
378.225 172.778 377.792 174.815 377.636 175.152 cv
377.278 175.933 376.836 177.016 376.55 177.616 cv
376.262 178.216 375.832 179.178 375.174 180.681 cv
374.521 182.185 375.381 181.648 375.937 181.648 cv
376.493 181.648 377.544 181.648 377.792 181.401 cv
378.04 181.153 378.384 180.891 379.249 180.891 cv
380.116 180.891 379.47 180.566 380.52 180.196 cv
381.572 179.827 381.695 180.566 381.139 180.689 cv
380.583 180.813 380.583 181.121 380.459 181.369 cv
380.334 181.615 379.434 181.508 378.695 181.693 cv
377.95 181.877 378.04 182.017 377.73 182.265 cv
377.421 182.512 377.05 182.512 376.122 182.881 cv
375.195 183.252 374.577 183.745 373.775 184.486 cv
372.971 185.225 370.188 190.1 369.693 191.025 cv
369.2 191.949 366.665 196.144 366.168 197.008 cv
365.673 197.872 366.602 198.058 367.591 197.934 cv
368.579 197.811 369.815 197.811 370.434 197.811 cv
371.053 197.811 371.611 197.996 371.363 198.119 cv
371.115 198.241 369.878 198.613 369.384 198.737 cv
368.889 198.86 367.344 199.231 366.913 199.477 cv
366.479 199.723 365.673 199.969 364.436 200.403 cv
363.201 200.834 361.345 204.35 360.665 205.584 cv
359.985 206.818 359.49 208.36 359.183 209.285 cv
358.874 210.211 358.193 210.398 357.699 210.336 cv
357.08 209.965 358.317 207.373 358.874 206.261 cv
cp
378.782 224.543 mo
379.045 222.904 380.677 222.084 381.525 221.58 cv
382.375 221.075 382.437 220.508 382.569 220.003 cv
382.698 219.498 382.245 217.86 382.306 216.976 cv
382.375 216.093 383.811 214.329 384.397 213.76 cv
384.986 213.194 385.049 212.688 384.722 212.373 cv
384.397 212.058 382.624 211.94 381.841 212.13 cv
381.058 212.318 379.818 212.381 379.361 212.318 cv
378.905 212.256 377.923 212.13 376.879 212.191 cv
375.837 212.256 375.122 213.011 374.008 215.217 cv
372.899 217.425 371.463 217.866 369.896 218.182 cv
368.33 218.497 367.154 217.425 366.697 217.11 cv
366.24 216.795 365.328 216.416 364.806 216.48 cv
364.283 216.542 363.89 217.11 363.431 217.803 cv
362.977 218.497 362.453 219.758 361.408 221.399 cv
360.364 223.037 358.145 223.54 356.971 223.604 cv
355.795 223.667 353.903 223.1 352.791 223.226 cv
351.682 223.352 351.094 224.171 350.442 225.748 cv
349.79 227.326 349.855 231.107 349.79 231.864 cv
349.724 232.62 349.66 233.063 349.331 234.512 cv
349.006 235.963 346.861 239.487 346.015 240.621 cv
345.163 241.757 344.11 241.764 343.859 241.442 cv
343.661 241.189 343.729 240.998 343.859 240.621 cv
343.99 240.243 344.578 239.801 344.968 239.361 cv
345.36 238.919 346.274 237.783 346.472 237.406 cv
346.665 237.028 347.057 236.398 347.32 234.821 cv
347.68 232.645 347.513 231.353 347.451 230.911 cv
347.385 230.469 347.32 229.334 347.777 226.561 cv
348.232 223.785 349.212 222.335 350.387 221.201 cv
351.562 220.065 354.57 220.31 355.613 220.949 cv
356.327 221.391 357.568 221.391 358.808 220.697 cv
360.048 220.003 359.854 219.31 360.307 218.679 cv
360.766 218.049 361.211 216.869 362.4 215.148 cv
363.183 214.014 366.054 213.383 367.555 214.833 cv
368.683 215.921 369.187 216.093 370.362 215.968 cv
371.538 215.842 371.929 214.77 372.712 213.383 cv
373.497 211.995 374.149 211.554 375.258 210.925 cv
376.368 210.294 379.501 210.734 380.74 210.86 cv
381.194 210.906 381.549 210.825 381.833 210.696 cv
381.832 210.675 381.83 210.655 381.831 210.633 cv
381.746 210.598 381.678 210.557 381.658 210.511 cv
381.525 210.208 381.809 209.58 382.277 208.883 cv
382.747 208.187 382.773 207.259 383.031 205.893 cv
383.29 204.524 384.72 203.112 385.928 202.326 cv
387.137 201.54 387.544 200.907 387.944 199.966 cv
388.091 199.617 388.097 199.137 388.044 198.621 cv
388.034 198.565 388.034 198.511 388.018 198.455 cv
387.926 198.118 387.885 197.798 387.873 197.487 cv
387.781 196.982 387.69 196.506 387.677 196.15 cv
387.64 195.162 389.105 193.009 390.1 191.489 cv
391.096 189.971 388.178 188.858 387.576 189.251 cv
386.97 189.645 385.563 191.263 384.707 191.543 cv
383.851 191.822 381.507 192.032 380.7 191.878 cv
380.273 191.797 380.101 191.517 380.082 191.233 cv
379.835 191.285 379.601 191.336 379.374 191.383 cv
379.471 191.567 379.577 191.752 379.708 191.949 cv
380.945 193.8 382.799 195.899 380.82 198.983 cv
378.842 202.068 376.926 202.622 375.999 203.054 cv
375.07 203.487 373.525 203.734 372.846 204.596 cv
372.165 205.46 371.796 206.016 371.486 206.447 cv
371.175 206.879 369.815 209.039 367.652 209.408 cv
366.805 209.553 365.673 209.902 364.932 210.211 cv
364.19 210.519 363.942 210.519 363.572 210.705 cv
363.201 210.888 361.779 211.63 361.161 212.308 cv
360.541 212.988 360.109 213.604 359.677 214.344 cv
359.244 215.085 359.058 215.64 358.81 216.01 cv
358.565 216.381 358.377 216.319 358.006 216.257 cv
357.597 216.189 357.142 215.022 358.193 213.48 cv
359.244 211.938 361.813 209.219 364.128 207.866 cv
366.665 206.385 368.148 206.818 369.2 205.276 cv
369.999 204.101 371.917 201.883 373.525 201.08 cv
375.133 200.279 376.989 199.783 377.792 198.86 cv
378.596 197.934 378.782 197.689 378.842 197.132 cv
378.905 196.576 378.905 195.652 378.473 195.035 cv
378.04 194.419 376.493 192.813 376.37 191.518 cv
376.334 191.146 376.293 190.758 376.29 190.357 cv
376.29 190.354 376.289 190.351 376.289 190.348 cv
376.2 189.742 376.333 189.207 376.619 188.723 cv
376.851 188.21 377.225 187.682 377.853 187.138 cv
379.708 185.535 383.856 184.251 384.812 183.042 cv
385.774 181.834 387.664 180.279 387.322 179.159 cv
386.98 178.039 386.744 177.477 385.673 175.968 cv
384.598 174.46 385.129 172.674 385.774 171.641 cv
386.419 170.609 388.601 167.643 388.509 166.468 cv
388.416 165.293 388.549 164.926 386.74 163.212 cv
384.928 161.497 384.249 159.444 384.14 158.886 cv
384.032 158.327 382.656 157.313 382.029 157.666 cv
381.4 158.02 380.871 158.308 380.603 159.041 cv
380.337 159.775 379.448 160.986 378.555 162.012 cv
377.66 163.037 377.158 163.394 375.843 163.915 cv
374.533 164.436 373.956 165.162 373.876 165.838 cv
373.796 166.515 374.093 169.425 373.13 170.632 cv
372.172 171.842 371.34 172.869 369.779 173.444 cv
368.217 174.023 366.573 174.723 366.08 175.587 cv
365.586 176.45 365.277 177.5 365.401 178.919 cv
365.522 180.337 365.894 182.866 363.916 184.471 cv
361.938 186.074 361.134 185.581 360.455 185.765 cv
359.774 185.951 358.785 186.629 358.599 187.125 cv
358.414 187.617 358.103 188.912 358.414 190.208 cv
358.722 191.503 359.217 193.107 359.217 194.897 cv
359.217 196.685 359.244 198.241 358.44 199.353 cv
357.636 200.464 357.08 200.711 357.142 199.783 cv
357.205 198.86 357.636 198.674 357.758 197.996 cv
357.883 197.318 357.945 195.159 357.08 192.753 cv
356.213 190.346 355.41 187.447 356.77 185.164 cv
357.313 184.251 358.81 183.436 359.802 183.252 cv
360.102 183.195 361.286 183.374 362.15 182.265 cv
363.016 181.153 363.632 180.29 363.572 178.254 cv
363.509 176.218 364.066 173.812 365.055 173.133 cv
366.044 172.455 369 171.21 369.695 170.673 cv
370.387 170.136 371.29 168.863 371.453 167.263 cv
371.62 165.663 372.42 163.463 373.43 162.687 cv
374.441 161.911 376.565 161.164 377.08 160.315 cv
377.596 159.463 377.792 159.098 377.93 158.485 cv
378.046 157.976 379.028 156.69 380.364 155.762 cv
380.373 155.739 380.383 155.715 380.393 155.692 cv
380.021 155.738 380.082 155.065 380.253 154.514 cv
380.515 153.675 381.349 152.43 381.496 152.212 cv
381.744 151.842 382.709 151.066 383.449 149.771 cv
384.191 148.476 384.005 147.242 383.389 146.501 cv
382.77 145.761 382.522 145.026 381.903 143.978 cv
381.286 142.929 381.718 141.633 381.841 141.016 cv
381.964 140.4 383.822 138.481 384.07 138.236 cv
384.316 137.988 384.438 137.617 385.057 136.383 cv
385.677 135.15 385.119 134.232 384.438 133.861 cv
383.757 133.49 383.769 133.358 382.968 132.248 cv
382.163 131.137 382.895 130.159 383.882 128.556 cv
384.869 126.95 384.377 125.897 383.511 124.355 cv
382.689 122.883 383.078 121.393 383.141 120.467 cv
383.203 119.542 384.128 118.987 383.759 117.753 cv
383.389 116.52 382.337 117.259 382.089 117.691 cv
381.841 118.123 381.47 118.924 380.791 119.788 cv
380.11 120.652 378.463 121.127 377.412 121.496 cv
376.362 121.867 374.94 122.176 374.94 125.323 cv
374.94 128.468 373.765 129.086 372.59 129.949 cv
371.417 130.813 369.437 130.998 368.819 132.541 cv
368.202 134.084 369.64 135.537 369.575 138.069 cv
369.507 140.601 367.899 141.344 366.686 141.811 cv
365.474 142.277 364.369 142.132 363.653 142.573 cv
362.938 143.014 363.271 144.34 363.542 144.854 cv
363.814 145.37 364.091 145.823 364.644 147.536 cv
365.196 149.247 364.995 151.088 364.628 152.67 cv
364.261 154.249 362.977 154.897 362.622 154.622 cv
362.445 154.485 362.394 154.358 362.441 153.741 cv
362.486 153.126 362.854 152.351 363.083 151.748 cv
363.317 151.148 362.891 150.187 362.692 149.554 cv
362.494 148.921 362.121 148.088 361.974 147.582 cv
361.826 147.075 360.656 145.319 361.014 143.056 cv
361.369 140.794 362.852 140.038 364.349 139.904 cv
365.848 139.769 366.165 138.865 366.644 138.282 cv
367.12 137.699 366.592 135.996 366.469 135.071 cv
366.346 134.143 366.098 132.232 366.532 131.185 cv
366.965 130.135 368.756 128.962 370.303 128.345 cv
371.847 127.729 372.528 126.865 372.653 125.631 cv
372.744 124.736 372.776 123.842 373.208 122.485 cv
373.642 121.127 375.56 120.018 375.926 119.894 cv
376.054 119.852 376.528 119.774 377.103 119.638 cv
377.094 119.693 375.09 117.874 375.141 116.821 cv
375.195 115.766 375.07 113.919 374.695 112.956 cv
374.321 111.991 374.109 110.708 375.107 108.043 cv
376.106 105.38 376.855 103.66 375.962 102.36 cv
375.07 101.059 375.036 100.926 374.392 100.537 cv
373.747 100.148 372.306 99.1271 372.492 97.6462 cv
372.59 96.8601 372.874 96.0646 373.124 95.134 cv
373.18 94.7971 373.246 94.4357 373.332 94.0227 cv
373.4 93.6887 373.457 93.3762 373.504 93.0749 cv
373.528 92.8137 373.544 92.5427 373.546 92.257 cv
373.566 89.8435 373.622 88.7902 372.387 88.8727 cv
371.155 88.9558 369.771 88.3918 369.032 87.2824 cv
368.289 86.1706 368.164 84.6286 368.66 83.2712 cv
369.155 81.9133 369.474 80.4299 368.981 79.6887 cv
368.485 78.9484 368.299 78.7624 367.744 78.5163 cv
367.185 78.2687 365.781 77.758 365.412 76.8327 cv
365.04 75.9064 364.648 75.3171 364.587 74.8225 cv
364.524 74.3293 362.211 74.3034 361.839 75.0432 cv
361.468 75.7849 361.22 76.5852 360.665 77.1418 cv
360.109 77.696 359.244 78.5598 359.306 79.4846 cv
359.369 80.4103 359.554 81.5202 359.677 81.8908 cv
359.802 82.2604 360.358 84.1125 358.933 85.777 cv
357.513 87.444 356.956 87.9372 357.08 88.4313 cv
357.205 88.924 357.205 89.2951 357.513 89.7883 cv
357.822 90.281 358.625 91.3303 358.254 92.9343 cv
357.883 94.5373 357.142 95.8952 356.461 96.6975 cv
355.783 97.4992 355.162 97.9919 354.854 98.0559 cv
354.543 98.1159 354.42 98.301 354.483 98.4855 cv
354.543 98.6726 354.916 100.398 355.102 100.707 cv
355.287 101.015 355.595 102.003 355.967 102.372 cv
356.338 102.743 356.522 103.175 358.006 102.866 cv
359.49 102.559 362.15 103.668 363.201 105.827 cv
364.252 107.987 364.066 108.233 364.128 108.974 cv
364.19 109.714 364.003 112.983 364.19 113.477 cv
364.375 113.971 364.749 114.155 365.613 114.466 cv
366.479 114.773 368.207 116.008 368.579 116.5 cv
368.95 116.995 369.568 118.289 369.447 119.832 cv
369.322 121.374 368.95 122.053 368.763 122.424 cv
368.579 122.793 367.962 123.657 367.839 123.966 cv
367.712 124.274 367.404 125.94 367.466 126.433 cv
367.527 126.926 367.591 127.296 367.219 127.296 cv
366.847 127.296 366.665 127.05 366.602 126.308 cv
366.54 125.569 366.479 123.966 366.723 122.979 cv
366.973 121.991 367.466 120.51 367.281 119.585 cv
367.096 118.659 366.847 117.734 365.673 117.364 cv
364.5 116.995 363.263 116.809 362.645 116.131 cv
362.027 115.451 361.468 114.711 361.408 113.539 cv
361.345 112.367 361.839 108.974 361.468 108.049 cv
361.097 107.124 360.788 106.012 359.49 105.334 cv
358.193 104.655 358.006 105.087 357.758 105.149 cv
357.513 105.211 356.153 105.89 355.66 105.767 cv
355.162 105.642 353.926 104.841 353.556 103.977 cv
353.183 103.113 352.444 100.152 352.196 99.6579 cv
351.948 99.1652 351.578 98.2394 350.526 97.9304 cv
349.476 97.6227 348.424 97.7468 347.929 98.1159 cv
347.433 98.4855 346.196 98.9201 345.271 98.0559 cv
344.344 97.1911 343.972 96.4499 343.045 95.9572 cv
342.118 95.4636 341.126 96.0178 341.374 96.883 cv
341.623 97.7468 342.982 100.214 342.673 101.386 cv
342.364 102.559 341.562 103.73 341.314 104.223 cv
341.066 104.717 340.942 106.136 342.797 107.308 cv
344.653 108.48 346.136 109.839 346.448 110.577 cv
346.754 111.319 346.876 112.8 346.196 113.909 cv
345.517 115.02 344.53 116.131 344.712 116.87 cv
344.899 117.612 345.088 118.517 347.579 119.397 cv
350.069 120.277 351.068 121.258 351.042 122.801 cv
351.016 124.344 350.516 125.553 349.537 126.487 cv
348.553 127.423 347.268 128.277 347.416 128.965 cv
347.565 129.653 348.751 130.204 350.943 132.203 cv
352.047 133.21 351.003 134.706 352.724 136.31 cv
354.276 137.754 355.107 138.887 354.976 141.228 cv
354.848 143.567 354.814 144.184 353.951 144.075 cv
353.405 144.006 353.141 143.043 353.224 141.564 cv
353.306 140.085 353.18 139.607 350.966 137.135 cv
348.751 134.664 350.489 134.772 348.825 133.506 cv
348.654 133.376 348.47 133.238 348.283 133.096 cv
348.257 133.096 348.249 133.107 348.216 133.101 cv
347.536 132.987 345.559 134.256 346.675 136.295 cv
347.082 136.39 347.427 136.525 347.621 136.735 cv
348.299 137.477 349.349 137.969 349.845 141.176 cv
350.34 144.386 351.392 144.509 354.543 145.188 cv
357.699 145.866 358.131 148.703 358.006 150.801 cv
357.883 152.899 357.39 154.689 360.358 154.996 cv
363.324 155.305 364.87 157.342 364.311 159.994 cv
363.737 162.732 363.078 164.435 363.572 165.607 cv
364.066 166.779 364.5 167.583 364.622 168.568 cv
364.79 169.922 364.684 171.222 364.562 171.715 cv
364.436 172.209 363.201 172.64 363.016 171.222 cv
362.829 169.803 362.917 169.115 361.907 167.928 cv
360.855 166.695 360.053 164.474 360.609 162.747 cv
361.165 161.02 361.351 161.02 361.598 160.341 cv
361.847 159.662 361.967 157.812 359.745 157.564 cv
357.518 157.318 356.712 156.207 356.281 155.653 cv
355.848 155.097 355.354 153.986 355.291 153.308 cv
355.229 152.628 355.661 148.804 354.796 148.003 cv
353.932 147.199 352.626 147.037 351.082 146.73 cv
349.537 146.421 348.675 145.288 348.304 143.375 cv
347.932 141.462 347.558 139.697 346.876 139.079 cv
346.196 138.463 345.64 138.154 344.22 138.093 cv
342.797 138.031 342.053 137.66 341.683 137.353 cv
341.314 137.044 340.323 136.365 340.078 136.118 cv
339.83 135.871 339.085 135.255 338.962 136.613 cv
338.84 137.969 338.591 139.266 338.467 139.697 cv
338.346 140.129 337.975 140.622 337.913 140.992 cv
337.851 141.362 337.602 141.918 338.654 143.398 cv
339.707 144.879 339.707 146.545 339.273 147.594 cv
338.84 148.643 338.223 149.136 337.851 149.753 cv
337.48 150.369 337.109 151.787 337.913 153.084 cv
338.717 154.38 341.066 156.971 341.808 158.02 cv
342.549 159.068 343.045 160.981 341.87 162.584 cv
340.695 164.19 340.014 164.929 340.202 165.669 cv
340.387 166.409 341.746 167.705 342.859 168.692 cv
343.972 169.68 345.271 171.16 344.712 172.825 cv
344.157 174.49 343.414 175.539 343.292 176.095 cv
343.169 176.651 342.92 178.069 344.712 179.55 cv
346.506 181.03 348.383 182.274 349.289 183.807 cv
351.445 187.457 350.718 188.396 350.245 189.117 cv
350.196 189.207 350.145 189.296 350.087 189.378 cv
350.084 189.382 350.082 189.386 350.08 189.391 cv
350.051 189.447 350.03 189.468 350.01 189.475 cv
350.001 189.487 349.993 189.498 349.984 189.508 cv
350.566 189.855 351.042 190.442 351.515 191.148 cv
352.381 192.443 352.381 193.122 352.381 193.986 cv
352.381 194.849 352.133 198.119 352.506 199.291 cv
352.874 200.464 355.102 199.847 356.584 202.254 cv
358.07 204.659 356.522 207.866 356.09 208.915 cv
355.66 209.965 354.916 210.705 356.09 213.234 cv
357.266 215.764 356.956 216.997 356.711 218.355 cv
356.461 219.712 355.47 220.082 354.977 219.896 cv
354.483 219.712 354.483 219.279 354.731 218.848 cv
354.977 218.416 355.19 217.611 355.311 216.623 cv
355.436 215.635 354.942 215.204 354.384 214.648 cv
353.828 214.093 353.209 213.168 353.026 211.811 cv
352.838 210.453 353.272 209.219 354.322 207.183 cv
355.374 205.148 355.249 203.112 353.332 202.434 cv
351.416 201.755 350.675 200.953 350.179 199.719 cv
349.686 198.486 350.427 195.03 350.551 193.241 cv
350.675 191.452 348.819 191.329 348.08 191.575 cv
347.338 191.822 345.791 191.637 344.553 191.144 cv
343.317 190.651 342.549 188.372 341.808 187.014 cv
341.066 185.658 340.323 186.458 340.323 187.138 cv
340.323 187.817 340.387 188.989 340.323 189.914 cv
340.262 190.84 340.014 191.087 339.707 191.642 cv
339.398 192.196 337.54 193.307 336.923 193.924 cv
336.305 194.541 336.675 195.96 337.232 197.071 cv
337.789 198.181 337.913 198.983 337.975 200.711 cv
338.038 202.437 336.739 202.87 335.13 203.425 cv
333.525 203.979 333.275 204.536 333.029 205.215 cv
332.781 205.893 332.905 206.261 334.327 208.915 cv
335.749 211.568 336.428 213.172 336.243 215.022 cv
336.057 216.874 333.707 217.8 332.533 218.91 cv
331.361 220.02 332.533 221.994 333.214 223.043 cv
333.893 224.091 335.81 226.251 337.48 229.336 cv
339.151 232.42 338.591 234.825 338.346 235.751 cv
338.099 236.677 336.516 237.576 336.668 237.192 cv
336.669 237.189 336.67 237.185 336.671 237.181 cv
336.67 237.184 336.668 237.186 336.666 237.189 cv
337.013 239.01 336.332 241.705 336.057 243.216 cv
335.687 245.253 336.893 244.911 338.591 246.671 cv
340.262 248.399 339.519 251.299 338.467 253.211 cv
337.419 255.124 336.243 256.296 337.171 258.023 cv
338.099 259.751 337.913 260.49 337.419 262.219 cv
336.923 263.945 335.007 265.303 333.275 266.598 cv
331.544 267.892 330.309 268.323 329.628 268.447 cv
328.948 268.57 328.948 267.646 329.318 267.277 cv
329.689 266.906 331.296 265.916 333.335 264.129 cv
335.376 262.34 335.007 260.674 335.007 260.181 cv
335.007 259.689 334.266 258.394 334.327 256.603 cv
334.389 254.815 335.81 253.518 336.243 252.963 cv
336.675 252.408 336.862 251.976 337.109 250.434 cv
337.355 248.893 336.057 247.843 335.687 247.596 cv
335.316 247.35 334.452 246.671 333.957 245.375 cv
333.459 244.08 334.204 241.983 334.452 240.81 cv
334.698 239.638 334.327 238.404 333.707 237.602 cv
333.091 236.8 332.473 236.8 331.729 236.492 cv
330.989 236.183 330.803 235.691 330.309 235.196 cv
329.813 234.702 329.195 233.223 328.824 232.604 cv
328.452 231.988 328.02 232.112 327.649 232.296 cv
327.277 232.482 327.156 233.716 326.783 235.073 cv
326.413 236.431 325.979 236.923 325.67 237.356 cv
325.363 237.787 324.434 238.281 323.938 238.466 cv
323.447 238.652 323.259 238.652 322.765 239.391 cv
322.27 240.131 322.518 241.119 323.447 242.97 cv
324.372 244.82 324.063 245.315 323.447 246.61 cv
322.828 247.904 321.156 248.09 320.599 248.09 cv
320.043 248.09 319.736 248.09 319.117 248.768 cv
318.5 249.447 318.746 249.818 319.179 252.1 cv
319.612 254.383 319.117 255.37 318.686 256.172 cv
318.252 256.974 316.999 257.473 316.707 257.428 cv
316.707 257.428 316.707 257.42 316.708 257.419 cv
316.706 257.421 316.704 257.423 316.702 257.425 cv
317.133 257.881 317.415 258.436 317.756 259.38 cv
318.413 261.195 317.695 263.019 316.705 264.808 cv
315.717 266.598 315.468 267.4 316.768 268.695 cv
318.065 269.99 318.127 270.609 318.127 271.471 cv
318.127 272.334 318.5 272.457 318.994 272.704 cv
319.487 272.951 320.538 272.026 320.911 271.656 cv
321.279 271.286 322.518 269.683 323.447 268.879 cv
324.372 268.079 325.113 268.079 326.413 268.015 cv
327.709 267.956 328.638 269.683 329.566 270.485 cv
330.493 271.286 331.977 270.051 333.275 269.374 cv
334.577 268.695 335.749 269.189 336.491 269.314 cv
337.232 269.437 338.038 270.238 339.273 271.163 cv
340.51 272.088 341.932 271.348 342.549 271.348 cv
343.169 271.348 345.023 271.471 345.582 273.383 cv
346.136 275.295 344.157 276.715 343.105 277.394 cv
342.053 278.07 341.994 278.749 341.683 279.43 cv
341.374 280.109 341.498 279.738 340.262 281.281 cv
339.026 282.824 336.55 283.192 335.749 283.253 cv
334.943 283.316 334.139 283.688 333.525 284.673 cv
332.905 285.66 332.286 286.587 331.361 287.451 cv
330.432 288.314 328.143 288.93 327.031 288.992 cv
325.918 289.051 325.422 288.623 325.363 288.068 cv
325.297 287.512 327.04 288.002 328.091 287.755 cv
329.143 287.507 330.007 286.334 330.318 285.78 cv
330.625 285.226 331.554 282.632 333.285 281.832 cv
334.478 281.279 335.332 281.075 337.367 280.905 cv
338.107 280.845 338.417 280.227 338.85 279.736 cv
339.283 279.24 339.592 277.884 339.964 277.266 cv
340.332 276.65 341.261 275.785 341.695 275.479 cv
342.126 275.169 341.62 273.75 341.434 273.567 cv
341.247 273.38 339.763 273.443 339.146 273.26 cv
338.527 273.073 337.54 272.086 336.613 271.529 cv
335.684 270.973 335.497 270.914 333.828 272.209 cv
332.161 273.503 331.045 273.443 330.119 273.38 cv
329.192 273.32 327.707 272.023 327.276 271.221 cv
326.841 270.419 326.47 270.112 325.79 269.987 cv
325.112 269.864 323.753 271.163 323.136 271.594 cv
322.518 272.026 320.352 273.506 319.92 273.629 cv
319.487 273.753 319.179 273.693 318.867 273.57 cv
318.56 273.446 318.313 273.262 318.002 273.262 cv
317.695 273.262 317.324 273.629 317.201 274.248 cv
317.076 274.863 315.037 276.036 314.047 276.777 cv
313.056 277.517 312.504 278.117 313.985 279.985 cv
315.16 281.466 314.789 282.883 313.985 284.919 cv
313.181 286.956 310.09 288.623 308.915 289.301 cv
307.742 289.978 306.749 289.857 306.442 289.487 cv
306.131 289.116 306.874 288.438 307.43 288.128 cv
307.987 287.82 309.198 287.439 311.237 285.775 cv
313.278 284.109 311.98 281.516 311.298 281.086 cv
310.589 280.635 310.496 279.543 310.557 278.62 cv
310.678 276.766 312.902 275.115 314.946 273.496 cv
317.049 271.832 315.194 270.045 314.823 269.548 cv
314.453 269.055 314.205 268.685 313.958 267.268 cv
313.71 265.848 314.573 264.428 315.69 262.699 cv
316.801 260.975 316.088 260.06 315.84 259.38 cv
315.592 258.701 314.233 257.713 313.614 257.22 cv
312.996 256.728 312.501 254.506 312.44 253.272 cv
312.376 252.038 311.881 251.237 311.328 251.113 cv
310.771 250.989 310.523 251.36 309.965 251.976 cv
309.41 252.593 309.226 253.334 308.049 255.185 cv
306.874 257.036 305.205 257.22 303.721 258.269 cv
302.237 259.319 302.855 261.169 303.103 263.881 cv
303.351 266.598 302.609 266.721 301.62 267.833 cv
300.63 268.942 299.085 268.942 298.467 268.942 cv
297.848 268.942 297.601 269.189 297.105 269.437 cv
296.611 269.683 295.374 270.976 295.745 273.016 cv
296.118 275.05 296.055 277.333 295.685 278.566 cv
295.312 279.799 294.075 280.726 293.334 281.219 cv
292.6 281.706 290.101 284.629 289.703 284.355 cv
290.022 284.653 290.6 284.816 291.725 285.413 cv
293.706 286.462 293.458 289.301 293.275 290.166 cv
293.085 291.029 291.356 293.187 290.119 294.484 cv
288.882 295.779 288.141 296.641 289.749 298.184 cv
291.356 299.726 291.293 300.715 291.106 302.195 cv
290.925 303.677 290.552 303.736 289.007 305.279 cv
287.459 306.82 284.369 307.251 282.824 307.994 cv
281.279 308.734 280.535 309.533 281.154 311.632 cv
281.772 313.731 281.216 314.78 280.72 316.013 cv
280.226 317.246 278.124 318.109 277.504 318.358 cv
276.886 318.604 272.683 318.358 271.26 318.296 cv
269.84 318.232 268.356 318.358 266.624 318.791 cv
264.892 319.222 264.089 319.9 263.532 320.207 cv
262.978 320.516 262.359 320.763 262.049 320.639 cv
261.739 320.516 261.678 320.33 261.616 319.9 cv
261.553 319.468 262.111 318.664 264.398 317.558 cv
266.685 316.445 268.48 316.138 269.963 315.952 cv
271.448 315.768 274.167 316.074 275.467 316.138 cv
276.763 316.197 276.456 316.013 277.504 315.459 cv
278.556 314.904 278.804 313.608 278.869 313.112 cv
278.929 312.619 278.246 311.324 278.246 310.214 cv
278.246 309.106 279.297 307.994 280.288 307.192 cv
281.279 306.389 283.38 305.464 284.244 305.032 cv
285.113 304.6 285.915 304.23 287.212 303.182 cv
288.512 302.132 288.016 300.652 287.582 299.973 cv
287.151 299.294 286.1 298.244 286.1 296.579 cv
286.1 294.914 287.275 293.496 289.13 291.768 cv
290.984 290.04 290.673 289.487 290.798 288.623 cv
290.925 287.759 288.512 286.646 287.647 285.969 cv
286.779 285.29 287.151 282.39 287.151 281.712 cv
287.151 281.033 286.904 280.848 286.162 280.784 cv
285.42 280.726 284.925 282.081 284.679 282.64 cv
284.432 283.192 283.75 284.119 283.195 284.859 cv
282.636 285.597 280.72 285.597 280.102 285.413 cv
279.485 285.23 279.237 284.735 278.062 284.859 cv
276.886 284.982 276.642 286.462 276.207 287.326 cv
275.774 288.191 274.847 289.978 274.476 290.348 cv
274.148 290.677 273.107 291.592 273.858 291.458 cv
274.91 291.275 276.518 291.398 277.197 292.262 cv
278.096 293.403 277.868 294.077 277.57 294.817 cv
276.393 297.013 272.864 297.507 272.526 298.369 cv
272.187 299.234 272.806 301.023 271.486 302.516 cv
269.561 304.695 269.166 303.797 268.817 304.144 cv
267.428 305.527 263.992 303.549 264.769 307.376 cv
265.249 309.732 264.357 310.553 263.177 311.993 cv
261.801 313.668 258.499 313.768 256.421 313.916 cv
253.158 314.508 254.443 317.369 251.307 319.543 cv
250.455 320.131 248.706 321.978 247.52 320.578 cv
246.838 319.777 247.866 319.74 249.595 318.567 cv
251.326 317.393 251.001 312.171 256.212 311.718 cv
260.478 311.349 261.265 311.091 261.642 309.277 cv
262.021 307.463 260.681 306.651 261.939 304.833 cv
263.198 303.02 265.181 303.507 267.278 302.834 cv
270.741 301.725 269.655 299.506 270.547 297.728 cv
272.031 296.1 275.854 295.299 275.74 294.469 cv
275.625 293.641 274.622 293.365 274.009 293.336 cv
272.096 293.42 270.61 293.54 268.965 292.892 cv
268.013 292.519 267.664 292.43 267.057 291.522 cv
266.932 291.335 266.064 291.188 265.512 291.216 cv
263.218 291.317 261.065 293.991 260.508 294.67 cv
259.946 295.346 258.71 297.013 257.39 296.889 cv
253.643 296.543 255.184 293.805 253.237 293.484 cv
249.968 292.95 247.581 301.083 244.615 301.886 cv
241.508 302.724 240.163 298.986 237.813 300.835 cv
230.125 306.892 236.08 315.465 226.498 319.839 cv
224.717 320.725 220.913 320.673 220.913 320.673 cv
220.915 320.672 220.917 320.671 220.919 320.67 cv
220.916 320.67 220.914 320.67 220.911 320.671 cv
221.392 322.002 221.768 323.839 220.442 325.318 cv
220.737 325.763 221.334 325.612 221.775 325.467 cv
224.518 323.971 227.838 322.965 230.228 321.978 cv
233.438 320.652 239.295 313.34 244.078 318.358 cv
244.889 319.209 245.328 320.368 246.303 320.908 cv
247.471 321.554 249.877 321.31 251.415 320.908 cv
255.042 319.756 257.596 318.028 260.951 320.729 cv
262.699 322.132 260.501 325.575 264.521 325.638 cv
267.045 325.34 270.151 325.169 271.634 327.687 cv
272.521 329.159 271.498 331.659 273.098 332.559 cv
273.102 332.557 273.105 332.555 273.108 332.553 cv
273.08 332.5 273.075 332.491 273.075 332.491 cv
273.095 332.183 273.406 331.904 274.095 331.498 cv
275.382 330.738 280.127 333.152 282.075 331.584 cv
283.011 330.827 284.29 328.241 286.898 328.218 cv
291.351 328.176 293.132 331.584 295.809 330.603 cv
295.871 330.58 295.922 330.553 295.971 330.523 cv
296.04 330.474 296.102 330.404 296.167 330.345 cv
296.673 329.686 296.07 328.165 297.668 326.494 cv
299.455 324.624 305.095 327.198 306.629 324.509 cv
307.483 323.015 308.914 321.467 311.122 321.26 cv
311.328 321.242 312.194 321.167 312.03 320.391 cv
311.866 319.614 310.555 319.77 309.972 319.316 cv
309.378 319.158 308.586 319.179 308.049 318.836 cv
306.62 317.922 305.186 315.66 302.151 316.803 cv
300.498 317.424 298.555 316.401 298.013 315.774 cv
297.16 314.794 296.562 313.317 295.014 314.053 cv
293.463 314.786 290.273 316.371 288.689 315.046 cv
287.45 314.013 286.325 312.61 285.645 312.459 cv
284.964 312.311 284.628 312.148 285.176 311.749 cv
285.726 311.352 286.604 310.987 287.707 311.352 cv
288.812 311.716 289.579 313.411 290.788 313.335 cv
291.997 313.256 293.615 311.142 296.317 311.215 cv
299.023 311.288 299.253 314.503 300.565 314.404 cv
301.285 314.348 302.614 314.018 303.932 313.908 cv
303.944 313.883 303.955 313.857 303.968 313.831 cv
303.762 313.595 304.302 313.156 304.695 312.811 cv
304.768 312.737 304.844 312.664 304.923 312.597 cv
304.925 312.595 304.928 312.593 304.93 312.591 cv
305.229 312.272 305.946 311.695 307.678 311.88 cv
307.859 311.899 308.04 311.907 308.22 311.914 cv
309.125 311.856 309.826 311.806 310.374 311.752 cv
311.056 311.63 311.637 311.465 312.004 311.324 cv
312.808 311.016 313.614 309.722 315.408 308.673 cv
315.945 308.359 316.553 308.207 317.198 308.147 cv
318.067 308.03 318.901 308.131 319.684 308.303 cv
320.482 308.446 321.293 308.649 322.084 308.855 cv
322.647 309.003 323.079 309.029 323.42 308.991 cv
323.889 308.902 324.29 308.643 324.61 308.103 cv
324.616 308.077 324.62 308.055 324.62 308.055 cv
324.62 308.055 324.62 308.055 324.805 307.192 cv
324.99 306.328 324.867 305.711 325.857 304.846 cv
326.846 303.984 328.577 303.798 331.236 304.108 cv
333.893 304.414 334.511 303.365 334.943 303.059 cv
335.376 302.75 335.624 302.195 335.997 301.516 cv
336.368 300.835 337.232 300.098 337.851 299.48 cv
338.467 298.862 339.458 298.553 340.078 298.369 cv
340.695 298.184 341.374 297.998 342.549 297.136 cv
343.724 296.271 342.735 295.532 342.487 295.346 cv
342.241 295.16 341.001 295.037 340.078 294.976 cv
339.151 294.914 338.099 294.669 337.726 294.421 cv
337.355 294.173 335.997 292.939 335.255 292.076 cv
334.511 291.216 333.839 290.659 333.037 290.599 cv
332.233 290.538 330.502 291.773 329.265 292.635 cv
328.028 293.499 326.42 293.315 324.999 292.944 cv
323.578 292.574 322.896 291.278 322.341 290.29 cv
321.785 289.304 320.857 288.937 319.866 288.937 cv
318.878 288.937 317.642 290.417 315.911 292.266 cv
314.18 294.114 312.256 294.626 310.407 294.857 cv
308.924 295.041 306.998 293.557 306.442 293.064 cv
305.885 292.571 304.719 292.388 303.173 292.758 cv
301.625 293.129 300.012 296.457 299.58 297.258 cv
299.146 298.063 298.157 299.787 297.788 300.343 cv
297.415 300.9 297.29 301.147 295.125 302.934 cv
292.962 304.723 291.678 304.335 291.542 303.923 cv
291.417 303.551 291.479 303.488 291.79 303.059 cv
292.098 302.627 293.025 302.07 294.075 301.329 cv
295.125 300.589 296.611 298.553 296.984 298.063 cv
297.352 297.568 298.587 295.1 298.96 294.484 cv
299.332 293.865 300.32 292.324 302.484 291.091 cv
304.646 289.857 306.874 290.286 307.864 291.581 cv
308.66 292.624 309.905 292.693 311.08 292.631 cv
312.252 292.571 312.687 291.893 315.22 289.546 cv
317.756 287.203 318.686 287.08 320.476 287.08 cv
322.27 287.08 323.63 288.623 324.62 289.857 cv
325.611 291.091 326.165 291.091 327.462 290.965 cv
328.761 290.843 330.617 289.176 331.236 288.809 cv
331.855 288.438 333.832 288.992 334.452 289.176 cv
334.698 289.25 335.183 289.632 335.714 290.097 cv
335.714 290.096 li
335.714 290.095 li
335.62 289.896 337.156 288.413 337.858 287.949 cv
338.56 287.488 338.953 287.012 340.03 285.147 cv
341.106 283.28 342.734 281.667 347.207 281.319 cv
351.68 280.968 352.584 280.143 353.417 279.501 cv
353.916 279.118 353.969 278.313 353.977 277.309 cv
353.964 277.052 353.957 276.802 353.971 276.564 cv
353.973 276.532 353.981 276.507 353.983 276.476 cv
353.988 276.03 354.002 275.562 354.054 275.083 cv
354.269 273.118 357.159 272.201 359.858 271.398 cv
362.554 270.6 363.112 269.262 363.303 267.787 cv
363.496 266.315 363.927 264.978 364.587 264.143 cv
365.243 263.31 367.223 262.041 367.866 261.452 cv
368.511 260.864 368.224 260.421 367.986 260.223 cv
367.748 260.027 367.377 260.009 366.253 260.207 cv
365.128 260.401 363.961 260.286 362.919 259.992 cv
361.88 259.696 360.92 259.097 359.993 259.054 cv
359.069 259.012 358.237 259.591 357.229 261.277 cv
356.222 262.956 354.962 263.455 353.163 263.558 cv
351.366 263.66 350.546 262.572 350.189 262.248 cv
349.834 261.923 349.412 261.656 348.732 261.624 cv
348.054 261.593 346.853 263.455 346.048 264.837 cv
345.243 266.22 343.665 268.362 342.624 269.314 cv
341.46 270.369 340.977 270.1 340.755 269.533 cv
340.534 268.969 341.88 267.98 342.395 267.509 cv
342.915 267.04 343.546 265.339 344.525 262.913 cv
345.508 260.487 346.273 259.968 346.978 259.445 cv
347.68 258.92 350.092 258.97 350.695 259.366 cv
351.293 259.765 352.064 260.543 352.789 260.945 cv
353.511 261.35 353.843 260.872 355.105 259.015 cv
356.368 257.157 357.872 256.734 359.116 256.607 cv
359.698 256.545 360.301 256.626 360.913 256.825 cv
360.914 256.824 360.914 256.823 360.915 256.822 cv
360.915 256.822 li
360.695 256.694 363.865 253.272 365.222 252.1 cv
366.347 251.132 366.543 250.623 366.751 248.777 cv
366.749 248.659 366.753 248.551 366.749 248.429 cv
366.741 248.161 366.796 247.863 366.879 247.554 cv
366.884 247.505 366.888 247.461 366.894 247.411 cv
367.203 244.389 368.131 243.649 370.849 242.166 cv
373.572 240.687 372.026 238.588 370.914 236.492 cv
369.8 234.394 370.293 232.914 370.726 231.371 cv
371.161 229.829 369.578 229.517 368.836 230.379 cv
368.093 231.242 366.797 231.797 365.499 232.044 cv
364.199 232.292 361.54 231.859 360.983 231.797 cv
360.428 231.736 359.315 231.859 358.387 234.203 cv
357.459 236.548 356.657 237.536 355.605 238.523 cv
354.553 239.51 352.76 239.51 352.328 239.51 cv
351.897 239.51 351.462 239.632 350.721 239.818 cv
349.978 240.003 349.73 241.237 349.546 242.285 cv
349.361 243.335 349.422 243.211 348.433 244.938 cv
347.446 246.665 345.775 246.789 344.105 247.529 cv
342.436 248.269 342.718 249.14 342.04 248.337 cv
341.358 247.534 343.087 246.178 345.128 245.315 cv
347.171 244.45 347.355 242.722 347.48 242.106 cv
347.603 241.488 348.099 240.193 348.344 239.822 cv
348.591 239.453 349.335 238.281 350.448 237.725 cv
351.56 237.171 353.724 237.109 354.775 236.863 cv
355.827 236.615 356.631 234.148 356.753 233.716 cv
356.878 233.284 357.498 231.68 359.105 230.322 cv
360.71 228.965 362.751 229.459 364.112 229.89 cv
365.472 230.322 366.151 229.705 367.388 228.904 cv
368.625 228.102 369.862 226.559 371.839 227.485 cv
373.216 228.129 373.417 229.46 373.314 230.792 cv
373.663 230.75 374.792 230.736 375.851 230.584 cv
376.508 230.491 377.805 229.524 378.131 229.02 cv
378.352 228.676 378.455 227.481 378.579 226.236 cv
378.578 226.196 378.58 226.152 378.578 226.113 cv
378.551 225.644 378.616 225.186 378.754 224.743 cv
378.763 224.678 378.772 224.608 378.782 224.543 cv
cp
f
41.9082 265.18 mo
41.9077 265.184 41.9082 265.189 41.9082 265.193 cv
41.9101 265.192 41.9121 265.191 41.914 265.19 cv
41.9121 265.187 41.9101 265.183 41.9082 265.18 cv
cp
f
188.982 345.304 mo
187.772 345.5 187.194 343.939 185.958 345.584 cv
185.509 346.179 183.814 348.857 185.298 350.931 cv
184.556 350.783 183.783 350.7 183.486 351.588 cv
183.32 352.822 183.047 353.005 182.75 353.448 cv
183.196 351.672 183.402 349.498 184.145 347.724 cv
184.145 346.902 183.047 346.936 182.454 346.786 cv
185.051 346.49 185.923 343.852 186.207 343.447 cv
186.947 342.376 185.422 341.9 185.422 341.9 cv
186.905 341.606 188.183 340.976 189.577 339.679 cv
187.562 344.498 188.389 345.156 188.982 345.304 cv
cp
185.273 318.904 mo
184.976 318.904 184.976 318.611 184.976 318.459 cv
185.422 317.867 186.609 318.459 186.757 317.424 cv
185.463 315.335 184.235 311.65 180.672 312.685 cv
180.377 312.685 179.635 312.984 179.189 312.685 cv
180.228 312.538 180.525 311.65 181.266 311.058 cv
179.932 309.577 178.15 307.948 177.259 306.023 cv
178.002 306.764 178.743 307.505 179.932 307.505 cv
180.377 306.468 li
180.97 309.873 183.79 312.393 186.312 314.611 cv
187.795 315.055 187.499 312.984 188.538 312.685 cv
186.312 317.573 191.061 320.98 191.654 325.271 cv
191.654 325.569 191.504 325.716 191.357 325.716 cv
191.061 325.716 li
189.873 323.049 188.834 318.904 185.273 318.904 cv
cp
181.836 328.064 mo
180.427 328.079 175.479 327.984 175.479 327.984 cv
172.957 330.202 172.809 333.608 171.621 336.421 cv
171.621 336.718 171.176 336.718 171.027 336.718 cv
170.731 335.829 171.621 334.941 171.771 334.053 cv
172.066 332.128 173.328 328.753 172.85 328.229 cv
172.027 327.324 167.904 328.64 164.795 328.871 cv
162.865 329.908 160.64 329.757 159.306 331.388 cv
157.82 332.869 157.227 334.941 156.04 336.718 cv
155.891 337.312 155.594 338.198 155.001 338.198 cv
154.853 337.608 155.447 337.016 155.744 336.421 cv
156.188 335.091 157.516 332.669 157.021 332.01 cv
156.676 331.551 155.594 331.981 155.001 332.128 cv
154.557 333.167 153.221 332.426 152.776 333.312 cv
151.44 333.906 149.807 334.646 148.472 335.237 cv
146.693 336.125 145.208 338.049 143.873 339.679 cv
143.13 340.273 143.929 339.105 143.427 338.643 cv
142.925 338.182 142.092 339.382 141.053 339.236 cv
140.015 339.827 138.933 341.415 137.449 340.97 cv
137.449 340.674 138.531 340.273 138.827 340.124 cv
139.272 339.236 142.685 337.608 143.873 337.016 cv
145.653 336.275 147.138 335.237 149.066 334.496 cv
149.511 333.608 150.868 334.003 150.846 332.426 cv
150.838 331.847 149.511 331.834 149.214 331.388 cv
150.51 330.286 152.628 332.72 154.112 331.388 cv
156.633 330.202 159.157 329.166 161.828 328.277 cv
162.865 327.984 163.991 327.975 164.499 327.095 cv
164.936 326.335 163.905 326.354 164.055 325.763 cv
164.936 325.185 165.925 327.324 167.41 326.994 cv
170.678 326.27 174.59 326.798 178.299 326.65 cv
178.596 326.206 179.034 325.266 179.486 325.908 cv
180.085 326.761 182.157 327.393 183.937 327.537 cv
183.937 328.13 183.246 328.048 181.836 328.064 cv
cp
171.284 318.192 mo
170.872 317.78 li
170.872 317.78 169.965 316.795 169.14 316.549 cv
168.316 316.301 167.823 316.138 167.245 315.643 cv
166.667 315.151 166.09 314.655 165.679 314.409 cv
165.265 314.162 164.523 313.588 164.523 313.588 cv
162.627 313.668 li
162.627 313.668 161.721 314.079 161.392 314.246 cv
161.061 314.409 160.236 314.737 160.236 314.737 cv
159.165 315.151 li
159.165 315.151 158.506 314.985 158.754 314.737 cv
159 314.49 159.743 314.246 159.743 314.246 cv
160.567 313.668 li
160.567 313.668 161.474 313.256 161.721 313.093 cv
161.968 312.929 162.711 312.845 162.545 312.434 cv
162.382 312.023 161.886 311.364 161.474 311.037 cv
161.061 310.706 159 309.064 158.671 308.899 cv
158.343 308.734 157.929 308.32 157.187 307.994 cv
156.446 307.662 156.362 307.335 156.034 307.251 cv
155.704 307.17 155.456 306.429 154.302 306.677 cv
153.148 306.924 152.323 307.335 151.994 307.17 cv
151.663 307.005 151.251 306.842 151.911 306.594 cv
152.571 306.348 152.736 306.266 152.736 305.855 cv
152.736 305.444 152.571 305.279 152.159 305.032 cv
151.747 304.785 151.087 304.455 150.757 304.211 cv
150.427 303.963 146.049 302.151 146.049 301.904 cv
146.049 301.655 150.179 303.221 150.674 303.14 cv
151.169 303.059 151.087 302.151 151.087 302.151 cv
151.251 301.904 li
151.581 302.318 153.065 304.293 153.642 304.702 cv
154.22 305.112 156.034 306.018 156.527 306.429 cv
157.021 306.842 159.495 308.32 159.991 308.487 cv
160.484 308.651 161.061 309.064 161.061 309.064 cv
161.061 309.064 161.721 309.884 162.051 309.805 cv
162.382 309.722 162.711 309.475 162.711 309.145 cv
162.711 308.815 162.545 307.335 162.462 307.005 cv
162.382 306.677 162.627 306.761 162.627 306.761 cv
162.627 306.761 163.37 308.157 163.535 308.734 cv
163.7 309.311 164.277 311.201 164.853 311.941 cv
165.431 312.682 167.904 314.82 168.48 315.151 cv
169.059 315.478 169.47 315.973 169.47 315.973 cv
170.212 316.385 li
171.284 317.041 li
172.107 317.945 li
171.284 318.192 li
cp
144.614 321.326 mo
142.76 320.587 140.431 318.973 139.38 318.448 cv
137.895 317.707 136.453 318.517 135.414 318.071 cv
135.266 317.628 137.104 317.15 136.305 316.442 cv
135.506 315.733 128.431 309.041 127.846 308.892 cv
127.262 308.742 125.473 309.04 124.583 308.596 cv
124.73 308.005 127.343 308.495 126.065 306.67 cv
124.853 304.939 121.465 300.896 119.092 298.527 cv
117.311 297.935 115.827 298.083 113.897 298.083 cv
114.49 297.638 115.309 297.968 116.462 297.553 cv
117.158 297.306 117.014 296.9 117.162 296.75 cv
114.343 293.344 li
115.529 293.641 118.646 297.638 119.536 298.231 cv
121.614 300.154 124.558 303.777 125.531 303.969 cv
125.944 304.053 126.065 302.523 126.512 301.783 cv
126.66 301.783 li
126.807 303.412 126.768 305.697 127.509 306.52 cv
128.25 307.343 131.26 310.817 133.781 312.298 cv
134.227 311.853 li
134.105 307.097 li
135.284 306.997 134.351 313.511 137.195 315.406 cv
139.957 317.298 143.279 319.254 146.247 321.032 cv
146.693 321.921 147.582 321.772 148.174 322.07 cv
146.841 322.661 146.468 322.07 144.614 321.326 cv
cp
138.763 326.158 mo
138.635 326.604 137.309 326.459 137.392 326.415 cv
137.074 326.442 136.614 326.55 136.289 326.713 cv
135.917 326.898 136.227 326.898 135.299 327.082 cv
134.372 327.269 134.041 326.918 133.362 327.288 cv
132.681 327.659 132.703 327.515 132.27 328.07 cv
131.837 328.626 130.91 328.81 130.601 329.364 cv
130.291 329.92 129.901 330.476 129.652 330.166 cv
129.406 329.86 129.426 329.92 129.674 329.675 cv
129.92 329.428 130.477 328.689 130.539 328.503 cv
130.601 328.318 130.848 328.195 130.725 327.761 cv
130.601 327.329 130.848 327.329 130.291 327.146 cv
129.735 326.959 126.643 326.528 126.025 326.404 cv
125.407 326.281 124.727 326.032 124.233 325.973 cv
123.737 325.911 123.49 325.663 122.996 325.726 cv
122.501 325.788 122.44 325.663 121.883 326.032 cv
121.328 326.404 120.647 326.898 120.275 327.208 cv
119.904 327.515 119.842 327.454 119.534 327.947 cv
119.224 328.438 119.347 328.318 118.79 328.874 cv
118.236 329.428 118.111 329.487 117.741 329.92 cv
117.369 330.353 117.123 330.476 116.751 330.784 cv
116.38 331.094 116.256 331.401 115.885 331.526 cv
115.515 331.647 115.267 331.958 114.896 331.894 cv
114.524 331.833 114.524 331.647 114.649 331.464 cv
114.772 331.279 115.143 330.908 115.453 330.723 cv
115.761 330.536 116.504 330.415 116.69 330.107 cv
116.875 329.797 118.172 328.564 118.172 328.564 cv
118.172 328.564 119.656 326.837 119.72 326.344 cv
119.78 325.849 120.213 325.417 119.656 325.17 cv
119.102 324.924 117.926 324.801 117.308 324.676 cv
116.69 324.552 115.515 324.491 115.33 324.491 cv
115.143 324.491 114.402 324.183 113.659 324.12 cv
112.918 324.062 111.682 324.245 111.31 324.368 cv
110.939 324.491 110.321 324.552 109.702 324.801 cv
109.083 325.047 108.836 325.11 108.527 325.294 cv
108.218 325.48 107.971 325.542 107.786 325.601 cv
107.601 325.663 107.167 326.096 106.859 326.281 cv
106.55 326.467 106.302 327.023 106.055 327.082 cv
105.503 327.222 105.126 327.515 104.818 327.7 cv
104.509 327.885 103.953 328.07 103.768 327.885 cv
103.581 327.7 103.644 327.392 103.89 327.329 cv
104.138 327.269 105.004 326.713 105.189 326.59 cv
105.375 326.467 106.116 325.726 106.487 325.48 cv
106.673 325.356 106.735 325.356 106.426 325.047 cv
106.116 324.738 106.487 324.863 105.498 324.676 cv
104.509 324.491 96.6572 324.552 96.6572 324.552 cv
96.6572 324.552 96.5332 324.368 96.7807 324.245 cv
97.0268 324.12 97.5219 324.12 97.8315 324.12 cv
98.1406 324.12 101.458 324.08 101.954 324.08 cv
102.448 324.08 103.768 324.12 104.077 323.999 cv
104.385 323.874 105.622 323.504 105.993 323.383 cv
106.364 323.256 106.735 323.137 106.796 322.828 cv
106.859 322.517 106.55 322.333 106.55 321.963 cv
106.55 321.963 106.92 321.84 107.167 321.84 cv
107.415 321.84 107.601 322.271 108.218 322.581 cv
108.836 322.889 109.579 323.072 110.134 323.072 cv
110.692 323.072 115.02 323.567 115.885 323.256 cv
116.751 322.948 116.812 323.195 116.812 322.702 cv
116.812 322.209 115.885 320.051 116.009 319.556 cv
116.504 319.741 li
116.504 319.741 117.7 322.106 118.441 322.846 cv
119.183 323.586 119.347 323.504 119.842 323.69 cv
120.337 323.874 120.893 323.999 121.328 323.999 cv
121.759 323.999 122.377 324.12 122.934 324.306 cv
123.49 324.491 124.294 324.676 124.479 324.491 cv
124.665 324.306 124.727 323.814 124.603 323.383 cv
124.479 322.948 123.613 321.036 123.737 319.618 cv
123.737 319.618 125.737 323.609 126.355 324.161 cv
126.973 324.718 126.924 324.977 127.509 325.294 cv
128.19 325.663 128.374 325.788 131.529 325.601 cv
134.614 325.422 135.608 325.726 135.917 325.542 cv
136.227 325.356 136.989 325.21 137.237 325.15 cv
137.484 325.089 138.329 325.11 138.638 325.294 cv
138.947 325.48 138.886 325.726 138.763 326.158 cv
cp
198.821 326.798 mo
199.119 325.318 198.55 324.066 197.957 322.881 cv
199.737 323.029 199.568 326.329 200.75 325.908 cv
201.171 325.759 207.435 320.497 205.349 318.212 cv
205.349 317.768 205.054 317.471 205.054 317.026 cv
205.795 317.618 206.389 319.182 207.023 319.015 cv
207.66 318.85 210.841 313.919 213.662 311.993 cv
214.698 311.105 215.441 310.215 216.777 309.771 cv
217.073 310.511 215.791 310.6 216.183 311.105 cv
216.834 311.941 220.641 310.958 220.635 311.696 cv
220.627 312.434 218.722 311.927 218.072 312.353 cv
217.42 312.779 214.956 312.682 213.62 313.423 cv
211.395 315.051 208.589 319.216 208.466 319.694 cv
208.344 320.167 208.146 319.957 208.615 320.432 cv
209.087 320.908 210.323 320.662 211.311 321.071 cv
212.219 321.401 li
213.207 321.237 li
213.951 321.68 214.105 320.875 214.698 321.763 cv
214.698 322.21 li
213.511 322.356 212.176 322.21 211.286 321.763 cv
209.505 321.912 207.469 320.857 206.284 322.636 cv
205.094 324.265 202.207 326.536 201.936 327.095 cv
201.665 327.653 203.274 328.871 204.016 329.757 cv
204.408 329.847 204.408 330.014 205.5 330.796 cv
203.925 330.935 203.024 329.497 201.665 328.805 cv
200.782 328.352 199.587 328.255 198.286 328.97 cv
197.271 329.526 195.91 330.073 195.407 329.317 cv
194.905 328.557 198.04 328.229 198.821 326.798 cv
cp
216.955 329.544 mo
217.401 329.544 224.786 327.734 225.942 327.487 cv
227.807 327.087 231.793 326.911 234.68 326.664 cv
236.217 326.533 236.719 325.544 237.152 324.774 cv
238.572 322.245 238.954 321.558 239.627 321.895 cv
239.956 322.059 239.138 323.096 238.718 323.62 cv
238.3 324.147 237.646 326.254 237.646 326.254 cv
237.82 326.597 238.954 326.814 240.336 327.002 cv
241.592 327.175 243.933 327.364 245.602 327.487 cv
246.468 327.487 247.254 327.904 248.757 327.983 cv
250.867 328.088 251.536 327.92 253.978 325.763 cv
254.816 325.143 254.868 324.726 255.755 325.022 cv
255.949 325.431 254.571 325.763 254.271 326.354 cv
253.532 326.947 252.552 327.719 252.641 328.425 cv
252.731 329.133 257.727 330.073 259.765 330.796 cv
261.801 331.518 262.879 331.684 263.917 330.647 cv
264.364 330.5 265.295 330.32 265.401 330.796 cv
265.512 331.273 263.087 330.909 264.275 332.094 cv
264.275 332.24 269.327 334.086 269.473 334.086 cv
268.319 334.578 261.633 332.228 261.101 332.572 cv
260.566 332.916 261.694 333.906 261.842 334.496 cv
262.583 334.496 262.879 335.237 263.177 335.683 cv
262.297 336.125 262.709 335.796 260.566 334.15 cv
258.421 332.505 258.504 331.273 255.62 331.025 cv
253.837 330.286 252.898 330.286 250.261 329.626 cv
248.778 329.463 247.606 329.264 247.457 329.895 cv
247.348 330.354 247.855 331.895 248.632 333.226 cv
249.627 334.928 250.943 336.44 250.712 336.57 cv
250.3 336.804 250.12 336.57 249.822 336.57 cv
247.596 334.349 245.799 329.284 244.736 328.887 cv
243.675 328.49 241.809 328.425 241.512 328.277 cv
238.545 327.833 236.411 328.064 233.031 328.064 cv
231.793 328.391 230.794 328.509 230.64 329.051 cv
230.483 329.591 230.756 333.081 232.536 334.561 cv
232.536 334.858 233.691 335.384 232.906 335.977 cv
232.256 336.471 230.679 333.018 229.643 331.388 cv
229.197 330.349 228.692 329.35 227.562 328.871 cv
226.435 328.391 222.642 329.709 220.499 329.626 cv
219.089 329.57 216.161 331.077 215.693 330.349 cv
215.224 329.626 216.51 329.691 216.955 329.544 cv
cp
236.988 359.155 mo
236.341 358.545 235.667 357.675 236.915 355.522 cv
239.282 351.42 244.375 353.07 246.303 353.07 cv
248.282 353.07 251.575 351.972 251.329 351.563 cv
249.679 348.82 243.398 352.32 238.797 348.188 cv
237.972 347.447 233.9 345.348 233.323 345.099 cv
232.747 344.854 229.4 343.088 228.904 342.76 cv
228.807 342.695 228.076 342.438 227.823 342.307 cv
227.094 341.959 226.9 341.759 226.16 341.398 cv
223.987 340.388 221.244 339.19 220.577 339.016 cv
215.941 337.433 li
214.936 337.12 211.38 337.076 210.953 336.674 cv
210.528 336.275 211.018 334.15 212.256 333.49 cv
213.081 333.053 214.292 332.505 216.131 331.764 cv
217.961 331.028 219.138 331.426 220.996 331.684 cv
223.385 332.01 224.471 333.198 226.524 334.496 cv
228.579 335.796 231.793 339.662 234.843 337.769 cv
237.894 335.876 239.079 334.598 241.661 335.237 cv
244.242 335.876 249.088 339.746 249.674 339.827 cv
250.261 339.911 251.396 340.274 252.641 339.679 cv
253.887 339.086 254.299 336.453 256.946 335.977 cv
260.093 335.412 261.419 337.592 263.177 338.049 cv
264.933 338.51 266.846 336.637 268.817 336.421 cv
270.788 336.207 273.151 338.263 273.119 336.57 cv
273.095 335.384 270.788 334.234 270.3 332.275 cv
269.966 330.941 270.375 328.311 268.965 327.984 cv
267.177 327.566 262.297 329.338 260.07 326.335 cv
258.452 324.153 260.318 322.717 257.984 321.763 cv
256.139 321.009 255.314 322.654 253.83 322.654 cv
252.731 323.458 251.626 323.382 250.712 323.687 cv
250.175 323.871 248.612 324.113 246.113 323.245 cv
241.224 321.54 243.417 318.85 240.285 318.358 cv
238.545 318.082 235.997 320.578 235.255 321.316 cv
233.179 322.947 230.163 324.182 228.044 324.713 cv
227.054 324.957 222.726 326.748 221.037 327.095 cv
219.345 327.443 219.909 325.92 219.099 326.418 cv
218.027 327.076 217.337 327.251 216.131 327.653 cv
214.645 328.148 212.091 327.818 211.389 329.463 cv
210.499 331.557 212.909 332.266 209.207 335.549 cv
208.461 336.207 206.657 336.692 204.093 336.288 cv
201.937 335.95 199.97 334.656 197.747 333.49 cv
194.993 332.048 193.707 331.847 191.654 332.426 cv
191.504 332.426 190.987 333.081 190.245 332.588 cv
189.8 332.144 190.08 331.684 190.657 331.436 cv
191.234 331.19 191.892 330.862 193.624 330.862 cv
194.45 330.862 195.59 331.157 197.252 331.847 cv
199.231 332.669 206.485 335.796 208.57 332.275 cv
209.312 330.202 207.886 327.719 210.646 326.206 cv
213.41 324.693 214.653 325.169 216.88 324.726 cv
217.623 324.282 218.171 324.496 218.512 322.947 cv
218.852 321.401 215.801 318.85 218.215 316.434 cv
219.457 315.192 220.833 314.595 221.933 313.902 cv
222.508 313.456 223.045 312.979 223.422 312.513 cv
223.526 312.349 223.629 312.187 223.705 311.993 cv
224.248 310.607 222.075 309.03 222.962 307.403 cv
223.854 306.219 225.775 304.671 225.487 303.698 cv
225.198 302.729 222.23 304.042 221.183 304.737 cv
219.253 305.478 217.664 305.737 215.545 304.144 cv
214.318 303.221 213.021 305.33 212.131 306.367 cv
211.241 308.587 208.776 311.847 206.641 311.399 cv
204.508 310.953 203.519 309.64 202.528 310.46 cv
198.893 313.482 203.104 317.452 197.995 318.768 cv
196.237 319.222 194.696 318.439 194.367 321.071 cv
194.088 323.3 195.356 327.57 192.692 328.722 cv
192.1 328.574 li
194.036 326.335 191.316 322.551 192.555 319.426 cv
192.91 318.527 194.386 317.602 194.62 317.322 cv
195.687 316.054 191.73 312.845 191.811 309.556 cv
191.836 308.589 190.409 307.583 189.725 307.549 cv
187.937 307.469 186.535 309.475 184.531 307.848 cv
182.768 306.415 182.578 303.14 180.821 303.107 cv
179.748 303.088 178.531 303.482 177.468 303.14 cv
176.103 302.7 175.406 301.329 174.582 301.739 cv
173.901 302.082 174.911 304.455 173.55 306.661 cv
172.56 308.263 174.902 310.546 174.911 311.613 cv
174.921 312.682 173.923 314.409 174.59 314.804 cv
176.049 315.672 177.797 316.63 178.291 317.618 cv
178.646 318.325 178.15 318.36 178.15 318.36 cv
177.409 317.026 176.643 317.452 175.159 316.795 cv
173.824 316.647 172.363 316.138 171.621 314.954 cv
170.872 312.763 174.004 311.364 171.176 309.475 cv
170.435 309.475 170.038 310.068 169.247 309.624 cv
165.76 307.662 164.944 303.997 161.975 301.626 cv
161.235 301.034 160.153 300.542 159.453 300.445 cv
158.754 300.343 157.352 301.495 156.04 301.626 cv
152.653 301.578 150.427 297.136 147.582 297.036 cv
144.821 296.942 144.409 299.109 141.771 297.793 cv
140.138 297.793 139.016 297.062 138.144 296.805 cv
136.743 296.396 136.495 296.889 136.577 297.3 cv
136.66 297.711 139.84 298.503 140.31 300.737 cv
140.782 302.978 140.153 304.195 141.498 304.737 cv
142.843 305.279 144.904 306.163 144.904 308.487 cv
144.904 310.049 146.488 310.166 147.79 310.46 cv
149.309 310.806 150.767 310.849 151.416 312.601 cv
152.24 314.82 149.049 318.092 151.83 318.688 cv
154.138 319.18 155.484 319.374 155.001 320.284 cv
154.714 320.825 154.054 320.908 153.23 320.743 cv
152.043 320.595 151.589 320.875 150.551 319.987 cv
149.511 319.839 148.77 319.248 148.325 318.36 cv
147.047 315.396 149.355 314.079 148.448 313.01 cv
147.483 311.87 143.839 312.698 142.925 310.295 cv
142.01 307.895 141.234 307.519 139.957 306.761 cv
138.68 306.003 137.368 305.708 137.343 303.85 cv
137.319 301.989 138.144 301.167 136.001 300.015 cv
134.666 299.274 133.691 299.028 133.115 298.204 cv
132.274 297.006 132.547 296.274 133.024 295.729 cv
133.022 295.727 133.02 295.725 133.018 295.724 cv
133.021 295.729 li
132.389 296.017 130.673 294.159 129.627 293.633 cv
128.582 293.107 125.819 294.338 123.985 292.816 cv
122.15 291.295 120.153 287.736 118.605 289.176 cv
117.679 290.04 117.04 290.308 116.133 290.308 cv
115.54 290.158 114.788 290.127 113.659 289.239 cv
112.531 288.348 111.524 287.562 111.524 287.562 cv
110.782 287.415 110.632 287.858 110.632 288.45 cv
112.011 290.638 112.423 292.117 111.928 293.515 cv
111.328 295.215 110.197 296.067 110.857 297.3 cv
111.483 298.472 113.684 299.488 114.978 300.18 cv
116.273 300.868 117.978 302.009 118.524 303.879 cv
119.265 306.429 117.29 307.762 118.524 309.226 cv
120.255 311.283 125.118 311.489 126.397 312.249 cv
127.674 313.01 128.842 314.33 128.588 316.138 cv
128.334 317.945 126.828 319.874 129.054 320.763 cv
130.039 321.181 131.384 321.316 132.95 321.443 cv
134.517 321.566 135.299 321.483 137.217 321.811 cv
139.134 322.14 142.165 323.592 142.092 324.428 cv
142.019 325.266 140.247 324.713 139.318 324.279 cv
136.845 323.541 130.785 324.836 128.442 323.245 cv
127.238 322.431 126.519 321.752 126.215 320.875 cv
125.585 319.077 126.956 315.4 124.286 314.36 cv
122.48 313.751 120.131 312.585 117.756 312.287 cv
117.162 312.732 118.26 312.732 118.111 313.175 cv
118.26 313.469 118.646 313.768 118.498 314.212 cv
116.569 314.657 115.233 313.177 113.304 313.323 cv
110.336 313.622 110.444 317.369 105.745 317.061 cv
102.599 316.856 100.366 313.237 98.1684 316.581 cv
97.7236 318.506 98.0781 321.071 96.0908 322.21 cv
92.3081 323.541 89.497 320.894 87.8642 324.153 cv
88.6152 326.329 91.0595 325.912 92.9887 326.504 cv
97.6245 328.973 95.3613 330.364 97.6455 332.3 cv
99.9306 334.237 102.054 331.687 105.292 332.426 cv
108.527 333.164 109.311 338.504 114.343 336.125 cv
116.957 334.892 118.111 333.822 121.45 335.015 cv
122.068 335.219 122.504 335.683 123.394 336.125 cv
124.521 337.137 127.644 337.683 129.08 337.945 cv
129.005 337.156 128.898 336.311 129.337 335.434 cv
130.402 333.312 134.185 332.772 135.018 332.736 cv
135.852 332.701 137.656 331.255 137.796 330.548 cv
138.457 327.204 139.464 326.717 141.505 325.811 cv
144.993 324.264 150.861 326.141 153.08 325.368 cv
155.299 324.595 153.912 321.374 156.047 319.445 cv
158.183 317.521 160.341 317.948 161.983 318.556 cv
163.624 319.163 166.459 321.374 167.473 321.665 cv
168.489 321.961 169.229 322.061 169.848 321.52 cv
170.466 320.974 171.653 318.555 173.582 318.703 cv
180.234 318.956 186.145 325.814 187.21 326.109 cv
188.273 326.403 189.639 327.835 189.288 328.477 cv
188.933 329.114 188.544 329.219 188.248 328.774 cv
186.615 327.736 181.893 324.527 181.595 323.933 cv
179.866 322.126 176.733 319.575 174.259 321.302 cv
172.658 322.423 170.549 325.91 167.582 324.511 cv
164.681 323.144 162.922 321.52 162.305 321.218 cv
161.688 320.925 160.318 320.497 159.42 320.48 cv
158.522 320.465 157.646 320.631 157.194 321.55 cv
156.742 322.47 157.68 325.368 156.047 326.256 cv
154.563 328.774 151.596 327.589 149.073 327.886 cv
146.55 328.179 141.309 326.989 140.912 329.365 cv
140.46 332.077 141.317 333.369 138.481 334.629 cv
136.254 335.616 134.531 334.695 132.602 336.028 cv
131.266 337.36 132.379 339.963 131.266 340.914 cv
131.05 341.1 130.679 341.32 130.225 341.562 cv
129.51 342.004 128.596 342.428 127.559 342.917 cv
126.191 343.636 124.97 344.398 124.886 345.059 cv
125.45 346.628 127.105 346.063 127.105 346.063 cv
127.105 346.063 133.693 343.312 135.57 345.8 cv
137.448 348.287 136.757 347.43 137.499 347.576 cv
141.358 347.132 142.948 340.34 147.144 342.542 cv
151.341 344.745 151.075 345.194 153.227 344.024 cv
155.382 342.854 155.751 342.395 156.938 341.361 cv
157.383 340.768 159.667 338.907 162.8 338.412 cv
164.227 338.188 165.295 338.68 166.238 339.281 cv
166.853 339.641 166.238 339.281 167.522 340.147 cv
168.469 340.767 169.395 341.183 170.589 340.618 cv
173.113 338.842 173.805 335.387 176.813 334.136 cv
179.824 332.882 178.793 334.711 181.513 332.323 cv
183.274 330.783 185.636 328.542 187.21 329.659 cv
188.373 330.49 185.43 330.403 184.687 331.439 cv
184.39 332.03 184.241 332.622 184.984 332.92 cv
187.061 333.66 189.731 332.761 191.365 333.51 cv
192.726 334.136 190.696 334.747 190.473 335.879 cv
190.252 337.014 189.574 337.626 188.842 338.101 cv
188.109 338.577 183.74 338.412 182.338 339.07 cv
181.744 339.348 180.855 340.039 180.936 340.715 cv
181.267 343.43 179.535 345.239 178.546 345.323 cv
177.498 345.408 177.262 345.819 176.81 346.488 cv
176.785 347.187 177.03 348.028 177.787 348.747 cv
179.668 350.535 178.241 351.856 177.197 353.25 cv
175.785 355.129 179.312 355.25 180.018 356.918 cv
180.351 357.705 180.686 358.234 181.031 358.559 cv
181.224 358.58 181.412 358.572 181.571 358.533 cv
183.055 357.794 183.5 355.868 185.132 355.424 cv
186.319 355.127 188.322 355.196 188.544 353.796 cv
188.769 352.395 188.109 349.929 190.177 348.908 cv
191.893 348.064 192.849 349.057 193.294 347.576 cv
193.221 344.828 190.95 344.2 191.217 341.064 cv
191.406 338.823 192.937 337.744 193.468 336.602 cv
193.745 336.002 193.282 335.074 193.385 334.794 cv
193.715 333.888 194.628 334.695 195.371 334.842 cv
196.075 334.972 197.163 335.237 198.825 335.778 cv
199.577 336.024 200.898 336.322 201.545 336.602 cv
203.278 337.344 205.181 337.951 207.069 338.658 cv
208.957 339.365 219.783 344.203 225.866 348.2 cv
226.015 348.28 227.656 349.182 228.921 350.099 cv
231.97 353.151 234.084 357.022 234.171 357.168 cv
234.662 357.798 235.333 358.454 235.978 358.962 cv
236.508 359.258 237.106 359.492 237.748 359.657 cv
237.477 359.529 237.217 359.372 236.988 359.155 cv
cp
f
55.851 243.885 mo
55.999 239.589 55.0835 232.83 54.3662 231.298 cv
53.6508 229.767 52.1411 228.931 50.8056 228.486 cv
51.6958 227.745 53.4677 228.981 53.4756 227.893 cv
53.4853 226.806 52.6093 220.163 52.1411 218.714 cv
51.6723 217.265 49.3637 216.113 48.58 215.752 cv
49.1157 214.633 51.1772 217.182 52.1411 215.752 cv
51.8457 212.051 52.4448 205.389 52.1411 204.501 cv
51.8369 203.61 51.3418 202.294 50.3603 202.279 cv
50.3603 201.834 li
51.4243 201.306 52.0014 203.117 52.6611 201.883 cv
53.6508 198.262 53.708 197.951 53.9223 197.096 cv
53.6245 200.652 53.6245 204.501 53.0312 208.052 cv
53.1797 209.238 52.9394 211.412 53.6245 211.458 cv
54.3095 211.507 54.812 210.57 55.4048 210.718 cv
54.9599 212.495 52.5859 213.532 53.1797 215.752 cv
53.7744 218.862 54.3252 224.407 54.812 224.783 cv
55.2988 225.16 55.5537 223.896 56.2959 224.192 cv
56.5927 224.783 56.0942 225.039 55.5468 225.654 cv
54.8872 226.395 55.1333 228.205 55.3813 230.096 cv
56.2715 234.687 57.0376 238.111 57.0376 242.994 cv
56.7412 243.292 56.7412 244.18 55.851 243.885 cv
cp
36.1064 231.828 mo
33.8408 230.806 32.3984 228.867 30.1718 227.979 cv
28.9848 227.979 27.9458 228.423 26.7588 228.274 cv
26.7588 227.829 27.2031 227.829 27.5014 227.683 cv
28.3999 226.612 li
22.604 220.427 li
21.417 219.835 19.7837 219.835 18.4497 219.688 cv
18.4497 219.243 li
19.1909 219.094 20.2299 219.094 20.8232 218.502 cv
20.6508 217.071 15.2202 211.36 14.3296 209.584 cv
14.7739 209.879 18.8388 214.043 19.1909 214.948 cv
20.3784 215.689 li
20.8989 215.26 20.9712 214.06 21.2685 213.321 cv
22.4643 213.286 20.8159 217.153 22.604 218.354 cv
22.604 218.354 27.6489 224.425 31.062 226.794 cv
31.6557 226.794 li
32.3984 223.981 li
33.3462 223.899 32.2578 227.567 33.5937 228.749 cv
34.7475 229.901 37.1386 231.711 37.7392 233.012 cv
37.3042 233.44 36.5537 232.124 36.1064 231.828 cv
cp
38.3676 177.849 mo
39.1064 178.067 40.1689 178.527 40.3354 178.653 cv
40.7793 178.993 41.1655 179.294 41.3603 179.262 cv
42.3496 179.096 41.6084 177.534 42.5219 176.367 cv
42.6709 174.739 44.0068 173.111 42.9673 171.483 cv
41.0381 168.52 li
41.4438 167.499 43.2973 170.528 44.0805 170.296 cv
44.8657 170.064 45.0459 168.669 45.6401 167.779 cv
45.936 166.004 47.7163 163.783 45.936 162.154 cv
46.0835 161.709 45.3427 161.561 45.4902 161.267 cv
46.0835 161.561 47.0283 162.373 47.5688 162.006 cv
47.9555 161.741 49.3486 157.712 50.0908 155.639 cv
50.7588 155.654 49.6455 157.268 49.7939 158.156 cv
48.458 162.154 46.9751 166.004 45.7876 170.001 cv
46.8252 171.186 47.8647 169.557 49.1992 170.001 cv
48.9038 170.741 47.8647 170.298 47.5688 171.186 cv
44.1548 171.483 44.4511 175.33 43.4135 177.7 cv
43.2641 179.773 41.9126 183.113 42.2685 183.951 cv
42.6235 184.788 43.561 184.067 44.3037 184.216 cv
44.3037 184.808 43.2358 185.159 42.103 186.089 cv
40.7016 187.24 41.3603 191.682 40.7846 194.397 cv
40.4453 194.579 li
40.4453 190.285 39.9995 185.548 41.0381 181.402 cv
40.9326 180.748 40.4902 180.182 39.7954 179.426 cv
39.6611 179.28 39.27 178.906 39.1406 178.764 cv
38.8427 178.44 38.146 178.44 38.3676 177.849 cv
cp
23.6782 193.099 mo
22.5664 190.614 21.7485 189.989 19.8193 189.694 cv
18.9292 189.249 17.7417 189.842 16.8515 189.249 cv
17.6191 188.558 20.5044 189.133 20.6689 188.31 cv
20.8178 187.574 17.5937 183.327 17.1479 180.069 cv
16.2173 177.946 li
14.5849 177.65 13.4375 176.516 11.8061 176.516 cv
13.2495 175.972 15.334 176.762 15.4746 175.972 cv
15.6167 175.18 14.3877 170.164 13.497 167.499 cv
12.7548 167.056 12.5488 166.448 11.6572 166.3 cv
11.5185 165.772 13.2495 166.595 13.4375 165.116 cv
13.4375 165.116 13.83 165.335 14.1562 166.595 cv
14.6958 168.677 15.8037 173.423 16.7119 175.396 cv
17.4546 177.469 18.0415 180.14 18.7807 180.217 cv
19.8452 180.332 20.7026 177.914 21.7417 176.876 cv
21.8891 177.32 21.1308 178.669 20.8335 179.262 cv
19.7944 180.299 19.8452 182.223 19.8452 182.8 cv
19.8452 183.374 21.4272 186.961 23.06 189.627 cv
23.5053 190.07 24.5175 192.425 25.2041 192.505 cv
25.8881 192.586 26.7934 189.842 28.1289 189.102 cv
27.5341 191.174 25.7548 192.654 26.3486 195.024 cv
27.5341 197.541 30.9257 203.655 31.2221 204.432 cv
31.7524 205.833 32.5547 207.419 32.581 208.645 cv
29.9853 203.692 26.851 198.345 23.6782 193.099 cv
cp
27.5356 163.798 mo
26.9419 163.353 26.9809 162.302 26.6845 161.561 cv
24.7324 156.478 22.7212 151.213 20.9399 146.03 cv
20.1972 144.994 18.8203 144.09 17.4848 143.795 cv
17.4848 143.795 16.2978 143.499 16.1499 142.906 cv
16.8178 142.658 18.8203 144.09 19.5625 142.906 cv
19.5381 141.671 18.6313 140.027 18.2275 136.983 cv
17.2295 134.926 17.9301 130.469 15.2588 128.544 cv
15.2588 128.248 li
15.4077 128.099 16.0263 127.918 16.3227 127.77 cv
16.5717 125.137 15.7041 122.77 16.0009 120.104 cv
16.3603 122.546 16.7924 125.026 17.2295 127.44 cv
17.5464 129.191 17.8169 131.058 18.3022 132.128 cv
18.5019 132.902 18.5771 134.011 18.8203 134.763 cv
19.2656 135.207 li
20.1557 134.91 20.3462 134.268 20.9399 133.527 cv
21.6816 133.363 li
20.5283 135.255 19.6362 136.541 19.7031 138.133 cv
19.7793 139.948 20.7509 141.649 21.1948 143.499 cv
21.6396 144.683 21.7881 146.015 22.6782 146.755 cv
24.0146 145.868 24.4594 144.535 25.646 143.499 cv
26.0908 143.499 25.9438 142.758 26.3886 142.906 cv
25.0522 145.868 22.2583 148.334 24.4013 152.117 cv
25.145 153.301 24.9048 155.195 26.0908 156.084 cv
26.9809 155.639 27.5752 154.454 28.1689 154.011 cv
27.2773 155.342 26.9809 156.824 26.3886 158.304 cv
27.5356 163.798 li
cp
34.5097 142.165 mo
34.0717 138.525 35.6557 133.805 34.7666 131.635 cv
34.2627 130.409 32.8769 129.135 31.8393 127.804 cv
31.8393 127.656 32.1362 127.804 32.2846 127.804 cv
33.0258 128.691 33.915 129.877 35.2509 130.174 cv
36.1416 129.729 35.9946 128.544 36.29 127.804 cv
37.4033 126.206 37.7324 124.232 36.8276 122.424 cv
36.29 120.844 li
37.1567 120.613 37.6523 123.164 38.813 122.621 cv
40.5356 120.12 42.0771 117.44 44.0068 114.922 cv
44.4511 113.739 44.0068 112.11 43.8584 110.778 cv
44.4511 111.369 44.6001 112.11 45.4902 112.258 cv
46.5298 111.517 46.9751 110.333 47.7163 109.445 cv
48.1616 108.853 48.6064 108.111 49.0512 107.668 cv
48.9038 108.555 48.1616 109.296 47.7163 109.889 cv
47.5688 110.333 46.9174 111.597 46.4712 111.894 cv
44.8398 114.855 43.2641 116.995 41.9292 120.104 cv
41.9292 120.4 41.8554 120.778 41.8554 120.778 cv
42.5966 120.925 43.561 120.993 44.0068 120.696 cv
44.1548 120.696 46.3818 120.453 46.3818 120.453 cv
42.958 121.639 40.2959 123.066 40.1479 123.51 cv
38.5166 126.47 36.7353 129.432 36.5874 132.985 cv
37.2387 133.609 38.4931 132.82 39.3828 133.116 cv
39.852 133.281 li
38.9619 133.874 37.3291 133.874 36.5874 134.763 cv
35.1035 136.688 35.3999 142.906 34.9546 143.203 cv
34.3608 143.35 34.6577 142.463 34.5097 142.165 cv
cp
28.7685 117.981 mo
28.7387 116.893 28.8549 116.504 28.7685 115.451 cv
28.1269 110.966 27.8408 107.062 28.2124 102.497 cv
27.5327 101.234 25.6059 98.9309 25.6059 98.9309 cv
25.8711 98.6286 26.3569 98.4855 26.7285 99.3498 cv
26.7285 99.3498 28.3354 100.955 28.5732 99.6726 cv
28.7949 98.4772 30.1421 94.4094 30.2524 94.1677 cv
30.3623 93.926 30.7436 91.82 30.8701 91.0832 cv
30.2524 88.4919 28.7006 87.6311 29.167 87.3835 cv
29.6347 87.135 31.084 88.9016 31.6132 88.5534 cv
32.0605 88.26 33.0468 85.5793 33.6928 84.0939 cv
33.7505 83.9592 35.7099 80.1066 35.6972 80.4235 cv
35.6577 81.3898 34.5009 83.7048 33.9004 85.531 cv
33.8374 85.7233 33.5468 86.2907 33.4863 86.4836 cv
32.7993 88.6086 30.4131 95.9455 31.1801 96.0803 cv
32.2319 96.2663 33.2817 95.0319 33.915 95.8225 cv
32.8496 96.0178 32.581 96.7106 31.9858 97.0065 cv
28.7226 98.9309 29.832 103.595 29.3862 107 cv
29.2387 107.74 29.6347 108.727 29.9433 108.79 cv
30.2197 108.844 30.8701 108.233 31.4887 108.11 cv
31.7949 108.05 31.8032 107.767 31.9858 107.668 cv
32.5405 107.371 33.1748 107.668 33.1748 107.668 cv
32.8769 108.259 30.4067 110.538 30.0048 111.071 cv
29.0776 112.305 30.0048 117.612 29.5722 118.043 cv
28.7368 118.876 28.7685 117.981 28.7685 117.981 cv
cp
43.4135 96.1193 mo
44.4511 93.8972 45.0459 91.5295 46.3803 89.4558 cv
46.5298 87.5305 45.2783 86.2712 44.9668 84.3591 cv
45.8579 85.0998 46.5756 86.0251 47.0078 86.7653 cv
47.5639 87.0729 li
48.7514 85.5925 51.2807 83.1769 51.2778 82.3488 cv
51.2744 81.5202 50.832 78.9431 50.832 78.9431 cv
51.5747 79.2404 52.3466 81.4992 53.206 80.7199 cv
53.685 80.2873 57.3623 77.0187 59.2915 74.7985 cv
59.7363 73.3181 59.5874 71.3937 58.9936 69.9113 cv
60.2387 69.4909 60.4253 72.7604 61.1045 72.2058 cv
62.0346 71.4465 62.0009 71.7814 62.5883 71.0949 cv
62.8886 70.7453 63.6753 70.0095 63.9497 69.614 cv
64.3173 69.0808 65.0615 68.072 65.0786 67.6906 cv
65.7426 67.5173 li
65.5273 68.1608 65.1386 68.7136 64.7924 69.2092 cv
64.5405 69.5681 64.3203 69.7341 64.1972 70.0471 cv
64.0986 70.1799 63.8608 70.5305 63.7641 70.6633 cv
62.6743 72.1379 61.7231 73.8713 60.6255 75.0935 cv
61.5385 75.3518 61.9707 75.5363 63.207 75.5978 cv
63.1455 75.9685 li
59.4575 76.0773 56.1596 79.1144 56.1748 79.8312 cv
56.1948 80.781 57.519 81.027 58.8452 81.4606 cv
55.1699 81.3972 53.8711 81.8293 51.7231 84.57 cv
48.1616 88.7155 45.1528 93.6115 43.4135 98.34 cv
43.2983 98.4855 43.1132 98.6726 42.6801 98.9201 cv
42.2348 97.8815 43.1167 97.0065 43.4135 96.1193 cv
cp
59.956 92.5471 mo
59.3618 92.2512 59.5107 91.362 58.916 90.7707 cv
60.0996 90.3098 60.706 93.0153 61.5717 93.2248 cv
62.0756 93.3469 63.6753 90.6955 64.2314 90.572 cv
64.353 90.3845 64.2929 90.1892 64.4072 90.03 cv
65.4467 89.1428 65.1489 87.6623 65.1489 86.3288 cv
65.4467 86.7741 65.7436 87.3654 66.3364 87.2175 cv
66.4838 87.07 66.7827 87.07 67.0781 87.07 cv
66.4838 88.1057 65.875 88.9558 66.0229 90.1398 cv
65.7153 90.7565 64.936 90.9045 64.5395 91.3117 cv
63.2417 92.9782 60.9541 96.1237 61.1396 96.6789 cv
61.3247 97.2355 62.0322 97.2858 62.4775 97.4333 cv
61.5888 98.0256 59.6596 97.4333 58.916 98.6174 cv
58.6196 98.6174 58.3232 98.7663 58.1753 98.4699 cv
59.0659 96.8415 61.2905 94.9172 59.956 92.5471 cv
cp
59.4868 233.412 mo
59.4502 233.356 59.416 233.297 59.3838 233.238 cv
59.3828 233.25 59.3823 233.257 59.3813 233.27 cv
59.372 233.455 58.0175 230.48 58.2617 228.368 cv
58.5083 226.23 61.7905 221.907 60.1582 220.472 cv
58.0962 218.662 56.9477 218.253 58.5083 213.893 cv
58.7046 213.343 59.6714 212.087 60.3213 210.684 cv
61.0327 209.151 61.3989 207.458 60.7739 206.72 cv
58.6128 204.167 58.3437 201.883 59.2915 198.873 cv
60.3281 196.948 59.5146 195.535 57.8066 193.544 cv
55.7876 191.189 59.25 185.842 55.2837 188.064 cv
53.9482 189.842 51.1054 188.591 50.5122 191.107 cv
50.2148 193.032 49.6455 195.321 47.5688 195.912 cv
46.2256 196.206 44.6001 195.912 44.1548 197.393 cv
43.1167 201.687 48.3613 204.718 46.5298 208.201 cv
45.4824 210.19 43.083 209.813 42.103 210.684 cv
41.123 211.554 41.0381 213.678 41.6318 215.012 cv
42.9673 218.269 47.0141 218.451 46.0835 224.192 cv
45.1528 229.932 45.375 228.318 46.2334 229.67 cv
49.0512 232.484 52.8193 234.374 52.0195 238.998 cv
51.8715 239.294 51.4272 239.443 51.2778 239.294 cv
50.5356 237.961 50.5356 236.481 49.498 235.296 cv
48.0385 233.634 41.6557 229.963 42.5219 225.969 cv
43.3393 222.199 44.228 221.397 41.9292 218.714 cv
39.6294 216.029 38.5581 213.645 39.3828 210.766 cv
40.0869 208.303 43.7514 207.148 44.0068 206.276 cv
44.476 204.675 41.1958 201.224 41.4843 198.28 cv
41.6958 196.125 41.6084 195.467 42.5219 194.728 cv
44.2339 193.344 45.602 193.714 46.5981 193.613 cv
46.5605 193.531 46.5234 193.449 46.4892 193.362 cv
46.4756 193.379 46.4604 193.379 46.4399 193.348 cv
45.5498 192.163 45.6821 189.647 46.4121 187.786 cv
47.7475 185.122 50.7153 183.789 50.7153 180.236 cv
50.7153 178.164 49.354 176.273 50.5669 174.461 cv
51.7802 172.652 54.6655 169.855 53.6757 166.811 cv
52.8452 164.258 53.2539 161.872 53.9223 160.478 cv
55.7373 156.694 55.4892 155.542 54.9946 154.637 cv
54.2246 153.228 53.3466 152.252 54.0879 149.782 cv
54.3979 148.757 54.5732 147.515 54.1279 146.627 cv
53.6831 146.329 53.0888 146.181 52.6445 146.477 cv
51.6064 147.96 49.4209 148.207 48.7861 148.996 cv
48.1523 149.782 47.8281 152.461 46.0923 153.731 cv
44.8549 154.637 44.3994 154.777 43.042 155.13 cv
42.3535 155.31 41.9502 155.813 41.7226 156.775 cv
41.5219 157.619 41.3916 159.737 40.9814 160.312 cv
40.1938 161.41 40.499 161.531 39.7339 162.025 cv
37.9863 163.152 37.0307 163.094 36.7763 164.426 cv
36.521 165.756 38.3423 166.811 35.8759 170.316 cv
35.2798 171.164 34.31 171.525 33.5605 172.156 cv
32.561 172.999 31.83 174.141 31.7207 175.795 cv
31.4243 176.535 31.8706 177.72 31.1279 178.164 cv
30.8315 178.46 30.0981 171.746 32.4629 169.872 cv
36.582 166.609 32.9834 164.836 35.539 161.876 cv
36.7949 160.42 39.414 160.642 39.331 158.585 cv
39.2251 155.918 39.4375 155.215 40.4765 153.734 cv
41.9604 152.105 44.4824 153.882 45.5219 151.512 cv
46.3393 148.467 li
45.894 148.319 45.2246 149.143 44.7798 148.403 cv
45.8003 145.969 46.9985 143.121 48.3989 139.994 cv
49.2143 138.448 50.2129 137.279 51.309 135.522 cv
51.6064 133.596 52.0268 131.687 50.3784 129.795 cv
50.5258 129.647 51.2636 129.5 51.2636 129.797 cv
52.0063 130.982 51.4502 132.922 53.0888 133.448 cv
54.4179 131.85 55.6123 130.043 57.0962 128.858 cv
57.2446 129.451 54.8696 132.263 54.5732 133.448 cv
53.3877 134.78 51.9028 136.262 51.309 138.038 cv
51.6064 139.371 54.0063 138.268 54.8696 138.779 cv
52.77 138.925 53.083 140.276 51.4502 139.831 cv
49.372 140.276 48.6377 142.629 47.6001 144.11 cv
47.3032 145.442 46.2646 146.627 46.4121 147.96 cv
47.206 147.411 47.8051 147.275 48.729 146.74 cv
49.4809 146.305 49.8608 146.468 50.5439 146.082 cv
51.0615 145.788 51.7802 144.603 52.6445 144.257 cv
53.7778 143.804 54.2866 144.006 54.6255 144.396 cv
54.6289 144.393 54.6318 144.39 54.6352 144.388 cv
56.2739 143.071 59.2456 140.927 60.1811 133.43 cv
60.5 130.873 63.4458 130.469 62.1103 128.395 cv
61.5166 126.175 62.959 124.169 63.4785 123.214 cv
63.998 122.258 62.4233 122.457 61.3613 122.669 cv
60.2978 122.883 59.9091 122.391 57.9799 122.094 cv
56.3486 122.835 56.2075 125.435 54.4262 125.88 cv
53.8725 126.438 51.9839 126.684 51.2778 126.47 cv
50.0708 125.568 49.0048 125.275 47.4975 126.371 cv
47.1645 126.854 46.8862 127.398 46.9751 128.099 cv
47.2715 130.025 50.0507 131.19 48.0127 134.023 cv
46.0747 136.717 43.1714 138.81 40.2959 141.425 cv
38.4799 143.077 37.4033 154.996 37.0742 155.079 cv
36.5678 155.205 36.29 154.159 36.29 154.159 cv
36.1416 150.457 35.6567 145.319 36.3725 142.966 cv
37.2387 140.129 40.8525 137.034 42.309 135.996 cv
44.041 134.761 45.936 133.726 45.7876 132.245 cv
45.6401 130.321 43.6694 129.003 44.1548 127.211 cv
44.6909 125.234 46.8256 123.789 48.8515 122.608 cv
50.2739 121.613 51.6215 121.008 52.4663 120.314 cv
52.6494 120.129 52.792 119.946 52.853 119.766 cv
53.4409 118.001 51.3672 116.804 51.3672 114.88 cv
50.9233 111.919 53.4365 111.059 53.1274 108.777 cv
52.8193 106.493 52.9277 104.669 54.2539 102.51 cv
54.2539 102.51 54.3071 102.155 53.9575 101.623 cv
53.6074 101.091 52.4736 102.068 51.4345 101.919 cv
50.396 102.068 48.6928 101.636 47.873 102.659 cv
47.0547 103.681 45.1552 107.141 43.7329 107.016 cv
42.5556 106.916 42.3745 107.223 41.4843 107.815 cv
40.5927 109.74 41.6084 112.223 39.2177 113.703 cv
37.3012 114.89 35.6128 113.727 34.5097 114.034 cv
33.4067 114.341 32.6577 118.638 32.1362 120.252 cv
31.6132 121.867 31.2456 122.325 30.5029 123.066 cv
30.207 123.214 29.7602 123.51 29.4638 123.214 cv
29.3164 122.621 29.0468 123.5 30.207 121.14 cv
31.3657 118.783 29.7602 112.258 34.5097 111.517 cv
35.6972 111.517 37.3213 112.059 38.2192 111.369 cv
39.229 110.592 38.6015 105.536 42.8955 104.946 cv
44.3789 104.649 44.1338 103.056 45.6035 102.411 cv
47.1137 101.746 47.0517 100.004 47.7368 99.6852 cv
48.4189 99.3659 49.3584 99.5881 50.101 99.7365 cv
51.7334 100.475 53.3623 98.5744 54.6587 99.007 cv
56.1264 99.4938 56.2866 99.8845 56.7011 100.918 cv
56.8247 101.227 56.8462 102.533 55.4023 104.436 cv
53.959 106.338 57.0859 107.679 54.7368 111.01 cv
54.042 111.996 53.6494 114.118 54.2671 114.736 cv
56.4331 111.589 58.9145 110.719 61.7343 109.239 cv
61.8554 109.196 61.9624 109.141 62.0615 109.081 cv
62.2778 108.878 62.4795 108.662 62.6484 108.417 cv
63.3042 107.084 62.5415 104.705 62.7739 103.545 cv
63.7016 101.262 66.5454 101.2 66.8588 100.709 cv
67.4209 99.8229 66.021 98.6057 65.9272 98.2394 cv
65.0615 94.8459 69.8227 93.8601 70.8642 91.676 cv
71.9072 89.4938 70.5654 86.7653 71.3105 85.6057 cv
72.0546 84.4479 73.8422 83.3713 73.2397 82.6452 cv
72.6367 81.9182 70.9878 83.8059 69.7338 83.9475 cv
69.3086 83.9948 68.8252 84.3547 67.914 83.738 cv
67.0019 83.1232 66.4653 82.3337 66.0942 82.2717 cv
64.896 82.0725 64.851 83.5451 62.5947 85.4138 cv
60.8808 86.8342 59.0927 85.4538 58.0752 85.9016 cv
54.4272 87.5056 55.6167 90.7541 54.4067 92.1169 cv
52.437 94.3371 49.3857 93.8195 48.3881 94.5622 cv
47.3901 95.3034 48.3828 97.1433 48.0864 98.9201 cv
47.9663 99.633 46.9692 100.015 46.9692 100.015 cv
46.5254 100.31 46.1875 102.057 45.5942 101.613 cv
45.2744 99.5798 46.8794 100.033 46.3969 97.0666 cv
46.5376 95.1135 46.3984 93.2248 47.873 92.5632 cv
49.6914 91.7473 51.6357 93.05 53.0571 89.8996 cv
53.9482 87.8264 54.6753 84.9138 56.7675 84.2736 cv
58.9414 83.5559 61.8466 85.0998 62.7031 83.0895 cv
63.0224 82.1384 61.9223 83.1862 61.9619 81.6091 cv
62.0322 78.7453 64.7524 77.572 67.0058 76.7238 cv
67.749 76.1306 68.3422 75.0935 67.8974 74.0568 cv
67.3037 73.1686 66.7597 72.3054 67.2265 70.4157 cv
67.5161 69.2438 68.1416 68.9826 69.3906 67.8244 cv
70.2568 67.0241 70.0083 65.7165 70.0083 65.2956 cv
70.0083 62.8225 71.6167 62.2727 71.3105 61.3244 cv
70.936 60.8537 70.5532 61.3478 70.2568 61.3478 cv
69.7939 61.8078 67.2451 61.8142 67.0737 61.7424 cv
66.643 61.5573 65.5493 61.9265 65.3247 61.9514 cv
64.5913 62.0368 63.5278 64.9841 61.0551 64.675 cv
59.6543 64.5017 58.208 63.6994 56.8388 65.3576 cv
56.4448 65.8366 55.9702 66.4577 55.666 67.7473 cv
55.3027 69.2849 55.5317 71.0812 53.9873 72.0065 cv
52.8886 72.6662 51.748 72.7507 50.6972 72.5651 cv
49.5385 72.5783 48.6728 72.7888 48.1787 73.9616 cv
48.0737 74.3811 47.6357 75.0236 47.5483 75.4284 cv
46.6201 79.6848 45.896 81.9528 43.1167 82.2009 cv
42.9751 82.2131 42.3745 82.0519 42.5219 81.6091 cv
42.5219 81.0173 43.561 80.5739 44.0068 79.9807 cv
45.4902 78.4992 45.5498 76.0432 45.4008 74.1188 cv
44.8437 74.7355 44.2968 74.5978 43.5464 74.364 cv
42.3589 75.8449 40.455 77.9426 41.3813 79.7321 cv
42.9575 82.7712 39.7343 85.2902 40.3296 87.0729 cv
40.4951 87.5656 42.6801 88.1823 42.6709 90.3444 cv
42.9673 93.3059 40.7509 94.9445 39.7119 97.3142 cv
39.7119 97.3142 39.3906 97.7604 39.4057 98.34 cv
39.4214 98.9201 41.8759 101.262 41.3813 103.237 cv
41.3198 103.485 40.8842 104.029 40.5927 103.966 cv
40.084 103.854 40.084 102.003 37.9238 101.448 cv
37.4868 101.2 36.1884 100.584 37.0547 98.0559 cv
37.833 95.7766 40.6606 93.2551 40.7417 92.5656 cv
40.8867 91.3303 40.4453 90.7893 39.852 90.048 cv
39.2451 89.6862 38.1684 88.9733 38.1049 87.382 cv
38.0234 85.3752 40.7016 83.9265 39.6499 81.0895 cv
38.9682 79.2497 39.25 76.9587 39.852 76.2775 cv
40.455 75.5978 41.3198 73.3786 40.6401 73.3146 cv
40.1587 73.2736 39.9287 73.6887 38.3676 74.7985 cv
36.8066 75.9064 35.0449 74.4909 33.1748 76.2775 cv
31.3042 78.0656 32.3545 78.4045 30.5263 79.902 cv
28.665 81.0969 26.3569 78.6208 25.5542 81.1516 cv
24.6338 84.0178 24.8115 89.1086 22.5859 91.1447 cv
19.9155 93.5871 20.1191 96.9406 20.2548 97.965 cv
20.3149 98.1677 20.3789 98.3747 20.4482 98.5866 cv
21.8354 101.655 22.6196 105.633 21.896 108.703 cv
21.5966 109.467 20.8388 111.001 19.8003 110.705 cv
19.726 110.739 19.6538 110.766 19.584 110.783 cv
19.7929 112.056 20.2685 113.24 21.5761 113.458 cv
23.3735 113.756 24.6181 114.21 25.3086 115.662 cv
26.687 118.556 25.4082 122.589 26.2749 123.328 cv
27.1411 124.067 29.3569 124.071 29.4638 127.36 cv
29.5722 130.65 27.3867 131.802 29.167 133.874 cv
31.0966 133.726 32.4316 134.91 33.3222 136.243 cv
34.7788 140.242 31.7158 141.508 31.393 145.424 cv
31.3569 145.864 33.9423 146.524 34.5097 150.309 cv
34.6577 153.27 33.6181 155.639 33.3222 158.304 cv
33.0258 160.821 33.0341 164.127 33.6181 166.3 cv
33.7773 167.089 33.562 167.713 33.1162 168.156 cv
32.2114 168.156 32.1362 167.188 31.8393 166.744 cv
31.2456 163.339 30.8906 159.437 31.542 156.084 cv
32.458 152.446 32.1865 151.069 30.2314 148.827 cv
28.5835 146.935 28.7226 144.387 29.6128 142.758 cv
30.3554 140.833 32.581 139.353 31.0966 137.279 cv
29.4638 135.948 26.4975 135.948 26.4975 133.133 cv
26.4975 131.061 28.0888 127.358 26.6049 126.7 cv
25.3442 126.141 24.271 125.88 23.8252 124.546 cv
23.5288 123.362 23.6782 121.882 24.271 120.844 cv
24.271 118.92 25.4497 116.665 22.6465 115.266 cv
21.0151 114.674 19.3496 114.937 18.6914 113.786 cv
18.0146 112.604 18.6914 109.426 17.7417 107.075 cv
17.4443 106.778 16.8764 106.629 16.4648 107.371 cv
15.0625 109.839 15.9697 112.552 13.0024 114.28 cv
11.5356 115.133 13.2329 118.31 12.3427 119.791 cv
11.5185 121.271 9.09372 120.767 8.98678 122.474 cv
8.73532 126.494 11.6845 129.744 11.3608 131.802 cv
11.1694 133.022 10.6938 134.103 9.87692 134.466 cv
8.7612 134.962 7.46286 135.238 7.31393 136.571 cv
6.98385 138.463 7.51266 141.353 9.70456 143.151 cv
12.7099 145.616 14.4775 148.532 15.3667 149.569 cv
18.0507 154.372 16.8081 154.49 15.7231 155.627 cv
15.7812 155.633 15.8237 155.653 15.8881 155.654 cv
19.4321 155.737 20.2016 157.813 20.6689 158.533 cv
21.5761 159.931 20.8335 165.031 22.8955 165.69 cv
24.3847 166.166 25.9443 165.048 27.4292 165.937 cv
30.9741 169.227 27.3828 176.377 28.5835 178.685 cv
29.7373 180.907 34.3608 179.583 35.1782 181.812 cv
36.415 185.186 35.1035 187.324 33.915 189.842 cv
33.6181 192.063 36.4389 192.952 36.5874 195.024 cv
34.7148 202.19 36.1416 208.052 37.7739 209.533 cv
37.9238 209.829 38.0713 210.422 37.4765 210.422 cv
35.6972 209.682 35.1035 207.46 33.915 205.98 cv
32.581 202.871 34.0649 199.466 34.3608 196.208 cv
33.4707 193.839 30.9482 192.063 31.8393 188.953 cv
31.9858 186.88 33.7675 184.659 32.2846 182.734 cv
30.726 181.648 29.3979 181.945 28.0888 180.824 cv
26.7783 179.705 26.9077 179.536 26.5224 177.946 cv
25.8632 175.231 27.1635 170.348 26.3486 168.966 cv
25.5332 167.583 24.2856 168.666 22.1538 167.089 cv
19.9267 165.442 20.0664 163.883 19.6797 161.989 cv
19.3393 160.323 18.3159 158.156 15.9697 157.628 cv
13.415 157.053 12.6723 155.407 12.2597 154.174 cv
11.8486 152.941 10.916 152.679 10.3222 152.974 cv
8.13815 154.831 11.2939 156.951 9.37545 160.014 cv
8.96334 160.672 7.40866 162.238 7.23239 162.728 cv
7.05026 163.233 6.95504 164.455 7.1611 165.452 cv
7.45114 166.082 7.77926 166.721 7.91696 167.449 cv
8.33786 168.982 8.18502 170.98 6.90866 172.074 cv
6.0361 172.823 5.04293 173.673 5.86081 175.639 cv
6.47262 176.606 7.30954 177.69 7.9067 178.865 cv
8.76706 180.181 9.38571 181.605 8.7153 183.457 cv
8.13815 185.102 6.90084 186.336 7.47946 187.405 cv
10.0136 192.103 10.29 192.545 17.4546 196.29 cv
25.8481 200.677 26.1196 205.853 26.1997 206.869 cv
26.3359 208.611 24.9756 208.766 24.9746 208.661 cv
25.5786 210.087 26.374 211.472 27.8305 212.199 cv
30.207 212.051 31.3398 211.426 33.7773 212.905 cv
36.8032 214.743 37.9814 217.676 38.2295 221.13 cv
38.7773 223.75 39.3178 226.024 39.4057 226.857 cv
39.8086 228.026 40.3071 229.247 41.4843 230.263 cv
43.2641 232.631 46.4233 233.698 46.7192 236.513 cv
46.5717 236.66 46.4868 236.452 46.3403 236.452 cv
45.8838 236.062 44.917 235.683 44.2461 235.113 cv
43.3896 234.385 42.4736 233.848 42.103 233.387 cv
40.1743 231.313 40.3867 231.875 38.0713 227.448 cv
35.7548 223.023 36.8838 217.084 31.6894 215.308 cv
30.0581 215.012 29.8203 215.701 27.0893 214.716 cv
23.812 213.532 24.1953 209.124 21.896 207.313 cv
19.5971 205.502 16.5464 207.475 14.6513 205.009 cv
13.1215 203.017 12.2094 201.21 10.916 201.093 cv
9.62252 200.977 10.5293 202.953 10.6938 205.09 cv
10.9409 208.299 8.68991 208.778 9.67819 210.422 cv
11.6211 213.653 12.6792 215.577 11.6572 217.825 cv
10.9409 219.403 12.2319 221.65 12.2319 221.65 cv
12.2319 221.65 15.0366 223.496 16.7031 224.488 cv
20.0088 227.299 18.6318 228.931 19.5219 231.151 cv
20.1079 231.654 22.1865 232.598 23.1303 233.51 cv
24.1386 234.485 24.1206 235.323 24.1113 235.452 cv
24.1259 235.491 24.1406 235.53 24.1533 235.569 cv
24.7016 235.18 24.978 234.198 26.935 233.305 cv
30.3227 231.758 33.7085 236.712 35.1035 236.778 cv
36.4965 236.842 36.479 234.162 39.7026 234.556 cv
42.9267 234.949 44.6909 239.608 45.0459 240.035 cv
45.4008 240.46 46.3803 240.478 47.2715 240.181 cv
48.9038 239.589 50.2641 239.556 52.3252 241.694 cv
54.6377 244.094 54.6338 248.85 55.458 249.674 cv
56.2817 250.496 58.0136 251.237 58.4253 249.919 cv
58.2773 249.477 58.2617 250.249 57.5097 249.066 cv
56.1831 246.976 56.686 244.691 57.6836 243.093 cv
58.6816 241.496 59.1674 241.447 58.6967 239.739 cv
58.3515 238.485 57.4633 236.86 58.5488 234.705 cv
58.8247 234.158 59.145 233.742 59.4868 233.412 cv
cp
f
84.8061 302.872 mo
84.4355 303.24 84.1264 303.984 83.7544 304.414 cv
83.3838 304.846 83.1982 305.157 83.1357 305.402 cv
83.0747 305.648 82.7656 305.956 82.7656 305.956 cv
82.7656 305.956 82.333 306.266 82.1469 306.389 cv
81.9614 306.513 81.8999 306.018 81.8999 306.018 cv
82.2705 305.648 li
82.2705 305.093 li
82.2705 305.093 83.2602 304.042 83.4453 303.059 cv
83.6303 302.07 83.8784 302.255 83.5068 301.948 cv
83.1357 301.639 82.457 301.639 82.457 301.639 cv
81.4043 301.516 80.9096 301.516 79.3642 301.578 cv
77.8188 301.639 76.2119 301.886 75.0981 301.886 cv
73.9868 301.886 73.9868 301.639 73.3061 302.009 cv
72.6255 302.378 72.1933 302.562 71.8833 302.627 cv
71.5752 302.687 71.7915 302.895 71.3886 302.994 cv
71.1406 303.059 71.2036 303.182 70.646 303.182 cv
70.2324 303.182 70.771 302.255 70.4609 302.195 cv
70.1523 302.132 69.9047 302.195 69.9047 301.822 cv
69.9047 301.453 70.2138 301.393 71.08 301.27 cv
71.9458 301.147 72.6875 301.147 73.2431 301.083 cv
73.8003 301.023 74.4804 301.023 74.851 300.835 cv
75.2226 300.652 75.4692 300.652 75.2226 300.404 cv
74.9746 300.156 74.851 300.156 74.6045 299.787 cv
74.3564 299.417 74.2949 299.357 74.2949 299.357 cv
74.2949 299.357 73.8628 299.294 73.8628 299.109 cv
73.8628 298.923 73.9233 298.923 73.8003 298.739 cv
73.6772 298.553 73.2431 297.938 73.5522 297.938 cv
73.8628 297.938 73.8003 298.184 74.1713 298.43 cv
74.542 298.676 74.7895 298.923 74.9746 299.109 cv
75.1606 299.294 75.2226 299.294 75.6547 299.541 cv
76.0883 299.787 76.6445 299.973 77.0766 300.282 cv
77.5097 300.589 77.8803 300.96 78.375 300.9 cv
78.8696 300.835 81.5293 300.9 82.6416 300.775 cv
83.7544 300.652 84.8681 300.529 85.6093 300.529 cv
86.352 300.529 87.8354 300.835 88.0835 300.529 cv
88.33 300.221 88.33 300.033 88.02 299.48 cv
87.7114 298.923 87.2172 297.691 87.2172 297.691 cv
87.5888 297.877 li
87.5888 297.877 88.2065 298.616 88.5156 298.862 cv
88.8247 299.109 90.6792 300.589 90.6792 300.589 cv
90.6792 300.589 91.2978 300.9 91.6699 300.9 cv
92.0395 300.9 92.7817 301.083 93.2153 301.206 cv
93.6464 301.329 94.2036 301.393 94.8217 301.578 cv
95.4394 301.763 97.7275 302.255 97.9751 302.07 cv
98.2221 301.886 98.2221 301.701 98.2221 301.393 cv
98.2221 301.083 98.0991 300.282 98.0991 300.282 cv
98.0991 300.282 99.2124 301.329 99.583 301.639 cv
99.9546 301.948 100.511 302.75 100.758 302.81 cv
101.004 302.872 101.685 303.488 102.242 303.488 cv
102.798 303.488 103.045 303.736 103.292 303.923 cv
103.54 304.108 104.034 304.042 104.282 304.108 cv
104.528 304.169 104.591 304.475 105.023 304.6 cv
105.456 304.723 105.765 304.846 106.013 304.908 cv
106.261 304.969 106.631 305.157 106.94 305.279 cv
107.249 305.402 107.311 305.648 107.559 305.711 cv
107.807 305.771 108.3 305.771 108.3 305.771 cv
108.3 305.771 108.485 306.143 108.795 306.328 cv
109.104 306.513 109.537 306.761 109.723 306.761 cv
109.908 306.761 109.908 307.128 109.908 307.128 cv
109.908 307.128 109.29 307.376 108.982 307.192 cv
108.671 307.005 108.3 306.698 108.3 306.698 cv
108.3 306.698 108.424 306.513 107.991 306.513 cv
107.559 306.513 107.189 306.389 106.816 306.266 cv
106.445 306.143 106.136 305.771 105.765 305.771 cv
105.395 305.771 104.219 305.648 103.663 305.339 cv
103.107 305.032 102.118 304.66 101.561 304.6 cv
101.004 304.537 101.252 304.475 100.819 304.293 cv
100.387 304.108 100.139 304.042 99.706 304.042 cv
99.2739 304.042 99.2739 303.923 98.7168 303.736 cv
98.1606 303.551 97.7895 303.428 97.3564 303.612 cv
96.9248 303.798 96.4296 304.042 95.9355 304.537 cv
95.4394 305.032 94.3271 306.945 93.8955 307.438 cv
93.4609 307.933 93.3383 308.487 93.1518 308.241 cv
92.9663 307.994 92.9052 307.684 93.0903 307.376 cv
93.2763 307.068 94.018 305.834 94.2651 305.402 cv
94.5136 304.969 95.0698 304.108 95.0698 303.677 cv
95.0698 303.24 95.0698 303.059 94.7602 302.81 cv
94.4511 302.562 94.3901 302.687 93.833 302.562 cv
93.2763 302.441 92.9052 302.378 92.3486 302.318 cv
91.7924 302.255 91.1743 302.07 89.9995 301.886 cv
88.8247 301.701 88.2065 301.453 87.5258 301.578 cv
86.8466 301.701 86.9077 301.578 86.2895 301.822 cv
85.6718 302.07 85.1772 302.503 84.8061 302.872 cv
cp
107.37 295.262 mo
106.775 295.705 104.847 294.519 104.55 294.373 cv
102.324 292.744 100.542 290.671 99.8003 288.007 cv
99.2075 286.972 98.9101 286.081 97.7236 285.49 cv
96.2392 285.194 94.7807 285.209 93.2719 283.711 cv
91.4917 281.787 91.2553 277.28 89.5625 277.048 cv
87.8559 276.818 88.0273 278.345 85.6303 278.628 cv
84.2295 278.793 83.0756 278.709 81.5488 277.347 cv
80.3618 276.013 79.4712 273.792 77.2451 273.496 cv
75.6137 273.496 75.4961 275.695 72.0283 275.421 cv
67.9052 275.089 66.5874 271.224 64.7812 270.535 cv
64.0278 270.247 62.7954 269.743 61.5581 271.06 cv
60.2588 272.445 59.8266 272.541 59.2915 272.754 cv
58.0659 273.246 56.5307 272.361 55.3759 272.13 cv
54.4316 271.94 53.6445 272.541 53.3154 273.199 cv
52.853 274.119 54.8164 274.255 56.4467 276.654 cv
58.0136 278.956 55.2934 281.34 58.0962 282.081 cv
60.6191 283.119 65.0214 282.576 65.226 285.933 cv
65.4282 289.244 65.7793 289.025 66.6694 290.062 cv
66.8178 290.355 66.6694 290.392 66.1757 290.392 cv
64.9882 290.392 64.0551 289.059 63.7841 288.418 cv
63.5127 287.775 63.9497 287.101 62.852 286.081 cv
62.0532 284.714 57.8349 284.538 57.2129 284.9 cv
56.5298 285.29 58.1787 286.279 59.25 286.938 cv
60.2387 287.429 62.3315 288.204 62.1103 288.599 cv
61.8886 288.992 61.2202 288.599 60.7739 288.599 cv
58.8452 287.562 56.2973 286.296 55.1357 285.34 cv
53.9746 284.384 52.4902 282.164 51.1709 282.248 cv
50.0942 282.315 49.498 282.529 48.7548 282.379 cv
48.6977 281.591 49.7094 281.68 49.935 281.34 cv
50.0996 281.096 50.1816 280.355 49.9419 280.16 cv
49.5903 279.872 48.0073 278.204 46.3901 276.737 cv
44.7329 275.231 43.0415 273.925 42.6709 273.792 cv
41.9375 273.527 40.5927 274.087 39.7026 273.349 cv
39.852 272.904 40.7417 272.754 40.2959 272.164 cv
39.9995 272.164 39.7954 271.536 39.7954 271.389 cv
40.7846 271.389 42.0195 272.464 42.8452 273.034 cv
43.916 273.774 45.3427 274.678 47.1215 276.162 cv
47.8647 275.864 47.0468 275.209 47.4189 274.532 cv
47.6049 274.195 48.0488 274.596 48.4511 275.749 cv
49.1103 277.64 49.6465 278.628 50.8413 279.532 cv
52.9956 281.162 53.4472 282.362 54.6338 282.655 cv
54.1401 280.768 55.0449 277.97 53.4795 276.981 cv
51.7285 275.879 50.8564 274.714 50.684 273.792 cv
50.5122 272.871 50.5937 272.293 51.5835 271.471 cv
53.018 270.279 54.7153 270.32 57.2715 270.813 cv
59.8921 271.321 58.9052 268.424 62.4643 267.771 cv
65.5981 267.195 70.1464 272.56 70.7168 272.754 cv
71.1421 272.903 71.895 273.443 72.935 272.212 cv
73.4716 271.573 75.3354 270.2 77.7163 270.897 cv
81.0962 271.882 82.0864 275.586 84.313 275.911 cv
86.2954 276.205 86.3569 273.998 88.1865 273.774 cv
92.8857 273.199 93.7099 281.507 95.2763 282.081 cv
96.29 282.455 98.5649 282.721 99.8003 284.009 cv
102.53 286.853 102.768 292.153 106.924 293.928 cv
107.072 294.373 107.813 294.67 107.37 295.262 cv
cp
97.4306 290.801 mo
97.2827 290.211 96.5488 290.079 95.955 289.635 cv
94.7924 288.547 92.8188 287.398 91.3315 286.688 cv
89.7807 285.948 88.7119 285.654 87.3481 284.9 cv
85.7168 284.303 84.0839 283.861 82.5991 283.269 cv
80.9677 282.379 79.187 282.973 77.5546 283.711 cv
76.9604 284.009 76.3437 284.5 75.7505 284.796 cv
75.601 284.796 75.478 284.748 75.3281 284.6 cv
75.6587 284.294 76.6562 283.234 76.6562 283.234 cv
76.9043 283.07 77.5922 282.157 77.2573 281.937 cv
76.7827 281.617 74.8393 281.068 72.5346 280.601 cv
71.1342 280.19 69.8139 280.109 68.4121 279.862 cv
66.5175 278.874 64.9419 281.049 63.6064 279.716 cv
64.0517 279.419 64.6445 279.272 64.6445 278.827 cv
63.6064 278.382 62.5673 277.494 61.5288 277.199 cv
61.5288 277.048 li
63.1616 276.604 65.0341 278.298 65.684 277.199 cv
65.9897 276.681 65.2382 275.864 65.5356 275.275 cv
66.0214 275.5 67.0127 278.463 69.2451 278.827 cv
70.7207 279.451 71.8759 279.615 73.5234 279.862 cv
75.1738 280.109 76.6084 280.223 77.6469 280.52 cv
77.9433 280.52 78.8818 280.308 78.5932 279.716 cv
78.3051 279.12 78.4458 278.678 78.4458 278.086 cv
79.0473 278.463 80.2016 281.259 81.7089 281.639 cv
83.0044 281.834 85.2299 282.739 86.7539 283.415 cv
87.7929 283.269 89.5312 284.952 89.5747 283.565 cv
89.6005 282.739 89.5171 282.626 89.5171 282.328 cv
91.6616 286.031 94.4702 287.264 96.8457 289.781 cv
97.5874 289.781 97.7358 290.82 98.3286 290.97 cv
98.0322 291.56 97.728 290.949 97.4306 290.801 cv
cp
51.8715 260.613 mo
51.2778 260.763 49.8252 261.165 49.3794 260.721 cv
49.6191 260.474 51.831 259.544 52.4643 259.279 cv
53.206 258.987 52.6132 258.394 52.6132 257.949 cv
49.3579 255.594 45.2353 253.128 41.6909 251.4 cv
40.8667 251.154 38.3676 252.323 36.7353 252.915 cv
36.29 252.915 35.8447 252.915 35.6972 252.472 cv
37.0327 252.028 39.2163 250.663 39.2583 250.251 cv
39.2998 249.838 37.6523 248.85 36.29 248.622 cv
35.4257 247.781 33.5293 247.287 32.6225 246.794 cv
31.2861 246.201 31.1386 245.924 29.6548 245.479 cv
28.6162 244.886 23.247 242.011 21.1845 241.07 cv
22.0503 240.806 27.4292 243.405 28.9126 243.998 cv
29.2099 243.998 30.4702 244.788 30.8906 244.409 cv
31.3125 244.029 30.9482 242.107 30.3554 241.07 cv
30.9482 241.07 30.8593 242.533 31.3042 242.682 cv
32.4907 244.309 32.292 246.135 34.9311 246.876 cv
35.6728 247.468 36.7353 247.585 37.1801 248.177 cv
38.3676 248.029 38.8051 249.179 39.852 248.622 cv
40.4038 248.329 39.7026 245.514 39.9995 244.477 cv
40.7846 243.916 39.959 249.756 43.4135 250.843 cv
44.6001 251.582 45.6401 251.879 46.8252 252.619 cv
47.2715 253.065 48.0454 253.423 48.6977 253.292 cv
49.1103 253.211 48.9038 249.066 49.0512 247.141 cv
50.9233 249.262 48.6157 254.362 52.1601 255.843 cv
53.6445 257.174 56.9633 259.947 57.2715 259.871 cv
57.8911 259.723 57.8066 258.69 57.6587 258.247 cv
58.5908 258.229 58.2617 260.45 58.9936 261.947 cv
59.6611 262.916 62.3403 265.222 61.6406 265.63 cv
60.9414 266.041 60.3213 264.15 58.1787 262.588 cv
56.2744 261.198 54.9629 258.557 51.8715 260.613 cv
cp
71.0131 259.279 mo
70.2714 259.279 69.6538 258.59 69.8017 258.146 cv
70.248 258.294 70.5444 257.983 70.5678 257.505 cv
70.625 256.387 70.2329 254.943 69.4536 254.183 cv
69.4843 254.296 69.4799 254.309 69.3906 254.115 cv
69.413 254.135 69.4316 254.161 69.4536 254.183 cv
69.3798 253.914 69.0839 253.014 69.0839 252.472 cv
67.749 251.286 66.6201 251.171 65.4336 249.838 cv
65.4336 249.838 64.2929 249.281 64.7812 249.066 cv
65.2675 248.85 67.7392 250.498 68.1938 250.251 cv
68.6479 250.002 68.4902 249.362 68.4902 249.362 cv
68.0449 245.66 67.0991 241.612 67.9887 237.909 cv
68.434 239.243 68.2837 242.402 68.978 242.517 cv
69.4726 242.599 69.7207 242.353 69.7207 242.353 cv
68.0713 246.465 70.0903 251.797 70.6264 251.895 cv
71.163 251.991 72.1767 250.201 72.77 249.756 cv
72.1103 252.06 70.1318 253.869 72.2006 256.913 cv
72.497 258.098 73.3881 259.947 73.9809 260.171 cv
74.5014 260.367 75.3159 258.987 76.0586 258.69 cv
76.0586 260.022 75.1684 260.912 75.0185 262.096 cv
75.6137 264.168 77.0976 265.945 78.1362 267.721 cv
78.1362 267.721 78.4243 268.281 77.9882 268.313 cv
77.5512 268.345 75.7612 265.945 74.7221 264.613 cv
73.2397 263.131 72.5224 260.529 71.0131 259.279 cv
cp
88.3745 258.704 mo
89.4135 260.627 90.4355 264.164 91.0713 264.179 cv
91.707 264.195 92.2329 263.441 92.2329 263.441 cv
92.6782 264.478 91.9365 265.66 92.2329 266.697 cv
93.4204 269.364 96.4365 274.356 97.0068 274.214 cv
97.3359 274.133 97.872 273.064 98.3164 272.472 cv
98.5273 272.768 97.9453 274.476 98.1611 275.862 cv
98.3759 277.24 99.3154 277.834 100.057 279.48 cv
101.096 281.108 103.19 284.248 103.684 284.332 cv
104.355 284.445 104.253 282.984 104.847 282.243 cv
105.44 284.167 104.344 286.769 105.828 288.693 cv
106.273 289.729 107.641 291.487 107.37 292.311 cv
107.222 292.459 li
106.033 291.126 105.588 289.352 104.253 287.871 cv
102.203 284.489 99.5234 280.331 96.5957 276.273 cv
95.1103 274.214 93.8652 271.61 93.0507 270.924 cv
91.4838 269.608 90.8974 269.213 89.1171 269.364 cv
88.9677 269.067 li
89.8588 268.621 91.7055 269.05 91.6494 268.29 cv
91.5922 267.532 88.9677 262.107 88.226 258.704 cv
88.3745 258.704 li
cp
87.4629 315.251 mo
87.6152 315.223 87.7685 315.181 87.9301 315.101 cv
90.1655 313.999 94.4189 314.214 95.5039 314.898 cv
95.8188 315.097 96.125 315.278 95.9799 315.354 cv
95.9809 315.355 95.9814 315.355 95.9824 315.356 cv
96.3427 314.785 96.8305 314.307 97.5219 314.039 cv
101.706 311.529 105.663 317.369 108.713 312.601 cv
109.753 311.71 111.82 311.105 113.453 311.55 cv
114.343 312.287 115.678 312.142 116.867 312.287 cv
117.607 311.399 116.565 311.016 115.947 310.154 cv
114.167 307.783 117.756 304.12 113.968 302.195 cv
110.181 300.267 108.658 299.024 108.466 297.711 cv
107.807 293.187 110.815 293.187 108.853 290.671 cv
108.11 289.487 107.873 287.904 107.971 287.018 cv
108.15 285.405 109.375 284.838 110.649 284.803 cv
110.634 284.778 110.619 284.75 110.603 284.724 cv
110.188 284.457 109.106 283.575 108.853 283.119 cv
107.813 280.602 108.054 277.56 104.591 276.737 cv
102.958 276.144 101.631 275.24 101.294 272.788 cv
100.956 270.336 102.026 269.647 101.582 267.721 cv
100.691 266.388 99.1508 268.015 97.872 267.129 cv
93.3305 263.98 97.1298 258.541 91.9365 257.802 cv
89.4135 257.653 89.4043 253.196 87.9301 253.654 cv
86.4541 254.115 86.8911 255.284 86.4458 256.172 cv
85.7046 257.653 82.9589 258.08 84.1464 260.45 cv
84.7241 261.847 85.0532 262.423 84.313 264.15 cv
83.4541 266.147 80.5571 265.067 81.4004 268.166 cv
81.6733 269.169 84.8877 271.719 83.3296 273.792 cv
82.7353 274.087 82.2905 273.647 82.1425 273.053 cv
82.0034 270.154 76.9736 268.426 79.9174 264.613 cv
81.2661 262.863 82.4155 263.164 82.2905 262.242 cv
82.0605 260.543 81.103 258.84 81.9941 257.357 cv
80.7324 256.026 78.812 253.482 77.9643 251.319 cv
77.1152 249.155 77.3398 247.371 77.2451 246.548 cv
77.0566 244.902 74.5014 245.15 73.7597 241.612 cv
73.3476 239.651 74.5 237.683 73.3867 236.481 cv
72.2758 235.279 71.2163 235.211 70.5678 233.816 cv
69.7207 231.988 70.8061 229.958 69.3071 229.438 cv
67.4111 228.78 67.8247 234.045 64.2797 234.949 cv
62.3217 235.449 60.3213 234.539 60.5683 236.758 cv
60.812 238.941 61.5678 240.968 60.3213 243.012 cv
59.1674 244.902 58.5029 244.957 58.3999 246.253 cv
58.2617 248.028 61.1465 250.002 58.8452 250.843 cv
61.9707 252.06 62.2837 255.773 63.2968 258.247 cv
64.31 260.722 66.561 260.763 67.6001 262.688 cv
68.7856 263.75 70.726 268.46 72.3584 269.495 cv
73.0996 270.074 73.2656 270.731 72.9419 271.127 cv
71.1606 271.866 70.2714 269.794 68.935 268.904 cv
66.561 266.241 66.7646 264.211 62.7954 261.764 cv
59.9922 260.037 61.9214 253.983 57.7656 253.54 cv
56.2817 252.8 54.0962 252.323 53.6518 250.398 cv
52.6132 247.736 52.9028 243.75 49.935 243.012 cv
47.3354 242.363 48.9458 243.833 45.7309 243.339 cv
42.5283 242.848 43.2568 237.992 40.2959 237.368 cv
38.3051 236.949 37.5688 239.638 36.0029 239.144 cv
33.8662 238.471 33.1997 238.322 31.8393 237.222 cv
31.0444 236.578 30.31 234.848 28.2529 235.361 cv
26.935 235.691 27.3462 237.992 23.6782 237.665 cv
21.5434 237.476 20.8579 236.778 19.5219 236.036 cv
19.185 235.855 17.3881 235.262 16.7949 236.594 cv
16.2011 238.816 18.3354 240.035 18.3354 242.255 cv
18.3613 243.916 18.2939 246.153 19.9267 247.041 cv
21.9873 248.358 23.4707 249.096 24.5424 250.413 cv
25.6152 251.73 24.4199 254.101 25.4585 255.432 cv
29.0776 259.46 33.8325 258.432 36.2509 258.64 cv
39.999 258.961 42.6831 263.466 41.914 265.19 cv
43.2041 264.66 44.8066 263.981 46.9673 265.138 cv
50.3471 266.946 52.1103 264.499 53.9482 266.094 cv
55.7876 267.687 57.2715 268.923 56.1748 269.647 cv
55.5429 270.066 55.436 269.406 54.7983 268.837 cv
54.4575 268.538 53.7431 268.361 53.206 268.166 cv
51.666 267.604 49.688 269.908 46.2256 267.522 cv
44.8232 266.452 42.4321 267.687 40.7846 267.936 cv
39.1347 268.18 38.3105 267.277 36.7353 266.388 cv
34.3769 265.062 33.2817 264.234 32.705 265.219 cv
32.1279 266.207 35.0127 267.604 34.5097 270.092 cv
34.1132 272.05 33.1914 273.019 34.518 274.517 cv
35.8462 276.011 44.5791 277.882 42.0771 282.231 cv
41.58 283.095 41.4438 284.056 41.9292 284.748 cv
45.4902 287.415 51.1709 285.045 53.9482 289.931 cv
55.4858 292.635 56.6953 292.003 58.9199 292.445 cv
60.1767 292.816 64.1914 292.904 64.3286 294.904 cv
65.3208 293.36 65.938 291.95 68.3999 291.458 cv
72.935 290.557 75.1367 294.057 77.7163 292.858 cv
79.1245 292.204 78.4585 289.978 81.5488 289.487 cv
85.0439 288.93 89.29 294.346 90.6591 293.496 cv
92.0293 292.642 91.895 291.275 94.2046 290.884 cv
97.7456 290.286 99.2534 295.121 102.037 297.052 cv
104.818 298.986 109.321 299.999 111.079 301.775 cv
112.835 303.551 113.897 304.442 114.343 306.07 cv
114.343 306.367 114.194 306.661 113.75 306.661 cv
112.113 305.771 110.63 303.365 108.774 302.687 cv
106.37 301.807 105.588 301.626 103.956 300.887 cv
103.511 300.887 101.458 299.747 99.7475 298.309 cv
98.0371 296.868 98.02 296.444 96.0908 293.928 cv
94.6982 293.023 94.2046 294.421 93.2153 295.325 cv
92.1699 296.279 91.6494 296.396 89.1748 295.573 cv
86.3803 294.644 84.684 291.62 82.6626 291.788 cv
80.685 291.953 81.1997 295.037 77.7163 295.573 cv
75.9448 295.846 74.9384 295.362 73.5112 294.504 cv
72.0879 293.648 71.3681 293.269 69.7207 293.269 cv
66.6684 293.269 67.4184 295.279 64.1142 298.041 cv
61.0634 300.589 56.6445 297.711 54.8383 298.666 cv
54.4692 298.862 54.2207 299.603 54.4692 300.098 cv
54.8437 300.745 55.5429 301.181 56.3628 301.549 cv
57.0571 301.819 57.8178 302.092 58.5542 302.413 cv
59.8506 302.931 61.0493 303.556 61.5166 304.737 cv
62.2187 306.513 61.394 307.418 63.207 308.487 cv
65.8745 310.062 70.521 307.192 72.2758 309.145 cv
74.0796 311.153 73.0449 311.992 73.8862 312.822 cv
73.9448 312.876 74.0063 312.93 74.0717 312.982 cv
74.208 313.085 74.3706 313.189 74.5835 313.296 cv
76.5063 314.272 78.2939 312.997 80.2866 312.74 cv
81.2006 312.59 82.187 312.687 83.3022 313.369 cv
84.5815 314.001 85.4414 314.633 86.1621 314.991 cv
86.6596 315.175 87.0815 315.25 87.4629 315.251 cv
cp
f
174.36 343.918 mo
176.009 342.904 177.938 341.945 178.991 341.655 cv
178.937 341.03 178.968 340.27 179.617 339.316 cv
181.342 336.782 183.492 336.932 185.472 337.014 cv
187.801 337.111 187.971 336.851 188.52 336.521 cv
188.933 336.275 188.693 335.732 188.693 335.434 cv
187.449 334.873 185.224 334.833 183.74 334.957 cv
182.059 335.098 181.158 335.716 180.68 335.879 cv
179.783 336.191 179.395 336.06 177.804 336.437 cv
176.213 336.815 175.635 339.138 174.299 340.618 cv
172.964 342.395 170.887 344.319 168.215 343.726 cv
167.128 343.726 164.878 341.459 164.255 340.902 cv
164.101 341.614 163.481 342.711 162.936 343.512 cv
161.156 345.586 158.563 348.164 157.155 349.199 cv
156.581 349.621 155.889 350.48 154.602 350.608 cv
152.954 350.773 152.705 351.317 151.941 351.534 cv
151.248 351.731 150.526 351.887 150.21 351.944 cv
149.608 352.053 149.871 354.452 150.927 355.702 cv
151.569 356.67 154.468 359.657 156.485 361.592 cv
157.781 362.515 158.259 362.447 158.711 362.186 cv
160.344 360.703 160.402 357.675 159.602 355.67 cv
159.306 354.929 158.277 354.167 158.563 353.894 cv
159.248 353.235 161.343 354.635 161.936 355.372 cv
162.085 355.67 162.456 355.519 162.603 355.371 cv
163.806 352.886 164.724 350.995 166.712 349.376 cv
166.852 349.258 166.989 349.141 167.138 349.024 cv
167.193 348.981 167.249 348.939 167.305 348.896 cv
167.585 348.679 167.874 348.464 168.174 348.252 cv
169.189 347.519 170.235 346.829 171.284 346.16 cv
171.598 345.951 172.826 344.861 174.36 343.918 cv
cp
f
215.248 353.3 mo
217.036 352.822 219.758 355.783 220.442 355.67 cv
221.417 355.508 220.15 353.993 220.737 352.709 cv
221.213 351.667 223.133 349.863 224.09 349.353 cv
221.788 348.047 219.495 346.859 218.199 346.063 cv
217.816 345.776 216.754 345.382 216.229 345.202 cv
216.235 345.213 216.197 345.207 216.055 345.156 cv
215.811 345.07 215.94 345.104 216.229 345.202 cv
216.207 345.163 215.346 344.823 215.314 345.239 cv
215.275 345.764 215.847 347.281 216.293 348.317 cv
216.293 348.467 li
214.364 346.542 212.882 343.726 210.506 342.248 cv
209.763 342.542 209.073 341.473 208.802 342.278 cv
208.531 343.084 208.578 344.469 208.578 344.469 cv
207.389 342.987 207.16 340.011 204.633 339.713 cv
202.466 339.136 201.06 338.131 198.708 337.521 cv
198.918 338.42 198.665 339.014 200.137 339.99 cv
202.28 342.623 205.608 341.622 206.048 345.455 cv
206.485 349.287 206.402 348.793 207.722 348.874 cv
208.57 348.927 209.648 348.122 211.241 349.896 cv
212.306 351.082 212.492 352.534 213.332 353.146 cv
213.392 353.187 213.452 353.22 213.511 353.256 cv
213.912 353.467 214.447 353.515 215.248 353.3 cv
cp
f
377.107 119.637 mo
377.106 119.636 377.105 119.635 377.105 119.635 cv
377.104 119.635 377.104 119.636 377.104 119.638 cv
377.105 119.637 377.106 119.637 377.107 119.637 cv
cp
f
338.038 103.237 mo
337.6 103.345 336.862 102.62 336.305 102.064 cv
335.749 101.508 333.335 99.1652 332.596 98.6726 cv
331.855 98.1774 330.617 97.1306 330.309 96.9436 cv
329.999 96.759 329.38 96.1423 328.824 96.2023 cv
328.268 96.2663 327.093 96.4499 326.722 95.9572 cv
326.349 95.4636 326.783 95.5856 327.031 95.217 cv
327.277 94.8459 326.968 94.4768 326.66 94.4152 cv
326.349 94.3527 323.608 92.6965 323.979 92.6965 cv
324.349 92.6965 327.401 94.1677 327.834 94.6003 cv
327.834 94.6003 328.824 94.7849 329.132 95.217 cv
329.132 95.217 330.432 95.7097 330.37 95.0319 cv
330.309 94.3527 330.432 94.1076 330.122 93.7365 cv
329.813 93.3659 329.937 92.7492 330.617 93.551 cv
331.296 94.3527 331.482 95.3405 331.607 95.7717 cv
331.729 96.2023 332.04 97.1306 332.844 97.6848 cv
333.645 98.2394 334.883 99.3498 335.316 99.5974 cv
335.749 99.8439 336.368 99.966 336.428 98.8561 cv
336.491 97.7468 336.614 97.6227 336.862 97.4377 cv
337.109 97.2517 337.109 97.8698 337.109 98.301 cv
337.109 98.7331 337.232 100.461 337.419 101.015 cv
337.602 101.571 337.913 102.126 338.038 102.435 cv
338.159 102.743 338.284 103.175 338.038 103.237 cv
cp
341.562 93.8601 mo
342.364 93.7966 342.832 93.4606 340.942 91.5778 cv
340.014 90.6516 338.654 90.5891 338.223 90.5891 cv
337.789 90.5891 336.801 90.467 336.491 90.6516 cv
336.18 90.8376 335.376 91.4538 334.018 91.2678 cv
332.656 91.0832 330.37 89.5412 329.628 89.1086 cv
328.886 88.6774 327.709 87.9982 326.29 88.6149 cv
324.867 89.2316 323.816 89.8478 322.951 89.6027 cv
322.084 89.3561 320.75 89.1086 320.168 88.739 cv
319.487 88.3073 318.56 89.4177 319.179 90.1569 cv
319.908 91.0329 320.599 92.0705 320.847 92.7492 cv
321.095 93.4274 320.787 96.2663 321.035 96.6975 cv
321.21 97.0085 321.499 97.7019 322.649 98.4558 cv
323.29 98.8122 323.982 99.1389 324.613 99.4172 cv
327.173 100.396 327.846 100.493 328.329 101.817 cv
328.824 103.175 328.948 103.668 327.773 105.89 cv
326.597 108.11 330.432 109.839 332.348 109.961 cv
334.266 110.084 336.614 110.886 337.171 112.059 cv
337.726 113.231 338.159 114.711 337.726 115.637 cv
337.294 116.562 336.801 117.734 337.48 118.597 cv
338.159 119.461 339.576 119.623 340.88 120.263 cv
345.431 122.498 339.841 127.335 343.426 129.959 cv
344.135 130.478 344.819 130.424 345.403 130.236 cv
345.007 129.547 344.813 128.792 344.995 127.966 cv
345.494 125.707 348.628 125.016 348.758 122.675 cv
348.891 120.336 345.266 120.875 343.809 119.25 cv
342.353 117.624 342.487 116.809 342.797 115.76 cv
343.105 114.711 345.394 113.355 344.712 111.812 cv
344.035 110.27 341.562 108.85 340.635 108.171 cv
339.707 107.493 338.346 105.149 339.83 102.989 cv
341.314 100.83 341.374 100.77 340.448 98.7331 cv
339.519 96.6975 339.335 95.9572 339.952 95.093 cv
340.57 94.2292 341.111 93.8937 341.562 93.8601 cv
cp
f
347 132.071 mo
346.991 132.086 346.981 132.1 346.971 132.114 cv
346.999 132.117 347.027 132.115 347.055 132.12 cv
347.037 132.104 347.019 132.087 347 132.071 cv
cp
f
247.376 354.798 mo
245.194 355.684 240.716 354.538 239.656 355.015 cv
238.591 355.491 237.752 356.236 237.4 357.18 cv
237.176 357.785 237.286 358.432 237.732 358.581 cv
240.862 359.155 242.611 354.41 245.314 356.279 cv
245.474 356.39 248.847 354.357 249.306 354.079 cv
249.313 354.071 249.322 354.063 249.33 354.055 cv
248.782 354.276 248.122 354.495 247.376 354.798 cv
cp
f
338.156 43.3928 mo
338.157 43.3918 338.157 43.3913 338.158 43.3908 cv
338.156 43.3903 338.154 43.3903 338.153 43.3898 cv
338.156 43.3928 li
cp
f
350.34 88.3073 mo
349.537 89.8478 349.104 90.343 349.04 90.5891 cv
348.981 90.8376 349.104 93.551 349.04 93.8601 cv
348.981 94.1677 348.672 94.2912 348.672 94.2912 cv
348.547 93.7966 348.114 92.0705 347.805 91.0832 cv
347.498 90.0954 347.248 89.7258 347.124 89.4792 cv
347.001 89.2316 347.065 88.924 346.876 88.5534 cv
346.692 88.1828 346.196 87.0729 345.827 86.5803 cv
345.457 86.0866 345.085 85.9621 344.589 85.6545 cv
344.096 85.3454 343.849 85.0383 343.23 84.9138 cv
342.612 84.7907 340.448 84.7907 340.014 84.7292 cv
340.014 84.7292 342.426 84.6052 342.859 84.4831 cv
343.292 84.3591 343.414 84.2355 343.911 84.174 cv
344.405 84.1125 344.776 84.174 344.589 83.4958 cv
344.488 83.1179 343.539 81.3972 343.169 80.8425 cv
342.797 80.2873 342.178 79.1765 341.932 78.8073 cv
341.683 78.4362 341.439 78.1271 341.126 77.9426 cv
340.818 77.758 340.262 77.8195 339.891 77.5104 cv
339.519 77.2033 339.085 76.7702 339.212 76.5852 cv
339.335 76.4011 339.643 76.4621 339.766 76.03 cv
339.891 75.5978 339.335 75.1042 339.151 74.8591 cv
338.962 74.6115 338.159 73.3786 337.726 72.946 cv
337.294 72.5139 336.675 71.9582 336.675 71.7126 cv
336.675 71.465 333.65 68.7853 333.71 68.5993 cv
333.773 68.4157 336.491 70.6633 336.675 70.8488 cv
336.862 71.0334 336.801 71.402 337.171 71.402 cv
337.54 71.402 337.789 71.8366 337.913 72.0202 cv
337.913 72.0202 338.467 72.2058 338.717 71.7126 cv
338.962 71.2199 339.273 71.3415 339.335 71.6496 cv
339.398 71.9582 339.398 72.8835 339.707 73.6237 cv
340.014 74.364 341.932 76.5852 342.301 77.2033 cv
342.673 77.8195 343.414 78.9909 343.724 79.3005 cv
344.035 79.6076 344.653 80.7185 345.271 79.1765 cv
345.888 77.6345 345.948 77.4489 345.948 76.8942 cv
345.948 76.3391 346.261 76.9558 346.261 77.1418 cv
346.261 77.3259 346.321 78.4987 345.948 79.7321 cv
345.582 80.965 345.582 82.0769 346.013 83.0021 cv
346.448 83.9265 347.124 85.3454 347.373 86.0251 cv
347.621 86.7033 348.114 88.3073 348.485 88.3674 cv
348.856 88.4313 349.104 88.3073 349.412 88.0607 cv
349.722 87.8132 350.463 87.0729 350.648 86.6418 cv
350.648 86.6418 351.144 86.7653 350.34 88.3073 cv
cp
348.547 68.8737 mo
348.424 69.4304 348.424 69.2438 348.237 69.2438 cv
347.983 69.2438 347.744 68.6887 347.498 68.2575 cv
347.248 67.8244 347.124 67.3317 346.876 67.0852 cv
346.628 66.8376 345.64 65.6657 345.085 64.0017 cv
344.53 62.3352 344.344 60.6682 344.096 60.361 cv
343.849 60.051 343.724 59.2502 343.664 58.695 cv
343.601 58.1394 343.169 57.6457 342.982 57.4606 cv
342.797 57.2761 342.673 56.9055 342.178 56.7199 cv
342.178 56.7199 342.178 56.4128 342.364 56.4128 cv
342.549 56.4128 343.23 56.1027 343.169 55.5485 cv
343.105 54.9934 342.612 52.8332 342.735 52.4645 cv
342.735 52.4645 342.859 52.3405 342.982 52.7106 cv
343.105 53.0808 343.724 55.0544 343.786 55.5485 cv
343.849 56.0412 344.22 57.6457 344.344 57.9548 cv
344.465 58.2624 344.653 59.0031 344.837 59.2502 cv
345.023 59.4968 345.582 59.8664 346.136 58.9421 cv
346.692 58.0163 346.816 58.0163 347.001 58.0163 cv
347.001 58.0163 346.569 59.6198 346.385 60.051 cv
346.196 60.4836 345.64 62.0261 345.888 62.5812 cv
346.136 63.1374 346.816 64.5544 346.94 64.8635 cv
347.065 65.173 347.498 65.8513 347.498 66.4079 cv
347.498 66.4079 347.867 66.9602 347.991 67.3317 cv
348.114 67.7014 348.672 68.319 348.547 68.8737 cv
cp
332.656 52.8967 mo
333.214 53.5129 333.214 54.0681 332.966 54.3142 cv
332.743 54.5368 332.04 53.635 331.792 53.2048 cv
331.544 52.7717 330.617 50.9206 330.309 50.675 cv
329.999 50.4269 329.628 49.9348 329.132 49.8107 cv
328.638 49.6877 327.587 49.4416 326.66 49.5017 cv
325.731 49.5646 326.473 49.5017 326.473 49.5017 cv
326.473 49.5017 328.731 49.1975 329.009 48.7014 cv
329.318 48.1447 328.577 46.1091 328.081 44.8137 cv
327.587 43.5202 326.908 41.5436 326.597 41.2971 cv
326.29 41.05 325.486 40.9274 325.238 40.6188 cv
324.99 40.3098 324.745 39.9411 324.247 39.8786 cv
324.247 39.8786 325.486 39.8171 325.486 39.385 cv
325.486 38.9533 324.867 37.7185 324.372 36.9792 cv
323.878 36.238 323.382 35.3747 323.199 35.1286 cv
323.011 34.8811 323.136 34.3259 324.063 35.6213 cv
324.99 36.9182 327.277 40.1862 327.462 40.6804 cv
327.649 41.174 328.268 42.3469 328.886 41.114 cv
329.318 40.6188 li
329.318 40.6188 329.38 41.174 329.318 41.8518 cv
329.257 42.531 329.318 44.382 329.443 44.8752 cv
329.566 45.3698 330.245 47.7136 330.555 48.2687 cv
330.865 48.8244 331.361 50.3659 332.348 48.5778 cv
333.091 47.59 li
333.091 47.59 333.214 47.1594 333.335 46.9118 cv
333.335 46.9118 333.091 48.8854 332.719 49.9348 cv
332.348 50.9841 332.1 52.2785 332.656 52.8967 cv
cp
319.487 48.3923 mo
319.363 49.1325 319.117 48.9484 318.867 48.8854 cv
318.614 48.822 318.738 48.5573 317.942 48.2687 cv
317.532 48.1198 315.531 48.1447 315.285 48.0212 cv
315.037 47.8981 315.344 47.5285 316.024 47.4675 cv
316.705 47.4045 317.201 47.0358 316.768 46.4191 cv
316.334 45.8 314.108 43.3332 313.056 42.4699 cv
312.004 41.6066 311.265 40.8664 310.771 40.4953 cv
310.276 40.1247 310.028 39.6936 309.658 39.632 cv
309.287 39.5695 308.606 39.3244 307.926 39.385 cv
307.248 39.446 306.627 39.5695 306.442 39.2619 cv
306.256 38.9533 307.182 38.7077 307.182 38.3986 cv
307.182 38.09 306.749 37.5954 306.256 37.2258 cv
305.763 36.8566 305.467 36.6413 305.142 36.424 cv
304.403 35.9304 303.288 35.5598 303.103 35.3747 cv
302.919 35.1901 302.67 34.9436 302.422 34.758 cv
302.176 34.5729 301.557 34.5729 301.496 34.2648 cv
301.496 34.2648 302.609 33.7097 302.98 33.6481 cv
302.98 33.6481 304.403 35.3142 304.894 35.4377 cv
305.39 35.5598 306.442 36.3019 306.69 36.3615 cv
306.937 36.424 307.926 36.9182 308.235 37.0412 cv
308.544 37.1643 309.226 37.2873 309.226 36.5471 cv
309.287 35.8073 li
309.287 35.8073 309.658 35.9304 309.965 36.6091 cv
310.276 37.2873 310.461 38.1511 310.707 38.3986 cv
310.957 38.6442 312.933 40.4953 313.119 40.6804 cv
313.304 40.8664 316.396 44.1364 316.643 44.444 cv
316.892 44.7531 318.313 46.6037 318.56 46.8493 cv
318.808 47.0974 319.612 47.652 319.487 48.3923 cv
cp
354.916 64.4943 mo
353.864 64.0017 352.01 64.0017 351.207 62.6433 cv
350.403 61.2863 350.588 59.6198 350.648 58.2624 cv
350.711 56.9055 350.772 55.9191 350.215 55.2394 cv
349.66 54.5607 349.476 54.3771 348.608 53.8825 cv
347.744 53.3898 346.876 52.9572 346.385 51.9079 cv
345.937 50.9621 345.994 49.7644 345.917 48.6784 cv
345.854 48.3527 345.808 48.0422 345.774 47.7565 cv
345.504 46.7453 344.853 45.7214 344.282 45.3073 cv
343.601 44.8137 342.982 43.9499 342.673 43.2087 cv
342.364 42.4699 342.301 42.0378 342.178 41.6667 cv
342.053 41.2971 341.683 40.8024 341.374 41.7307 cv
341.066 42.656 340.758 43.4562 340.323 43.8894 cv
339.891 44.3205 338.84 45.6789 338.779 46.2951 cv
338.717 46.9118 338.717 47.4675 338.962 47.9611 cv
339.212 48.4538 339.83 49.5646 339.83 50.1818 cv
339.83 50.7985 339.583 52.0939 339.026 52.5876 cv
338.467 53.0808 337.294 54.0065 337.109 54.4992 cv
336.923 54.9934 336.739 55.9191 337.171 56.4743 cv
337.602 57.029 338.903 58.695 339.212 59.1892 cv
339.519 59.6818 340.323 61.4094 339.707 62.3352 cv
339.085 63.26 338.467 62.7663 338.346 62.0261 cv
338.223 61.2863 338.467 60.4836 337.047 59.1257 cv
335.624 57.7687 333.832 56.0412 334.266 54.4387 cv
334.698 52.8332 335.439 52.6491 335.872 52.2785 cv
336.305 51.9079 337.419 51.2311 337.48 50.4269 cv
337.54 49.6262 336.675 48.2687 336.55 47.59 cv
336.428 46.9118 336.243 45.7394 336.987 44.6911 cv
337.398 44.1081 337.77 43.7556 338.095 43.4499 cv
337.871 43.53 337.034 43.4958 336.696 43.3918 cv
335.892 43.1447 334.204 42.0378 333.707 41.174 cv
333.214 40.3098 332.719 39.0769 332.473 37.5349 cv
332.223 35.9929 331.607 35.2517 329.937 35.3142 cv
328.268 35.3747 326.29 35.4977 325.731 33.7717 cv
325.177 32.0446 324.805 29.7604 323.011 28.8972 cv
321.218 28.0334 320.538 28.5891 319.425 27.2936 cv
318.313 25.9978 317.261 25.6271 317.509 26.9846 cv
317.756 28.3415 317.386 29.5759 317.261 30.0695 cv
317.14 30.5622 317.756 32.0446 318.252 32.6608 cv
318.746 33.279 319.825 34.4528 319.92 35.9929 cv
319.983 36.9792 319.859 37.5954 319.672 38.1511 cv
319.487 38.7077 319.239 39.5695 319.425 40.0642 cv
319.612 40.5573 320.229 41.114 321.836 42.0378 cv
323.447 42.9636 324.247 45.4304 323.878 46.6037 cv
323.506 47.7751 322.828 49.194 323.074 49.6262 cv
323.32 50.0583 323.816 50.7365 324.867 51.4763 cv
325.918 52.217 327.277 53.2048 327.957 54.3142 cv
328.638 55.425 329.257 57.3996 329.257 58.2624 cv
329.257 59.1257 328.7 59.6198 328.206 58.6325 cv
327.709 57.6457 327.401 57.152 327.277 56.6594 cv
327.156 56.1667 326.908 55.5485 326.349 54.9934 cv
325.794 54.4387 325.113 53.6975 323.938 53.1423 cv
322.765 52.5876 321.404 51.6618 320.847 49.9348 cv
320.29 48.2062 321.343 47.343 321.466 46.4792 cv
321.588 45.6149 321.899 44.6911 319.92 43.7653 cv
317.942 42.84 316.83 41.2971 316.951 39.385 cv
317.076 37.4733 318.065 36.3019 317.449 35.7453 cv
317.449 35.7453 317.015 35.9509 316.396 35.8898 cv
315.778 35.8269 313.427 34.9636 312.563 34.2849 cv
311.698 33.6076 310.584 32.4953 309.842 31.3859 cv
309.101 30.2751 307.616 30.3991 306.627 30.8303 cv
305.638 31.2624 304.525 31.5095 303.536 30.7692 cv
302.547 30.029 302.237 29.6584 301.868 29.1652 cv
301.496 28.6716 300.073 28.1159 299.639 28.3635 cv
299.208 28.6091 298.28 29.7814 296.488 29.5964 cv
294.693 29.4118 294.447 29.2668 293.582 29.0202 cv
292.714 28.7741 292.036 28.4665 291.79 28.8972 cv
291.542 29.3293 291.975 30.1311 292.591 30.4392 cv
293.209 30.7478 294.509 31.4895 295.003 32.5373 cv
295.499 33.5866 295.374 34.696 295.685 35.0051 cv
295.993 35.3142 296.177 35.5598 296.611 35.6213 cv
297.044 35.6852 298.835 35.8684 299.639 36.4855 cv
300.445 37.1018 301.496 38.0275 301.496 40.3723 cv
301.496 42.716 305.205 42.0378 305.823 42.0993 cv
306.442 42.1608 308.544 42.7775 309.533 44.0729 cv
310.523 45.3698 310.83 46.5422 310.276 48.6394 cv
309.719 50.7365 309.719 51.5383 310.398 52.0324 cv
311.08 52.5261 310.83 53.1423 313.924 53.2663 cv
317.015 53.3898 320.599 54.1301 322.703 55.6726 cv
324.805 57.2136 325.177 58.2023 324.745 58.6325 cv
324.311 59.0656 324.125 59.0031 324.125 59.0031 cv
324.125 59.0031 324.682 59.1257 324.99 59.2502 cv
325.297 59.3732 326.349 59.8059 327.031 60.237 cv
327.709 60.6682 328.143 60.7922 328.824 60.6076 cv
329.505 60.4226 329.689 60.175 330.493 60.1149 cv
331.296 60.051 332.533 59.6818 333.957 60.7311 cv
335.376 61.779 336.243 62.5812 336.491 62.8283 cv
336.739 63.0744 337.355 64.3093 338.717 64.0617 cv
340.078 63.8146 341.87 64.1232 343.169 66.0363 cv
344.465 67.9499 345.023 70.2307 346.385 70.3561 cv
347.744 70.4782 348.547 70.4782 349.04 70.8488 cv
349.537 71.2199 350.834 72.2058 351.207 73.1306 cv
351.578 74.0559 352.133 75.8449 352.258 76.5251 cv
352.381 77.2033 352.626 78.0041 352.938 78.2512 cv
353.248 78.4987 354.42 79.1144 354.977 79.424 cv
355.535 79.7321 356.77 80.965 356.522 82.4465 cv
356.274 83.9265 356.09 83.4328 355.718 83.3713 cv
355.347 83.3098 355.039 83.0632 354.977 82.508 cv
354.916 81.9528 354.608 81.5827 354.05 81.2131 cv
353.492 80.8425 352.938 80.4709 352.444 80.2873 cv
351.948 80.1022 350.582 78.9841 350.025 76.8869 cv
349.469 74.7883 349.407 73.9269 348.232 73.4313 cv
347.057 72.9387 346.501 72.8781 345.882 72.7541 cv
345.264 72.6296 343.539 72.1433 342.859 70.7248 cv
342.178 69.3068 342.295 68.4362 341.925 67.9421 cv
341.554 67.4484 340.875 66.5236 339.947 66.3376 cv
339.018 66.153 337.472 66.4001 336.362 65.7214 cv
335.249 65.0432 334.752 63.9938 334.258 63.5012 cv
333.765 63.0051 332.897 62.2663 331.969 62.3889 cv
331.043 62.5124 330.362 62.5749 329.746 62.76 cv
329.126 62.9455 328.323 62.883 327.642 62.5749 cv
326.961 62.2663 326.165 61.9645 325.794 61.8405 cv
325.422 61.718 324.682 61.5314 324.434 61.718 cv
324.186 61.903 323.816 62.3352 325.052 63.26 cv
326.29 64.1852 326.908 64.6184 327.709 65.5436 cv
328.513 66.468 328.824 66.9006 328.886 68.0095 cv
328.948 69.1213 328.638 69.9846 329.443 70.7248 cv
330.245 71.465 330.493 71.465 330.865 71.8366 cv
331.236 72.2058 331.667 72.6984 332.165 73.5622 cv
332.656 74.4255 332.719 74.7355 332.656 75.4133 cv
332.596 76.0915 332.473 77.3259 332.719 77.6345 cv
332.966 77.9426 333.771 78.5598 334.139 78.9289 cv
334.511 79.3005 335.13 79.9782 335.13 80.965 cv
335.13 81.9528 334.943 83.989 335.376 84.6052 cv
335.81 85.2224 337.109 86.2712 337.294 86.8254 cv
337.48 87.382 337.419 87.6281 337.294 87.7517 cv
337.294 87.7517 337.665 88.0607 338.038 88.1828 cv
338.407 88.3073 340.078 88.3073 340.635 88.739 cv
341.189 89.1716 343.353 90.281 343.724 91.8229 cv
344.096 93.3659 344.035 93.9211 344.22 94.2292 cv
344.405 94.5373 345.333 95.217 345.703 95.6496 cv
346.075 96.0803 346.385 96.635 347.187 96.3884 cv
347.991 96.1423 349.228 95.5241 349.845 95.5856 cv
350.463 95.6496 351.7 96.0178 352.444 96.4499 cv
353.183 96.883 353.74 97.4377 354.298 96.2663 cv
354.854 95.093 355.162 94.7849 355.47 94.4152 cv
355.783 94.0436 356.584 92.3181 355.842 91.2062 cv
355.102 90.0954 354.791 89.1716 354.791 88.4313 cv
354.791 87.6896 355.347 86.4558 355.842 85.9016 cv
356.338 85.3454 357.513 84.6667 357.513 83.7414 cv
357.513 82.8161 357.328 82.3229 357.142 81.7062 cv
356.956 81.0895 357.018 78.8073 357.328 78.3747 cv
357.636 77.9426 358.377 76.8327 358.502 76.5852 cv
358.625 76.3391 357.266 75.5978 357.142 75.1657 cv
357.018 74.7355 356.77 74.4255 356.647 73.8093 cv
356.522 73.1916 356.029 70.6633 355.967 69.7995 cv
355.959 69.7014 355.955 69.5588 355.949 69.3903 cv
355.861 68.6159 355.806 67.7678 355.791 66.842 cv
355.663 65.7473 355.416 64.7287 354.916 64.4943 cv
cp
f
297.661 24.5783 mo
297.475 24.9045 296.301 23.6545 295.93 23.2839 cv
295.559 22.9128 295.312 22.6042 294.693 22.4201 cv
294.075 22.2346 293.518 21.9265 293.334 21.9265 cv
293.15 21.9265 291.911 21.988 291.602 21.8654 cv
291.293 21.7419 290.925 21.4328 291.479 21.3093 cv
292.036 21.1853 292.777 21.0622 293.025 20.8156 cv
293.275 20.5686 293.209 20.3215 293.025 19.9523 cv
292.837 19.5817 291.542 17.9787 291.169 17.6076 cv
290.798 17.237 290.366 16.1276 289.13 15.7565 cv
287.891 15.3864 287.647 15.3864 287.336 15.3244 cv
287.027 15.2639 285.731 15.2639 285.42 15.2014 cv
285.113 15.1398 284.988 14.9562 285.606 14.9562 cv
286.223 14.9562 286.966 14.8923 287.275 14.7082 cv
287.582 14.5231 287.956 14.5231 287.891 14.2761 cv
287.831 14.031 287.647 13.5353 287.459 13.2888 cv
287.275 13.0427 286.843 12.9191 286.904 12.6101 cv
286.966 12.302 287.212 12.1174 287.523 12.486 cv
287.831 12.8576 288.822 13.7214 289.067 13.8439 cv
289.315 13.967 290.428 14.9562 290.552 15.2639 cv
290.552 15.2639 291.356 15.8801 291.602 15.3864 cv
291.85 14.8923 292.159 14.2145 292.159 14.2145 cv
292.159 14.2145 292.714 15.2639 292.777 15.9416 cv
292.837 16.6208 293.15 18.2258 293.706 18.779 cv
294.26 19.3356 295.312 20.446 295.622 20.8776 cv
295.93 21.3093 296.673 22.6042 297.044 23.0363 cv
297.415 23.4685 298.157 23.7145 297.661 24.5783 cv
cp
290.304 34.0793 mo
290.673 34.3884 291.725 35.0671 291.169 35.3747 cv
290.825 35.5661 290.059 35.3747 289.811 35.1286 cv
289.563 34.8811 287.647 33.8317 287.151 33.5866 cv
286.656 33.3391 285.977 32.9685 285.479 32.6608 cv
284.988 32.3522 283.875 31.9821 283.566 31.8586 cv
283.256 31.7355 282.946 31.8586 282.577 32.0446 cv
282.205 32.2292 280.845 32.2897 280.597 32.0446 cv
280.597 32.0446 280.989 31.5617 281.154 31.3659 cv
281.464 30.9953 280.968 30.7478 280.597 30.6252 cv
280.221 30.4992 280.102 30.1311 279.485 29.946 cv
278.869 29.7604 278.246 29.4523 278.617 29.3293 cv
278.989 29.2053 279.608 29.3293 279.733 29.0202 cv
279.854 28.7126 279.916 27.8488 279.916 27.8488 cv
279.916 27.8488 280.349 28.156 280.597 28.4035 cv
280.597 28.4035 281.897 29.8835 282.266 30.0695 cv
282.636 30.2546 283.256 30.6867 283.75 30.7478 cv
284.244 30.8093 284.802 30.9953 284.925 31.1804 cv
285.047 31.3659 285.791 31.6115 286.04 31.3034 cv
286.286 30.9953 286.471 30.1931 286.41 29.8835 cv
286.41 29.8835 286.904 29.7604 287.089 30.3166 cv
287.275 30.8728 287.831 32.1061 288.079 32.4152 cv
288.327 32.7224 288.512 33.0314 288.822 33.0925 cv
289.13 33.154 289.934 33.7717 290.304 34.0793 cv
cp
307.441 28.2834 mo
307.445 28.3347 306.391 25.8903 306.256 24.9489 cv
306.071 23.6545 305.946 20.7541 305.575 19.7687 cv
305.205 18.779 304.525 17.114 303.661 16.6818 cv
302.794 16.2502 299.58 15.695 298.776 15.4489 cv
297.969 15.2014 297.661 14.8923 297.29 14.5847 cv
296.921 14.2761 295.807 12.55 295.312 11.6247 cv
294.818 10.6989 293.518 8.53828 292.468 8.10761 cv
291.417 7.67451 291.311 7.58857 290.673 7.67451 cv
290.401 7.71162 288.512 8.23066 288.016 8.29267 cv
287.523 8.3542 286.347 8.3542 285.852 7.98554 cv
285.358 7.61396 284.369 6.68867 283.69 5.82539 cv
283.009 4.96113 282.329 4.1584 281.279 3.97431 cv
280.226 3.78974 279.741 3.92695 279.175 4.1584 cv
278.782 4.32002 276.08 4.62519 275.022 4.09101 cv
274.652 3.904 273.487 3.41914 273.301 3.78974 cv
273.117 4.1584 273.239 4.77509 273.92 5.33076 cv
274.599 5.88691 275.281 6.62715 275.526 7.30488 cv
275.774 7.98554 275.959 8.9709 276.022 9.52607 cv
276.084 10.0808 276.578 10.883 277.133 11.1916 cv
277.692 11.5007 278.804 12.0559 279.113 12.364 cv
279.42 12.6721 280.226 13.2272 280.597 14.5231 cv
280.968 15.8205 280.906 17.237 281.709 17.4841 cv
282.515 17.7307 284.369 18.1013 285.236 19.2727 cv
286.1 20.446 286.223 20.8156 286.41 21.5559 cv
286.595 22.2961 286.843 24.0852 287.212 24.4548 cv
287.582 24.8259 288.327 25.4426 288.759 25.6901 cv
289.19 25.9353 289.687 26.677 289.378 27.1701 cv
289.127 27.5676 288.699 27.1701 288.327 26.9846 cv
287.956 26.7995 286.904 26.861 286.531 26.614 cv
286.162 26.3679 285.113 25.6901 284.802 25.1335 cv
284.691 24.9338 284.603 24.7722 284.526 24.6223 cv
284.509 24.6247 284.497 24.6291 284.48 24.6315 cv
284.481 24.632 li
284.481 24.632 283.593 25.3723 282.089 25.2316 cv
280.821 25.1125 279.727 24.4265 279.481 24.0563 cv
279.233 23.6862 278.371 23.2839 277.752 23.7145 cv
277.133 24.1481 275.711 25.5041 274.847 25.3811 cv
273.983 25.2575 272.251 24.7639 271.694 24.7639 cv
271.137 24.7639 270.767 24.8884 270.458 25.1965 cv
270.148 25.5041 269.715 26.4909 270.519 27.0471 cv
271.324 27.6032 272.375 27.8488 272.93 28.8972 cv
273.487 29.946 273.487 29.6384 273.427 31.6115 cv
273.364 33.5866 272.991 34.821 275.526 35.0671 cv
278.062 35.3142 281.772 34.821 282.824 35.5598 cv
283.875 36.3019 283.997 36.6091 284.244 37.3493 cv
284.494 38.09 284.494 39.446 284.307 40.0642 cv
284.121 40.6804 283.813 41.7307 284.925 42.0378 cv
286.04 42.3469 286.843 42.3469 288.016 42.3469 cv
289.19 42.3469 291.542 42.4079 292.159 42.656 cv
292.777 42.9011 294.757 44.1364 295.25 44.9367 cv
295.745 45.7394 295.87 46.1716 295.807 46.7258 cv
295.807 46.7258 297.536 46.048 298.467 46.048 cv
299.394 46.048 300.073 46.1716 300.445 46.3561 cv
300.816 46.5422 302.361 46.9724 302.919 46.9724 cv
303.473 46.9724 305.332 46.3561 305.698 46.4191 cv
306.071 46.4792 307.123 46.6037 307.371 47.2199 cv
307.616 47.8366 307.494 48.1447 306.378 48.2062 cv
305.266 48.2687 304.894 49.0705 304.462 49.0705 cv
304.032 49.0705 301.557 49.1325 300.939 49.009 cv
300.32 48.8854 299.639 48.4538 299.208 48.4538 cv
298.776 48.4538 297.848 48.5153 297.044 49.009 cv
296.241 49.5017 294.693 50.4269 294.075 50.551 cv
293.458 50.675 291.602 50.6125 291.046 50.6125 cv
290.491 50.6125 289.563 50.8601 289.563 51.4763 cv
289.563 51.8513 289.634 52.1574 289.895 52.4509 cv
290.066 52.5769 290.249 52.7019 290.454 52.822 cv
291.533 53.4597 292.033 53.4973 292.442 54.0012 cv
292.94 54.3679 293.389 54.8464 293.643 55.5485 cv
294.202 57.0905 294.323 58.509 295.312 58.6325 cv
296.301 58.7556 297.601 58.695 298.157 58.695 cv
298.712 58.695 300.26 58.571 300.999 59.4968 cv
301.744 60.4226 301.991 61.4719 301.868 62.9514 cv
301.744 64.4323 301.868 65.2956 302.547 65.7272 cv
303.228 66.1603 303.967 66.7766 306.317 66.2209 cv
308.667 65.6657 311.881 65.6037 312.808 66.0988 cv
313.739 66.5915 313.924 66.7766 314.108 66.9602 cv
314.292 67.1457 314.356 67.3317 314.603 67.2082 cv
314.851 67.0852 314.974 66.9006 315.344 66.7766 cv
315.717 66.653 316.768 66.1603 317.509 66.2824 cv
318.252 66.4079 318.808 66.53 319.117 66.653 cv
319.425 66.7766 320.352 67.6408 321.714 67.0241 cv
323.074 66.4079 324.372 67.0241 324.805 67.2697 cv
325.238 67.5173 325.918 68.319 324.93 68.2575 cv
323.938 68.195 323.447 68.072 323.199 68.072 cv
322.951 68.072 322.27 68.072 322.084 68.2575 cv
321.899 68.4426 321.528 68.6887 321.095 68.8137 cv
320.663 68.9352 319.117 68.6887 318.56 68.3806 cv
318.002 68.072 316.951 68.0095 316.396 68.7502 cv
315.84 69.4909 315.037 70.9724 314.417 71.28 cv
313.8 71.5891 313.8 71.5891 313.304 71.7727 cv
312.808 71.9582 311.944 72.1433 311.511 72.2058 cv
311.08 72.2663 310.707 72.2663 310.523 72.3293 cv
310.393 72.3727 309.684 72.9352 309.9 73.4157 cv
310.328 73.6535 310.916 73.8952 311.706 74.1369 cv
312.718 74.3435 313.074 74.4221 313.614 75.3518 cv
314.292 76.5251 314.292 77.2033 314.292 77.572 cv
314.292 77.9426 313.985 80.1022 315.653 79.6706 cv
317.324 79.238 318.087 78.9538 319.425 79.1765 cv
320.538 79.362 321.095 80.4103 321.218 80.7185 cv
321.343 81.027 322.207 83.0021 323.011 83.3098 cv
323.816 83.6188 324.557 83.6804 325.297 83.6188 cv
326.041 83.5559 328.19 83.2145 329.009 83.3098 cv
330.309 83.4616 330.741 83.9265 331.236 84.2971 cv
331.729 84.6667 332.473 85.4069 332.409 85.9621 cv
332.348 86.5183 331.323 87.4763 331.136 87.5383 cv
331.216 87.59 331.291 87.6408 331.361 87.6896 cv
332.409 88.4313 333.335 88.924 333.893 88.9865 cv
334.452 89.0476 335.624 89.0476 336.057 88.6149 cv
336.491 88.1828 336.491 87.9372 336.368 87.7517 cv
336.243 87.5666 334.759 86.8254 334.204 86.3327 cv
334.204 86.3327 333.091 85.531 333.091 84.1125 cv
333.091 82.6936 333.335 80.781 332.596 80.4709 cv
331.855 80.1638 331.113 79.9167 331.048 80.2258 cv
330.989 80.5334 331.048 80.781 331.361 81.1516 cv
331.667 81.5202 331.236 82.0769 330.865 81.8293 cv
330.493 81.5827 329.937 80.8425 329.505 80.5334 cv
329.072 80.2258 328.206 79.9782 327.525 80.1022 cv
326.846 80.2258 326.349 79.7932 326.722 79.548 cv
327.093 79.3005 327.341 79.0544 326.968 78.7453 cv
326.597 78.4362 324.805 77.0178 322.828 76.3391 cv
320.847 75.6613 320.168 75.3518 319.672 75.2282 cv
319.179 75.1042 318.686 74.9807 318.127 74.7355 cv
317.572 74.488 315.037 74.364 314.789 74.364 cv
314.54 74.364 314.17 73.9953 315.097 73.9953 cv
316.024 73.9953 318.127 74.1789 318.808 73.8093 cv
319.487 73.4392 319.487 73.3786 319.304 73.0695 cv
319.304 73.0695 319.859 73.0075 320.29 73.6237 cv
320.724 74.2429 321.961 75.1042 322.641 75.3518 cv
323.32 75.5978 324.186 76.03 324.682 75.8449 cv
325.177 75.6613 325.238 74.9201 325.113 74.5495 cv
324.99 74.1789 324.867 73.6237 324.805 73.4392 cv
324.745 73.2551 325.363 73.7477 325.486 74.0559 cv
325.611 74.364 326.538 76.4621 326.846 76.8327 cv
327.156 77.2033 327.709 77.6345 328.452 78.1911 cv
329.195 78.7453 329.628 78.9909 329.875 79.1144 cv
330.122 79.238 330.37 79.0544 330.122 78.3127 cv
329.875 77.572 329.937 76.9558 330.245 76.2145 cv
330.555 75.4758 331.171 74.364 329.999 73.8093 cv
328.824 73.2551 327.587 72.3293 326.846 71.402 cv
326.102 70.4782 326.29 69.3664 326.349 68.319 cv
326.413 67.2697 326.597 66.468 324.805 65.2956 cv
323.011 64.1232 323.199 63.7541 322.828 63.8781 cv
322.455 64.0017 322.207 64.0617 322.022 64.2468 cv
321.836 64.4323 319.736 64.3093 318.994 64.0017 cv
318.252 63.6926 317.879 63.321 317.261 63.26 cv
316.643 63.1975 315.531 62.6433 315.097 62.4577 cv
314.665 62.2727 313.8 61.4094 313.119 61.2243 cv
312.44 61.0388 311.328 61.1003 310.646 61.1618 cv
309.965 61.2243 309.025 61.7023 308.96 61.3918 cv
308.9 61.0842 309.915 60.3142 310.151 60.1149 cv
310.584 59.7443 310.338 59.6818 309.78 59.3732 cv
309.226 59.0656 308.11 58.3869 307.494 58.0163 cv
306.874 57.6457 304.711 56.4743 304.711 56.4743 cv
304.711 56.4743 304.155 56.1027 303.599 55.9807 cv
303.042 55.8561 303.163 55.5485 302.98 55.5485 cv
302.794 55.5485 301.928 55.4865 301.372 55.6101 cv
300.816 55.7331 299.702 56.1667 299.332 55.9191 cv
299.332 55.9191 301.889 54.6032 303.599 55.3024 cv
303.599 55.3024 304.711 55.3635 305.205 55.6726 cv
305.698 55.9807 306.627 56.4128 307.058 56.2268 cv
307.494 56.0412 307.555 55.5485 307.371 55.0544 cv
307.371 55.0544 308.11 55.3024 308.73 56.3498 cv
309.347 57.3996 309.347 57.3996 309.905 57.7087 cv
310.461 58.0163 312.625 59.3117 313.119 59.6198 cv
313.614 59.9289 314.292 60.175 314.603 60.361 cv
314.912 60.5451 315.903 61.4094 316.396 60.6682 cv
316.892 59.9289 316.892 60.361 317.076 60.6682 cv
317.261 60.9772 317.695 61.718 318.624 62.1481 cv
319.552 62.5812 320.476 62.8894 321.218 63.1374 cv
321.961 63.3835 322.703 63.507 322.207 62.5812 cv
321.714 61.656 322.332 60.237 322.765 59.8059 cv
323.199 59.3732 323.382 59.0656 323.63 59.0656 cv
323.63 59.0656 322.641 58.3254 322.084 57.8923 cv
321.528 57.4606 320.106 56.2268 317.076 55.9191 cv
314.047 55.6101 313.677 55.4865 313.181 55.425 cv
312.687 55.3635 312.129 55.5485 310.523 54.7468 cv
308.915 53.944 308.482 53.8205 308.049 52.8967 cv
307.616 51.9709 307.43 50.6125 307.678 49.6877 cv
307.926 48.7624 308.667 46.6643 308.174 46.1091 cv
307.678 45.5549 307.555 44.9987 305.698 44.444 cv
303.846 43.8894 302.484 44.444 301.496 43.8894 cv
300.506 43.3332 299.702 42.9011 299.394 41.5436 cv
299.085 40.1862 299.021 38.8293 297.969 38.7077 cv
296.921 38.5827 295.066 38.0275 294.447 37.4733 cv
293.829 36.9182 293.025 36.7946 292.962 34.696 cv
292.902 32.5988 292.837 32.3522 291.169 30.9953 cv
289.5 29.6384 290.119 27.9724 290.428 27.6032 cv
290.739 27.2321 292.036 26.4909 293.518 26.7995 cv
295.003 27.1086 296.118 27.9724 297.105 27.2936 cv
298.096 26.614 299.316 25.968 299.764 25.9978 cv
300.423 26.0407 301.557 26.3068 302.609 27.3552 cv
303.661 28.4035 304.462 29.6384 306.071 28.8356 cv
306.614 28.5646 307.054 28.4006 307.466 28.322 cv
307.457 28.3034 307.449 28.2844 307.44 28.2653 cv
307.441 28.2707 307.44 28.2785 307.441 28.2834 cv
cp
f
193.096 256.697 mo
193.197 257.827 li
0 0 0 0 cmyk
f
189.576 279.8 mo
189.847 277.82 189.865 276.612 189.322 275.682 cv
189.001 275.132 188.213 274.771 187.306 274.715 cv
185.312 274.593 184.131 275.839 183.721 278.829 cv
183.314 281.8 184.242 282.959 186.448 283.094 cv
187.415 283.154 188.134 282.912 188.604 282.37 cv
189.074 281.829 189.378 281.235 189.576 279.8 cv
cp
188.706 289.994 mo
188.959 287.853 188.968 286.63 188.562 285.725 cv
188.157 284.82 187.178 284.213 185.902 284.122 cv
184.704 284.038 183.79 284.38 183.161 285.151 cv
182.531 285.921 182.162 287.024 181.948 288.842 cv
181.737 290.62 182.031 291.807 182.549 292.648 cv
183.066 293.489 184.002 293.958 185.357 294.055 cv
186.425 294.131 187.227 293.847 187.763 293.202 cv
188.298 292.558 188.52 291.57 188.706 289.994 cv
cp
193.927 289.537 mo
193.78 290.992 193.004 292.202 191.603 293.165 cv
189.836 294.384 187.681 294.888 185.137 294.677 cv
182.683 294.473 180.705 293.779 179.205 292.595 cv
177.704 291.411 177.036 290.011 177.2 288.395 cv
177.392 286.495 178.359 285.159 180.103 284.387 cv
180.927 284.028 182.07 283.736 183.533 283.511 cv
183.515 283.356 li
180.419 282.365 178.987 280.739 179.216 278.477 cv
179.365 277.001 180.146 275.844 181.559 275.003 cv
182.972 274.163 184.704 273.828 186.757 273.998 cv
188.966 274.182 190.693 274.793 191.938 275.834 cv
193.183 276.874 193.729 278.153 193.576 279.668 cv
193.367 281.729 191.775 283.114 188.801 283.825 cv
188.789 283.946 li
192.484 285.007 194.197 286.871 193.927 289.537 cv
cp
0 0 0 1 cmyk
f
199.987 278.835 mo
200.113 277.708 200.607 276.756 201.468 275.978 cv
202.618 274.941 204.275 274.337 206.441 274.167 cv
208.672 273.992 210.456 274.443 211.97 275.452 cv
213.484 276.462 214.133 277.76 214.303 279.536 cv
214.637 283.027 212.337 286.852 205.859 290.892 cv
206.016 290.88 li
209.064 290.641 li
211.495 290.429 213.064 290.255 213.771 290.117 cv
214.722 289.96 215.351 289.706 215.655 289.353 cv
215.874 289.069 216.25 287.944 216.406 287.102 cv
216.683 286.857 217.083 286.51 217.083 286.51 cv
217.012 286.721 216.922 287.325 216.899 287.551 cv
216.729 289.296 216.67 291.388 216.724 293.827 cv
214.038 293.957 211.421 294.121 208.876 294.321 cv
208.743 294.332 208.475 294.359 208.074 294.4 cv
207.539 294.452 207.092 294.492 206.736 294.52 cv
202.093 294.962 li
201.937 294.975 201.77 294.995 201.593 295.025 cv
201.191 295.04 li
200.387 295.103 200.109 295.019 200.085 294.777 cv
200.07 294.615 200.217 294.401 200.53 294.132 cv
203.066 291.96 205.381 289.833 207.087 287.798 cv
208.793 285.763 209.51 283.322 209.238 280.477 cv
209.056 278.579 208.415 277.165 207.313 276.235 cv
206.531 275.585 205.538 275.308 204.332 275.402 cv
203.328 275.481 202.52 275.804 201.911 276.371 cv
201.301 276.939 200.915 278.199 200.97 278.765 cv
199.987 278.835 li
cp
f
232.762 278.243 mo
232.305 276.418 231.718 274.902 231.001 273.693 cv
230.077 272.11 229.013 271.442 227.811 271.689 cv
226.958 271.863 226.457 272.384 226.306 273.249 cv
226.156 274.114 226.322 275.509 226.803 277.434 cv
227.847 281.6 229.363 283.479 231.352 283.07 cv
232.225 282.891 232.753 282.339 232.936 281.414 cv
233.119 280.49 233.06 279.434 232.762 278.243 cv
cp
238.149 278.148 mo
238.729 280.463 238.616 282.692 237.808 284.833 cv
237 286.977 235.592 288.764 233.584 290.195 cv
231.986 291.334 229.842 292.181 227.154 292.733 cv
227.083 292.643 227.034 292.504 226.952 292.337 cv
228.017 292.097 229.104 291.572 230.21 290.763 cv
231.434 289.867 232.37 288.603 233.018 286.972 cv
233.666 285.341 233.872 283.728 233.633 282.133 cv
232.625 283.339 231.444 284.081 230.089 284.359 cv
228.122 284.763 226.356 284.523 224.79 283.637 cv
223.224 282.752 222.22 281.429 221.78 279.668 cv
221.284 277.69 221.586 275.895 222.688 274.285 cv
223.79 272.676 225.412 271.651 227.554 271.211 cv
229.237 270.865 230.894 270.973 232.529 271.53 cv
235.423 272.539 237.296 274.744 238.149 278.148 cv
cp
f
164.781 274.745 mo
164.751 274.539 164.469 274.467 164.469 274.467 cv
159.998 273.541 li
159.998 273.541 160.374 273.229 160.832 273.044 cv
161.314 272.85 162.447 272.795 162.447 272.795 cv
162.447 272.795 163.715 272.978 166.499 272.651 cv
167.93 272.483 170.588 271.154 170.588 271.154 cv
170.781 271.494 li
167.459 287.809 li
167.334 289.049 167.562 290.047 168.143 290.695 cv
168.721 291.345 169.199 291.834 170.49 292.237 cv
170.416 292.648 li
169.351 292.385 168.303 292.139 167.274 291.906 cv
166.245 291.676 165.166 291.446 164.04 291.22 cv
163.314 291.072 162.684 290.945 162.147 290.837 cv
161.609 290.729 161.126 290.637 160.695 290.562 cv
160.263 290.487 159.85 290.421 159.457 290.365 cv
159.064 290.31 158.637 290.247 158.177 290.178 cv
158.25 289.768 li
159.398 289.881 160.139 289.634 160.486 289.44 cv
160.889 289.214 162.081 288.603 162.446 287.075 cv
162.603 286.419 162.987 284.622 162.987 284.622 cv
164.739 275.404 li
164.739 275.404 164.814 274.979 164.781 274.745 cv
cp
f
227.788 308.129 mo
229.788 307.65 229.861 305.415 230.538 305.265 cv
231.502 305.049 230.684 306.41 231.61 307.477 cv
232.037 307.969 232.094 310.651 231.052 313.421 cv
230.856 313.945 230.505 314.712 230.246 315.045 cv
228.989 316.661 228.618 316.986 227.799 317.602 cv
226.886 318.29 225.568 319.009 224.496 319.295 cv
223.673 319.515 220.744 319.86 220.683 319.692 cv
219.715 317.003 220.867 316.73 221.621 316.337 cv
222.374 315.945 223.732 315.519 224.762 313.369 cv
225.486 311.861 226.181 310.964 225.351 309.452 cv
225.096 308.988 225.731 308.454 226.496 308.337 cv
227.066 308.297 226.981 308.322 227.788 308.129 cv
cp
f
235.246 340.243 mo
234.682 340.71 233.015 340.663 233.015 340.663 cv
229.199 339.415 228.621 338.353 228.621 338.353 cv
226.871 336.728 225.246 334.884 222.415 333.772 cv
217.683 332.212 217.589 333.087 214.777 333.821 cv
213.761 334.306 211.799 335.835 214.363 336.024 cv
215.202 336.157 215.759 336.303 216.211 336.431 cv
220.768 337.723 222.818 338.327 225.855 340.087 cv
229.901 342.432 229.849 342.291 231.154 342.506 cv
232.669 342.756 235.567 339.978 235.246 340.243 cv
cp
f
175.058 227.9 mo
180.981 231.568 189.308 234.9 198.425 234.905 cv
210.246 234.912 218.508 229.493 224.889 224.178 cv
223.151 221.567 li
217.35 226.462 210.151 231.942 198.852 231.779 cv
190.15 231.654 182.252 228.456 176.635 224.912 cv
f
202.8 96.4152 mo
202.8 96.4152 198.963 95.7473 196.141 95.7282 cv
193.462 95.7097 189.912 96.3767 189.912 96.3767 cv
189.154 99.4103 li
189.154 99.4103 192.476 98.4357 196.183 98.3791 cv
199.651 98.3259 203.477 99.4411 203.477 99.4411 cv
202.8 96.4152 li
cp
f
171.308 83.4543 mo
149.908 83.4543 li
149.301 81.1862 li
171.693 81.1862 li
171.308 83.4543 li
cp
f
222.761 83.4738 mo
241.671 83.4738 li
242.128 81.2062 li
222.355 81.2062 li
f
148.581 78.656 mo
159.412 78.656 li
157.936 76.3884 li
147.871 76.3884 li
148.581 78.656 li
cp
f
244.026 73.7878 mo
234.539 73.7878 li
235.588 71.5202 li
239.866 71.5202 li
244.026 73.7878 li
cp
f
155.996 73.4216 mo
152.134 73.4216 li
151.904 71.8864 li
154.309 71.8864 li
155.996 73.4216 li
cp
f
221.558 78.2897 mo
226.914 78.2897 li
222.297 76.7546 li
220.871 76.1657 li
221.558 78.2897 li
cp
f
231.203 78.656 mo
242.366 78.656 li
243.204 76.3884 li
232.568 76.3884 li
231.203 78.656 li
cp
f
170.173 88.2521 mo
148.267 88.2521 li
150.767 85.9846 li
170.558 85.9846 li
170.173 88.2521 li
cp
f
223.996 88.3063 mo
247.305 88.3063 li
244.189 86.0383 li
223.558 86.0383 li
f
200.371 85.9846 mo
192.871 85.9846 li
192.309 88.2526 li
200.808 88.2526 li
f
168.621 93.05 mo
144.058 93.05 li
142.938 90.7824 li
169.005 90.7824 li
168.621 93.05 li
cp
f
225.021 93.0881 mo
251.121 93.0881 li
252.199 90.8205 li
224.621 90.8205 li
f
201.382 90.7824 mo
191.433 90.7824 li
190.993 93.05 li
201.746 93.05 li
f
167.746 97.8483 mo
147.558 97.8483 li
146.438 95.5808 li
168.11 95.5808 li
167.746 97.8483 li
cp
f
226.433 97.8703 mo
247.496 97.8703 li
248.582 95.6027 li
225.739 95.6027 li
f
166.183 102.646 mo
151.371 102.646 li
149.933 100.379 li
166.596 100.379 li
166.183 102.646 li
cp
f
227.433 102.653 mo
243.808 102.653 li
245.589 100.385 li
227.033 100.385 li
f
276.253 102.63 mo
278.152 102.63 li
277.089 101.095 li
277.319 101.095 li
f
165.683 107.445 mo
154.839 107.445 li
153.308 105.176 li
166.107 105.176 li
165.683 107.445 li
cp
f
228.558 107.435 mo
240.683 107.435 li
242.496 105.167 li
227.933 105.167 li
f
141.433 107.445 mo
114.975 107.445 li
114.79 105.176 li
140.767 105.176 li
141.433 107.445 li
cp
f
257.996 107.471 mo
281.599 107.471 li
280.807 105.204 li
259.683 105.204 li
f
164.111 112.242 mo
158.464 112.242 li
156.777 109.975 li
164.496 109.975 li
164.111 112.242 li
cp
f
229.621 112.217 mo
237.683 112.217 li
239.027 109.949 li
229.183 109.949 li
f
145.267 112.217 mo
120.933 112.217 li
118.308 109.949 li
143.933 109.949 li
145.267 112.217 li
cp
f
255.058 112.217 mo
277.871 112.217 li
281.058 109.949 li
256.058 109.949 li
f
282.544 141.575 mo
286.152 141.575 li
284.965 139.804 li
284.339 139.275 li
282.544 141.575 li
cp
f
117.661 141.941 mo
110.558 141.941 li
111.121 139.674 li
116.183 139.674 li
117.661 141.941 li
cp
f
277.324 146.809 mo
297.401 146.809 li
297.084 144.541 li
279.527 144.541 li
f
121.621 146.809 mo
98.3496 146.809 li
98.8564 144.541 li
120.558 144.541 li
121.621 146.809 li
cp
f
272.976 151.677 mo
297.933 151.677 li
297.933 149.409 li
274.808 149.409 li
f
124.558 151.677 mo
97.9326 151.677 li
97.8706 149.409 li
125.496 149.409 li
124.558 151.677 li
cp
f
251.933 200.358 mo
273.725 200.358 li
269.6 198.091 li
251.609 198.091 li
f
145.461 200.358 mo
122.331 200.358 li
126.861 198.091 li
145.717 198.091 li
145.461 200.358 li
cp
f
224.141 200.358 mo
238.766 200.358 li
238.316 198.091 li
226.058 198.091 li
f
175.719 200.358 mo
159.121 200.358 li
159.77 198.091 li
173.777 198.091 li
175.719 200.358 li
cp
f
229.016 195.49 mo
236.975 195.49 li
236.473 193.222 li
230.326 193.222 li
f
171.089 195.49 mo
160.732 195.49 li
161.076 193.222 li
169.197 193.222 li
171.089 195.49 li
cp
f
252.871 205.226 mo
284.308 205.226 li
280.621 202.959 li
252.617 202.959 li
f
145.043 205.226 mo
111.975 205.226 li
115.604 202.959 li
145.289 202.959 li
145.043 205.226 li
cp
f
228.342 205.226 mo
240.475 205.226 li
240.024 202.959 li
227.066 202.959 li
f
172.286 205.226 mo
157.873 205.226 li
158.321 202.959 li
173.619 202.959 li
172.286 205.226 li
cp
f
254.058 210.094 mo
287.464 210.094 li
288.902 207.826 li
253.652 207.826 li
f
143.516 210.094 mo
108.652 210.094 li
107.708 207.826 li
143.773 207.826 li
143.516 210.094 li
cp
f
232.322 210.094 mo
241.808 210.094 li
241.358 207.826 li
231.067 207.826 li
f
168.111 210.094 mo
156.614 210.094 li
157.062 207.826 li
169.517 207.826 li
168.111 210.094 li
cp
f
254.891 214.962 mo
274.391 214.962 li
275.058 214.275 li
276.225 214.962 li
285.239 216.088 li
286.645 212.695 li
254.637 212.695 li
f
142.772 214.962 mo
124.246 214.962 li
123.257 212.695 li
143.029 212.695 li
142.772 214.962 li
cp
f
236.058 214.962 mo
243.141 214.962 li
242.691 212.695 li
234.016 212.695 li
f
163.936 214.962 mo
154.956 214.962 li
155.69 212.695 li
165.746 212.695 li
163.936 214.962 li
cp
f
255.871 219.83 mo
267.981 219.83 li
269.621 217.563 li
255.617 217.563 li
f
141.675 219.689 mo
124.355 219.689 li
125.329 217.704 li
141.931 217.704 li
141.675 219.689 li
cp
f
239.808 219.83 mo
244.558 219.83 li
244.108 217.563 li
238.315 217.563 li
f
160.103 219.83 mo
153.558 219.83 li
154.317 217.563 li
161.509 217.563 li
160.103 219.83 li
cp
f
256.695 224.698 mo
270.057 224.698 li
269.061 222.431 li
256.433 222.431 li
f
140.8 224.698 mo
119.839 224.698 li
121.269 222.431 li
141.057 222.431 li
140.8 224.698 li
cp
f
243.391 224.698 mo
246.058 224.698 li
245.558 222.431 li
242.35 222.431 li
f
156.1 224.698 mo
152.324 224.698 li
152.725 222.431 li
157.586 222.431 li
156.1 224.698 li
cp
f
257.696 229.563 mo
258.516 229.57 li
274.095 229.57 li
273.1 227.301 li
257.696 227.301 li
f
139.57 229.567 mo
134.024 229.567 li
133.143 228.897 li
132.121 229.567 li
120.192 229.567 li
120.386 227.299 li
139.826 227.299 li
139.57 229.567 li
cp
f
213.908 229.567 mo
229.29 229.567 li
227.274 227.299 li
217.766 227.299 li
f
232.371 234.417 mo
170.808 234.444 li
171.775 232.203 li
231.191 232.176 li
232.371 234.417 li
cp
f
236.183 239.303 mo
168.222 239.303 li
169.338 237.035 li
235.003 237.035 li
236.183 239.303 li
cp
f
239.933 244.171 mo
164.808 244.171 li
165.876 241.904 li
238.753 241.904 li
239.933 244.171 li
cp
f
239.99 249.039 mo
162.121 249.039 li
163.088 246.772 li
239.246 246.772 li
239.99 249.039 li
cp
f
217.433 253.907 mo
181.85 253.907 li
181.85 251.639 li
216.866 251.639 li
217.433 253.907 li
cp
f
240.402 253.907 mo
231.183 253.907 li
230.089 251.639 li
240.206 251.639 li
240.402 253.907 li
cp
f
234.902 258.409 mo
234.214 258.409 li
233.271 256.873 li
235.777 256.873 li
234.902 258.409 li
cp
f
216.417 258.763 mo
207.367 258.763 li
206.371 256.495 li
216.439 256.495 li
216.417 258.763 li
cp
f
192.705 258.763 mo
183.1 258.763 li
183.334 256.495 li
193.511 256.495 li
192.705 258.763 li
cp
f
216.417 263.277 mo
207.367 263.277 li
206.915 261.741 li
216.439 261.741 li
216.417 263.277 li
cp
f
192.705 263.971 mo
183.46 263.277 li
183.334 261.741 li
193.096 261.741 li
192.705 263.971 li
cp
f
170.058 253.907 mo
158.996 253.907 li
159.963 251.639 li
169.872 251.639 li
170.058 253.907 li
cp
f
270.266 234.069 mo
268.643 235.419 li
266.851 234.069 li
265.641 234.069 li
263.641 232.533 li
271.85 232.533 li
270.266 234.069 li
cp
f
200.371 81.1867 mo
192.871 81.1867 li
192.496 83.4548 li
200.808 83.4548 li
f
162.693 78.2897 mo
173.062 78.2897 li
171.936 76.7546 li
166.808 76.7546 li
162.693 78.2897 li
cp
f
109.308 156.615 mo
105.926 157.261 li
106.496 154.347 li
113.496 154.347 li
109.308 156.615 li
cp
f
287.892 157.479 mo
285.1 156.615 li
279.804 154.347 li
287.558 154.347 li
287.892 157.479 li
cp
f
146.392 195.49 mo
135.322 195.49 li
140.933 193.222 li
146.767 193.222 li
146.392 195.49 li
cp
f
166.394 190.677 mo
161.975 190.677 li
162.318 188.41 li
163.558 186.806 li
166.394 190.677 li
cp
f
243.436 255.742 mo
241.215 244.838 li
241.341 244.759 li
240.154 243.3 li
240.154 243.3 239.392 243.626 239.113 243.842 cv
238.833 244.058 238.66 244.171 238.66 244.171 cv
243.436 255.742 li
cp
f
136.829 102.726 mo
132.058 102.726 li
133.653 100.458 li
135.289 100.458 li
136.829 102.726 li
cp
f
262.433 102.63 mo
264.308 102.63 li
263.433 101.095 li
262.808 101.095 li
f
166.136 258.785 mo
161.777 258.458 li
161.308 256.801 li
167.214 256.801 li
166.136 258.785 li
cp
f
151.824 229.2 mo
150.558 230.65 li
151.517 227.665 li
153.152 227.665 li
151.824 229.2 li
cp
f
177.707 229.425 mo
174.308 229.425 li
175.204 227.441 li
175.954 227.441 li
177.707 229.425 li
cp
f
156.308 258.025 mo
167.589 262.081 li
167.589 262.081 172.298 253.294 172.879 252.275 cv
173.921 252.536 179.451 253.923 180.467 254.175 cv
180.536 255.329 181.184 265.2 181.184 265.2 cv
193.244 266.461 li
193.244 266.461 195.864 256.872 196.175 255.771 cv
203.93 255.536 li
204.285 256.654 207.018 266.031 207.018 266.031 cv
218.992 264.363 li
218.992 264.363 219.25 254.615 219.277 253.431 cv
220.329 253.168 225.805 251.514 226.791 251.268 cv
227.404 252.196 232.434 260.561 232.434 260.561 cv
243.478 255.738 li
238.582 243.985 li
239.126 246.854 240.285 253.385 240.428 254.11 cv
239.38 254.561 234.73 257.005 233.644 257.468 cv
233.126 256.682 230.336 251.988 228.89 249.549 cv
228.368 248.667 228.146 248.446 227.736 248.385 cv
227.325 248.322 226.531 248.42 226.531 248.42 cv
218.426 250.491 li
218.426 250.491 217.346 250.67 216.846 251.129 cv
216.346 251.587 216.527 251.726 216.503 252.906 cv
216.446 255.892 216.386 261.062 216.362 261.99 cv
215.185 262.16 209.974 263.029 208.79 263.19 cv
208.519 262.337 207.11 257.543 206.274 254.693 cv
205.906 253.438 206.057 253.411 205.516 252.9 cv
205.121 252.525 204.181 252.604 204.181 252.604 cv
195.77 252.858 li
195.77 252.858 195.058 252.759 194.433 253.259 cv
193.808 253.759 193.918 253.644 193.642 254.733 cv
192.92 257.57 191.586 262.805 191.335 263.7 cv
190.149 263.575 184.877 262.846 183.696 262.717 cv
183.637 261.746 183.277 256.094 183.121 253.241 cv
183.069 252.301 182.854 252.068 182.562 251.828 cv
182.27 251.588 181.337 251.322 181.337 251.322 cv
172.366 249.159 li
172.366 249.159 171.626 249.118 171.225 249.275 cv
170.824 249.431 170.779 249.729 170.178 250.898 cv
168.83 253.52 166.573 257.893 166.131 258.66 cv
165.107 258.295 159.158 256.029 157.6 255.442 cv
156.308 258.025 li
cp
f
288.683 207.493 mo
287.703 209.289 284.561 214.694 284.124 215.449 cv
283.283 215.142 278.631 213.32 275.866 212.234 cv
274.648 211.756 274.72 211.621 273.984 211.735 cv
273.446 211.818 272.932 212.609 272.932 212.609 cv
267.981 219.414 li
267.981 219.414 267.467 219.915 267.48 220.716 cv
267.492 221.516 267.468 221.359 268.16 222.244 cv
269.959 224.551 273.281 228.813 273.835 229.56 cv
273.01 230.421 269.205 234.142 268.378 234.996 cv
267.576 234.447 262.887 231.271 260.537 229.647 cv
259.761 229.112 259.134 228.9 258.766 228.983 cv
258.183 229.442 li
258.788 232.545 li
259.225 232.025 li
260.179 232.677 268.803 238.503 268.803 238.503 cv
277.186 229.742 li
277.186 229.742 271.211 221.798 270.532 220.877 cv
271.146 220.033 274.471 215.464 275.097 214.604 cv
276.198 215.008 285.284 218.592 285.284 218.592 cv
290.902 208.868 li
288.683 207.493 li
cp
f
138.347 233.899 mo
136.978 232.69 133.709 229.886 133.08 229.287 cv
132.065 229.901 123.695 234.904 123.695 234.904 cv
115.873 225.686 li
115.873 225.686 122.327 218.355 123.08 217.457 cv
122.484 216.576 119.313 211.898 118.728 211.033 cv
117.631 211.361 108.131 214.285 108.131 214.285 cv
105.357 208.826 li
107.639 207.388 li
107.993 208.151 109.262 210.835 109.44 211.195 cv
110.331 210.927 115.466 209.249 118.248 208.338 cv
119.315 207.988 119.131 208.284 119.889 208.545 cv
120.645 208.804 120.971 209.131 120.971 209.131 cv
125.691 216.097 li
125.691 216.097 126.261 216.848 126.157 217.383 cv
126.014 218.114 125.911 218.001 125.049 218.984 cv
123.089 221.217 119.796 224.975 119.222 225.66 cv
119.991 226.573 123.516 230.509 124.29 231.411 cv
125.087 230.934 129.485 228.215 132.037 226.664 cv
133.046 226.052 133.066 225.825 133.721 226.002 cv
134.376 226.179 135.106 226.995 135.106 226.995 cv
139.118 230.794 li
138.347 233.899 li
138.347 233.899 li
f
94.8789 152.946 mo
96.8881 141.025 li
96.8881 141.025 106.653 141.238 107.826 141.235 cv
108.021 140.542 109.433 136.082 109.996 134.087 cv
112.246 136.587 li
110.548 142.356 li
110.548 142.356 110.34 143.276 109.864 143.541 cv
109.213 143.902 109.233 143.751 107.926 143.724 cv
104.956 143.664 99.9604 143.567 99.0659 143.569 cv
98.8628 144.746 98.124 149.977 97.9326 151.151 cv
98.6904 151.411 102.724 152.738 105.607 153.7 cv
105.885 153.793 106.174 153.903 106.386 154.103 cv
106.386 154.103 106.574 154.256 106.517 154.733 cv
106.449 155.293 106.017 157.566 106.017 157.566 cv
102.98 158.633 li
103.415 155.774 li
94.8789 152.946 li
cp
f
287.464 154.997 mo
287.457 154.875 287.476 154.601 287.555 154.435 cv
287.846 153.822 288.032 153.955 289.154 153.587 cv
291.992 152.657 296.917 151.086 297.798 150.791 cv
297.617 149.615 296.92 144.378 296.727 143.2 cv
295.832 143.191 290.836 143.247 287.866 143.283 cv
286.558 143.299 286.578 143.45 285.93 143.083 cv
285.456 142.815 285.255 141.893 285.255 141.893 cv
284.496 139.337 li
284.496 139.337 286.965 136.718 286.933 136.587 cv
287.323 138.159 287.863 140.341 287.987 140.794 cv
289.159 140.806 298.925 140.673 298.925 140.673 cv
300.837 152.611 li
300.837 152.611 291.593 155.713 290.468 156.085 cv
290.044 156.232 li
290.48 158.538 li
287.892 157.479 li
287.464 154.997 li
cp
f
251.825 89.4851 mo
251.825 89.4851 251.249 90.174 250.595 90.0705 cv
250.101 89.9929 249.414 89.7038 249.453 89.6857 cv
242.302 85.3454 li
242.302 85.3454 241.321 84.8596 240.976 84.2756 cv
240.63 83.6916 240.843 83.612 241.165 82.4758 cv
241.979 79.6027 243.426 74.6389 243.674 73.7434 cv
242.598 73.238 237.865 70.8898 236.78 70.3923 cv
236.272 71.1291 233.529 75.3049 231.899 77.7888 cv
231.181 78.8825 231.319 78.9509 230.652 79.2834 cv
230.165 79.527 229.289 79.1784 229.289 79.1784 cv
221.336 76.4372 li
219.922 70.7814 li
220.033 68.3581 220.216 65.4152 220.229 64.8229 cv
219.508 64.6838 220.342 64.8718 218.433 64.5559 cv
217.696 61.7297 li
222.858 62.7375 li
222.858 62.7375 222.574 72.673 222.551 73.8171 cv
223.54 74.1516 228.894 75.9592 229.902 76.299 cv
230.567 75.3332 235.912 67.1574 235.912 67.1574 cv
246.88 72.239 li
246.88 72.239 244.291 81.6394 243.971 82.781 cv
244.901 83.3386 249.66 86.5153 250.531 87.0383 cv
251.387 86.3288 258.886 80.6496 258.886 80.6496 cv
259.889 81.4226 li
256.464 85.1184 li
251.825 89.4851 li
cp
f
141.871 89.5246 mo
142.708 88.9499 147.166 85.5349 148.06 84.9211 cv
147.671 83.8015 144.511 74.5769 144.511 74.5769 cv
155.15 68.8342 li
155.15 68.8342 160.984 76.6677 161.707 77.591 cv
162.691 77.1901 168.665 74.8708 169.632 74.4768 cv
169.539 73.3361 168.647 63.4367 168.647 63.4367 cv
176.017 61.5559 li
175.267 64.3996 li
173.38 64.8317 172.11 65.1745 171.399 65.3571 cv
171.445 65.9084 171.975 70.2746 171.975 70.2746 cv
172.548 75.4309 li
172.548 75.4309 172.528 75.8767 172.12 76.2687 cv
171.671 76.801 170.985 77.0402 170.985 77.0402 cv
162.495 80.4274 li
162.495 80.4274 161.643 80.8293 161.141 80.6159 cv
160.455 80.3244 160.587 80.2477 159.805 79.2004 cv
158.026 76.8205 155.033 72.8205 154.481 72.1159 cv
153.428 72.6794 148.848 75.3117 147.804 75.8825 cv
148.106 76.7614 149.854 81.6271 150.842 84.445 cv
151.233 85.5593 151.45 85.6262 151.142 86.2302 cv
150.833 86.8342 149.883 87.3791 149.883 87.3791 cv
143.371 91.8371 li
141.871 89.5246 li
cp
f
121.917 113.431 mo
122.042 113.212 122.011 112.932 121.873 112.797 cv
121.403 112.334 120.878 111.819 120.338 111.29 cv
118.398 109.39 116.266 107.313 115.783 106.83 cv
116.47 105.859 119.429 101.483 120.128 100.515 cv
120.933 100.905 125.379 103.185 128.021 104.542 cv
129.185 105.14 129.1 105.267 129.843 105.228 cv
130.388 105.199 130.978 104.464 130.978 104.464 cv
134.881 99.7956 li
133.464 97.3684 li
132.283 98.6901 129.4 101.841 129.024 102.261 cv
127.969 101.749 119.288 97.2722 119.288 97.2722 cv
112.251 107.102 li
112.251 107.102 116.198 110.928 118.511 113.243 cv
118.511 113.243 117.589 114.556 116.792 115.571 cv
120.204 115.712 li
121.449 114.025 li
121.449 114.025 121.792 113.65 121.917 113.431 cv
cp
f
274.641 115.025 mo
276.72 113.076 281.336 108.878 281.864 108.373 cv
281.199 107.388 278.338 102.946 277.662 101.963 cv
276.848 102.335 272.352 104.514 269.68 105.812 cv
268.503 106.383 268.585 106.512 267.843 106.456 cv
267.299 106.415 266.726 105.667 266.726 105.667 cv
262.996 101.462 li
264.246 98.3996 li
265.275 99.6047 268.093 102.765 268.729 103.509 cv
269.794 103.021 278.574 98.7399 278.574 98.7399 cv
285.389 108.725 li
278.6 115.275 li
274.641 115.025 li
cp
f
238.058 189.743 mo
258.665 262.13 li
261.121 257.15 li
247.402 191.993 li
250.527 192.868 li
264.157 258 li
257.771 269.051 li
234.839 189.118 li
f
250.871 195.22 mo
258.964 195.22 li
255.589 193.581 li
250.546 192.952 li
f
83.5581 178.462 mo
86.2456 162.515 137.308 148.962 152.194 146.242 cv
162.241 144.095 177.52 142.06 195.072 142.06 cv
225.631 142.06 237.008 145.022 254.183 149.283 cv
286.85 157.775 307.417 171.343 310.433 175.337 cv
312.511 178.089 310.021 186.966 307.85 195.233 cv
305.632 203.676 304.558 214.9 304.558 214.9 cv
304.558 214.9 302.235 212.502 300.085 211.035 cv
286.753 201.937 266.564 193.474 248.361 188.858 cv
230.183 184.248 211.497 181.31 194.669 181.31 cv
179.017 181.31 167.988 183.197 154.092 186.239 cv
129.245 191.678 103.939 205.412 96.7568 211.589 cv
95.0756 213.035 92.894 215.194 92.894 215.194 cv
92.894 215.194 91.7304 204.24 88.5581 195.281 cv
86.4677 189.378 82.7939 182.996 83.5581 178.462 cv
cp
315.315 178.63 mo
315.277 173.65 311.398 167.734 291.872 159.136 cv
252.744 141.909 228.433 139.025 194.95 138.917 cv
179.306 138.867 164.716 140.223 148.183 143.775 cv
132.165 147.216 115.468 152.791 100.183 159.65 cv
86.2968 165.167 78.8442 174.338 78.8706 180.189 cv
78.8833 183.071 80.9331 187.316 80.9331 187.316 cv
80.9331 187.316 86.456 198.197 87.663 206.752 cv
88.8701 215.308 89.809 218.619 90.2783 222.277 cv
90.7475 225.933 93.6982 227.037 93.6982 227.037 cv
93.6982 227.037 98.9482 228.824 106.171 226.623 cv
112.397 224.725 115.873 220.238 116.746 219.116 cv
117.777 217.792 118.339 216.834 118.339 216.834 cv
118.339 216.834 113.527 220.3 109.683 222.402 cv
106.007 224.411 99.6567 225.011 97.5205 224.346 cv
95.5615 223.737 94.2207 223.171 93.705 220.848 cv
93.2768 218.921 94.4956 217.257 95.2143 216.552 cv
95.9331 215.847 109.28 204.967 126.595 198.692 cv
147.574 191.291 163.303 185.088 194.95 185.014 cv
228.766 184.935 260.263 195.645 268.849 198.692 cv
272.65 200.041 281.562 203.275 293.558 210.72 cv
295.064 211.655 299.748 215.095 300.779 216.188 cv
301.996 217.478 303.438 220.218 302.902 222.15 cv
302.366 224.081 301.042 224.553 301.042 224.553 cv
301.042 224.553 298.315 226.496 291.871 224.4 cv
283.996 221.837 278.824 217.353 278.888 217.477 cv
279.774 219.181 280.371 220.025 280.371 220.025 cv
285.933 226.837 293.058 228.181 299.903 227.657 cv
306.339 227.166 306.743 221.448 306.743 221.448 cv
306.743 221.448 308.233 210.825 309.832 202.928 cv
311.432 195.031 315.806 182.581 315.315 178.63 cv
cp
f
112.765 167.49 mo
113.635 167.23 116.825 166.264 117.662 165.99 cv
118.499 165.717 119.343 165.43 120.195 165.127 cv
121.218 164.764 122.211 164.4 123.176 164.032 cv
124.14 163.666 125.1 163.289 126.056 162.902 cv
126.221 163.275 li
125.898 163.438 125.556 163.619 125.195 163.819 cv
124.833 164.02 124.512 164.248 124.23 164.503 cv
123.949 164.759 123.75 165.04 123.632 165.345 cv
123.516 165.651 123.544 166 123.719 166.394 cv
123.884 166.766 124.651 167.573 126.021 168.814 cv
134.38 176.249 li
134.38 176.249 136.173 162.753 135.768 161.842 cv
135.621 161.51 135.411 161.261 135.139 161.094 cv
134.868 160.927 134.556 160.828 134.204 160.797 cv
133.852 160.765 133.482 160.777 133.098 160.829 cv
132.712 160.883 132.329 160.953 131.945 161.041 cv
131.779 160.668 li
132.625 160.417 134.747 159.899 135.572 159.63 cv
136.396 159.361 137.211 159.084 138.014 158.799 cv
138.695 158.556 139.36 158.309 140.008 158.054 cv
140.656 157.8 141.625 157.536 142.264 157.261 cv
142.429 157.633 li
141.614 158.019 141.002 158.512 140.593 159.113 cv
140.184 159.715 139.897 160.368 139.732 161.074 cv
139.566 161.78 139.571 162.403 139.527 163.152 cv
139.477 164.031 139.406 164.715 139.363 165.378 cv
137.895 182.583 li
135.52 183.327 li
118.676 169.564 li
117.842 168.829 116.971 168.281 116.063 167.92 cv
115.155 167.559 114.111 167.54 112.93 167.863 cv
112.765 167.49 li
cp
f
155.369 162.095 mo
153.194 169.693 li
157.002 170.807 li
160.832 167.716 li
155.369 162.095 li
cp
152.441 172.672 mo
151.733 174.915 li
151.704 175.106 151.674 175.274 151.645 175.419 cv
151.617 175.563 151.625 175.712 151.67 175.863 cv
151.787 176.253 152.03 176.557 152.399 176.777 cv
152.768 176.997 153.183 177.154 153.645 177.25 cv
154.106 177.346 154.57 177.401 155.037 177.415 cv
155.502 177.429 155.89 177.425 156.202 177.404 cv
156.319 177.793 li
155.493 177.926 154.669 178.07 153.851 178.226 cv
153.031 178.381 152.201 178.55 151.36 178.732 cv
150.547 178.909 149.758 179.092 148.992 179.281 cv
148.226 179.47 147.193 179.789 146.339 180.021 cv
146.212 179.652 li
147.006 179.318 147.008 179.233 147.417 178.746 cv
147.901 178.17 148.14 177.738 148.393 177.223 cv
148.737 176.521 148.804 176.28 149.052 175.675 cv
149.365 174.912 155.735 154.783 156.078 154.12 cv
170.196 171.195 li
170.828 171.957 171.556 172.508 172.38 172.848 cv
173.203 173.188 173.862 173.428 175.229 173.269 cv
175.347 173.659 li
174.249 173.851 173.175 174.05 172.125 174.255 cv
171.076 174.46 169.981 174.686 168.843 174.934 cv
168.111 175.092 167.474 175.231 166.932 175.349 cv
166.39 175.467 165.903 175.577 165.474 175.683 cv
165.043 175.788 164.634 175.894 164.248 176.001 cv
163.861 176.108 163.44 176.222 162.987 176.344 cv
162.87 175.955 li
163.976 175.599 164.546 175.089 164.778 174.781 cv
165.047 174.423 165.324 173.844 165.26 173.26 cv
165.238 173.034 165.203 172.842 165.093 172.664 cv
164.987 172.479 164.928 172.409 164.71 172.173 cv
162.822 170.094 li
158.461 175.392 li
152.441 172.672 li
cp
f
178.509 150.847 mo
179.471 150.884 180.385 150.91 181.251 150.925 cv
182.117 150.94 183.127 150.942 184.281 150.932 cv
184.885 150.927 185.476 150.911 186.053 150.883 cv
186.63 150.857 188.716 150.622 189.32 150.571 cv
189.682 150.971 190.281 151.577 191.116 152.387 cv
191.951 153.198 192.903 154.125 193.976 155.169 cv
195.046 156.213 196.194 157.322 197.419 158.499 cv
198.643 159.676 199.826 160.825 200.967 161.947 cv
202.108 163.069 203.548 164.76 203.548 164.76 cv
203.54 164.088 203.534 164.232 203.539 163.571 cv
203.543 162.91 203.552 163.433 203.543 162.761 cv
203.494 158.863 li
203.475 157.43 203.397 156.182 203.259 155.119 cv
203.123 154.057 202.864 153.168 202.484 152.454 cv
202.104 151.741 202.052 151.733 201.344 151.414 cv
200.384 150.982 199.661 151.092 198.561 151.035 cv
198.556 150.632 li
199.518 150.669 201.584 150.729 202.561 150.742 cv
203.537 150.757 204.504 150.759 205.467 150.752 cv
206.347 150.744 207.24 150.725 208.146 150.695 cv
209.053 150.665 209.945 150.624 210.824 150.571 cv
210.83 150.974 li
209.1 151.169 207.916 151.587 207.28 152.232 cv
206.641 152.875 206.332 153.858 206.348 155.179 cv
206.534 174.804 li
204.998 172.891 201.891 169.229 200.178 167.429 cv
198.465 165.629 196.766 163.919 195.083 162.298 cv
193.399 160.677 191.772 159.174 190.202 157.787 cv
188.631 156.401 188.439 156.045 187.188 154.957 cv
187.167 155.541 187.181 155.231 187.174 155.79 cv
187.167 156.351 187.168 156.922 187.176 157.504 cv
187.251 163.383 li
187.276 165.377 187.345 166.95 187.456 168.103 cv
187.567 169.256 187.812 170.138 188.191 170.751 cv
188.57 171.364 189.124 171.774 189.856 171.98 cv
190.586 172.187 190.568 172.261 191.647 172.442 cv
191.653 172.845 li
190.25 172.811 188.89 172.79 187.571 172.779 cv
186.251 172.767 184.891 172.768 183.49 172.779 cv
182.692 172.787 181.91 172.805 181.141 172.834 cv
180.371 172.863 179.588 172.903 178.792 172.954 cv
178.788 172.551 li
179.72 172.431 180.536 172.318 181.236 172.212 cv
181.936 172.105 182.51 171.931 182.96 171.692 cv
183.411 171.453 183.493 171.119 183.607 170.653 cv
183.724 170.175 183.82 169.603 183.837 168.818 cv
183.983 153.293 li
183.201 152.654 182.788 152.39 181.74 152.063 cv
180.69 151.736 179.615 151.465 178.514 151.25 cv
178.509 150.847 li
cp
f
237.374 161.91 mo
237.201 160.842 236.907 159.841 236.493 158.905 cv
236.079 157.97 235.65 157.129 234.998 156.397 cv
234.345 155.665 233.842 155.333 233.181 155.072 cv
232.249 154.705 231.745 154.602 230.577 154.461 cv
228.999 154.27 227.81 154.19 226.627 154.552 cv
225.436 154.918 224.479 155.353 223.636 156.203 cv
222.793 157.053 222.119 158.074 221.612 159.268 cv
221.105 160.462 220.748 161.744 220.539 163.114 cv
220.329 164.484 220.332 165.816 220.549 167.11 cv
220.765 168.405 221.203 169.57 221.861 170.604 cv
222.519 171.639 223.1 172.173 224.222 172.882 cv
225.344 173.59 226.689 174.09 228.272 174.235 cv
230.362 174.428 231.878 173.807 233.151 173.058 cv
234.491 172.271 236.693 170.821 238.298 169.135 cv
239.539 170.377 li
238.497 171.434 237.474 172.355 236.473 173.139 cv
235.472 173.923 234.415 174.56 233.304 175.051 cv
232.193 175.543 231.014 175.874 229.77 176.047 cv
228.526 176.218 227.153 176.213 225.653 176.028 cv
223.949 175.818 222.378 175.328 220.941 174.558 cv
219.503 173.787 218.292 172.812 217.306 171.632 cv
216.321 170.453 215.601 169.096 215.15 167.563 cv
214.697 166.03 214.604 164.397 214.869 162.661 cv
215.134 160.926 215.714 159.376 216.611 158.008 cv
217.506 156.642 218.606 155.509 219.91 154.612 cv
221.213 153.715 222.672 153.069 224.287 152.674 cv
225.903 152.28 227.562 152.188 229.266 152.398 cv
230.207 152.513 231.077 152.674 231.875 152.876 cv
232.674 153.079 233.439 153.284 234.172 153.49 cv
234.905 153.697 235.612 153.901 236.294 154.101 cv
236.976 154.302 237.66 154.456 238.342 154.562 cv
238.269 155.043 238.203 155.604 238.143 156.248 cv
238.083 156.892 238.04 157.555 238.013 158.238 cv
237.987 158.921 237.961 159.592 237.939 160.253 cv
237.915 160.913 237.905 161.488 237.909 161.976 cv
237.374 161.91 li
cp
f
262.011 171.354 mo
261.746 172.125 261.492 172.898 261.25 173.675 cv
261.009 174.452 260.755 175.226 260.49 175.996 cv
260.042 175.877 li
260.129 174.919 259.991 174.404 259.864 173.752 cv
259.737 173.099 259.483 172.558 259.102 172.129 cv
258.72 171.7 258.185 171.344 257.505 171.037 cv
257.332 170.959 254.298 170.132 254.298 170.132 cv
251.503 178.401 li
251.712 178.504 251.97 178.619 252.279 178.748 cv
252.586 178.877 252.919 179.012 253.278 179.154 cv
253.635 179.297 254.007 179.437 254.394 179.574 cv
254.78 179.712 255.147 179.828 255.496 179.921 cv
256.549 180.121 256.7 180.159 257.954 180.259 cv
259.207 180.36 260.371 180.137 261.514 179.927 cv
262.658 179.718 263.812 179.417 264.911 178.869 cv
266.952 177.85 267.355 177.627 267.355 177.627 cv
268.264 178.698 li
262.645 184.248 li
262.238 184.092 261.815 183.944 261.374 183.804 cv
260.934 183.663 260.503 183.536 260.082 183.424 cv
246.072 179.693 li
245.351 179.5 244.627 179.319 243.9 179.149 cv
243.171 178.978 242.44 178.818 241.706 178.67 cv
241.838 178.284 li
242.754 178.459 243.491 178.526 244.046 178.487 cv
244.603 178.448 245.068 178.28 245.442 177.982 cv
245.816 177.684 246.135 177.25 246.401 176.677 cv
246.666 176.106 246.955 175.37 247.264 174.472 cv
250.966 163.749 li
251.277 162.85 251.502 162.098 251.643 161.493 cv
251.784 160.888 251.793 160.371 251.67 159.941 cv
251.547 159.511 251.255 159.141 250.792 158.83 cv
250.331 158.521 249.663 158.215 248.79 157.912 cv
248.924 157.526 li
249.76 157.773 250.554 158.008 251.305 158.231 cv
252.055 158.454 252.832 158.679 253.635 158.904 cv
254.439 159.13 255.293 159.363 256.202 159.605 cv
257.107 159.846 258.132 160.119 259.275 160.424 cv
261.013 160.887 262.756 161.34 264.502 161.781 cv
266.248 162.223 268.023 162.661 269.827 163.094 cv
269.719 163.323 269.621 163.554 269.526 163.786 cv
269.432 164.018 269.349 164.241 269.275 164.455 cv
268.832 165.739 li
268.668 166.21 268.529 166.693 268.414 167.188 cv
268.296 167.682 268.163 168.225 268.014 168.816 cv
267.485 168.816 li
267.516 167.703 267.314 167.313 266.94 166.509 cv
266.581 165.737 266.088 165.162 265.505 164.61 cv
264.922 164.058 264.231 163.605 263.431 163.251 cv
262.631 162.898 261.759 162.595 260.816 162.344 cv
259.077 161.881 258.784 161.914 257.001 161.579 cv
254.723 168.488 li
255.219 168.62 262.346 170.373 262.346 170.373 cv
262.011 171.354 li
cp
f
300.085 177.157 mo
298.068 178.008 295.99 178.923 293.851 179.9 cv
291.712 180.877 289.61 181.872 287.544 182.882 cv
285.479 183.893 283.491 184.878 281.581 185.839 cv
279.67 186.799 279.619 186.76 278.028 187.587 cv
278.371 187.84 278.857 188.123 279.489 188.435 cv
280.12 188.747 280.989 189.154 282.092 189.658 cv
283.516 190.307 284.927 190.854 286.33 191.298 cv
287.73 191.743 289.077 191.999 290.37 192.066 cv
291.662 192.134 292.899 192.039 294 191.557 cv
295.114 191.07 295.287 190.413 295.338 190.345 cv
296.075 190.68 li
291.11 196.566 li
288.962 195.538 286.819 194.525 284.678 193.525 cv
282.538 192.525 280.387 191.533 278.228 190.549 cv
277.099 190.034 275.973 189.533 274.85 189.046 cv
273.727 188.558 272.595 188.078 271.454 187.607 cv
270.392 187.127 li
293.097 175.724 li
289.199 173.947 li
288.119 173.455 287.015 173.043 285.887 172.71 cv
284.759 172.378 283.679 172.208 282.649 172.199 cv
281.618 172.19 280.679 172.386 279.832 172.787 cv
278.984 173.19 278.776 174.211 278.776 174.211 cv
278.261 173.976 li
278.352 173.581 279.422 170.601 279.747 169.76 cv
279.998 169.111 280.327 168.491 280.656 167.865 cv
281.41 168.233 282.207 168.621 283.047 169.028 cv
283.887 169.435 284.716 169.831 285.536 170.217 cv
286.355 170.602 287.144 170.968 287.905 171.315 cv
288.665 171.661 289.365 171.98 290.003 172.271 cv
291.697 173.043 293.35 173.784 294.964 174.496 cv
296.577 175.207 298.238 175.928 299.944 176.656 cv
300.085 177.157 li
cp
f
102.289 179.987 mo
102.094 188.326 li
105.96 188.364 li
108.965 184.728 li
102.289 179.987 li
cp
102.114 191.425 mo
101.996 193.874 li
102.014 194.074 102.028 194.252 102.036 194.405 cv
102.044 194.558 102.088 194.706 102.168 194.847 cv
102.373 195.211 102.677 195.456 103.079 195.582 cv
103.48 195.709 103.911 195.761 104.37 195.738 cv
104.829 195.716 105.28 195.651 105.723 195.545 cv
106.165 195.439 106.531 195.335 106.819 195.233 cv
107.025 195.596 li
106.278 195.944 105.537 196.302 104.802 196.671 cv
104.067 197.039 103.325 197.424 102.577 197.825 cv
101.853 198.214 101.154 198.602 100.478 198.992 cv
99.8012 199.38 98.9052 199.969 98.1562 200.424 cv
97.9453 200.084 li
98.6132 199.541 98.5942 199.455 98.8608 198.858 cv
99.1762 198.151 99.2968 197.653 99.4087 197.068 cv
99.5615 196.269 99.5659 196.009 99.6518 195.334 cv
99.7607 194.482 100.845 172.506 101.007 171.748 cv
118.502 185.348 li
119.284 185.954 120.105 186.323 120.966 186.453 cv
121.825 186.584 122.506 186.656 123.757 186.143 cv
123.963 186.506 li
122.974 186.984 122.01 187.462 121.07 187.94 cv
120.13 188.418 119.153 188.93 118.14 189.473 cv
117.488 189.823 116.921 190.127 116.438 190.386 cv
115.956 190.645 115.524 190.883 115.144 191.1 cv
114.764 191.318 114.404 191.53 114.066 191.738 cv
113.728 191.946 113.359 192.17 112.96 192.41 cv
112.755 192.048 li
113.711 191.403 114.124 190.739 114.268 190.369 cv
114.434 189.938 114.553 189.282 114.35 188.709 cv
114.274 188.486 114.194 188.301 114.047 188.149 cv
113.902 187.99 113.829 187.935 113.565 187.753 cv
111.276 186.14 li
108.411 192.275 li
102.114 191.425 li
cp
f
305.526 174.942 mo
270.392 153.347 231.544 145.809 196.558 145.809 cv
160.95 145.809 123.566 153.12 88.0171 174.628 cv
87.9477 174.601 93.3276 169.692 103.454 164.501 cv
106.608 162.922 128.859 152.519 151.637 148.491 cv
173.615 143.815 195.508 144.167 196.672 144.111 cv
196.703 144.11 196.721 144.108 196.752 144.109 cv
198.467 144.163 219.636 143.74 242.097 148.55 cv
264.904 152.601 278.948 159.86 281.316 160.815 cv
292.834 165.463 299.719 171.111 305.526 174.942 cv
cp
f
299.719 208.225 mo
267.854 189.328 232.069 179.484 195.981 178.914 cv
159.894 179.484 128.368 187.304 96.1845 207.846 cv
99.4228 205.725 104.575 201.819 115.355 195.854 cv
119.139 193.632 132.237 187.175 152.84 182.275 cv
171.815 177.761 188.103 177.57 196.09 177.294 cv
208.975 177.726 219.108 177.854 239.701 182.705 cv
258.451 187.122 273.794 193.888 275.48 194.777 cv
285.409 198.794 299.795 208.191 299.719 208.225 cv
cp
f
215.183 114.806 mo
216.11 117.764 li
97.9633 117.732 li
128.339 149.493 li
125.089 150.493 li
91.5268 114.931 li
215.183 114.806 li
cp
f
254.027 114.775 mo
252.058 117.732 li
301.339 117.732 li
270.105 150.493 li
273.167 151.665 li
308.058 114.681 li
254.027 114.775 li
cp
f
220.1 130.025 mo
127.777 130.15 li
141.839 145.337 li
145.402 144.556 li
134.454 132.983 li
221.016 132.962 li
220.1 130.025 li
cp
f
243.808 129.983 mo
272.058 129.983 li
256.6 146.4 li
253.391 145.358 li
265.225 132.983 li
241.891 132.983 li
243.808 129.983 li
cp
f
224.766 200.004 mo
235.543 189.307 li
232.082 188.721 li
223.038 197.712 li
224.766 200.004 li
cp
f
214.307 210.346 mo
199.273 225.297 li
162.814 187.087 li
165.216 185.467 li
199.325 221.219 li
212.606 208.032 li
214.307 210.346 li
cp
f
183.16 184.248 mo
199.379 201.249 li
204.074 196.525 li
205.808 198.884 li
199.379 205.27 li
179.976 185.047 li
183.16 184.248 li
cp
f
178.744 201.189 mo
148.996 236.525 li
150.621 230.539 li
176.503 199.415 li
178.744 201.189 li
cp
f
214.016 186.025 mo
210.121 185.566 li
248.85 235.504 li
246.891 228.295 li
214.016 186.025 li
cp
f
160.011 187.74 mo
138.908 261.772 li
136.452 256.791 li
150.58 189.738 li
147.367 190.285 li
133.415 257.641 li
139.802 268.693 li
163.35 186.574 li
f
174.225 139.775 mo
175.988 131.808 li
172.755 131.808 li
171.017 140.066 li
174.225 139.775 li
cp
f
157.468 142.553 mo
159.522 132.644 li
162.742 132.156 li
160.181 144.313 li
157.468 142.553 li
cp
f
184.06 208.555 mo
186.264 210.815 li
186.264 210.815 142.091 280.546 141.654 281.319 cv
141.216 282.091 140.804 282.389 140.324 282.44 cv
139.142 282.565 138.229 282.162 138.229 282.162 cv
138.229 282.162 131.226 279.445 127.58 276.721 cv
123.935 273.997 120.67 269.535 119.767 268.192 cv
118.876 266.868 119.767 265.741 119.767 265.741 cv
137.12 245.509 li
136.591 250.517 li
136.591 250.517 123.643 265.361 123.183 266.045 cv
122.723 266.731 123.12 267.374 123.12 267.374 cv
123.12 267.374 127.712 272.64 129.699 274.147 cv
131.685 275.654 138.008 278.318 138.008 278.318 cv
138.008 278.318 139.206 278.797 140.227 277.57 cv
141.248 276.341 184.06 208.555 184.06 208.555 cv
cp
f
296.151 97.3967 mo
244.496 62.6809 li
253.964 48.8996 li
292.964 75.1809 li
294.363 81.0861 297.652 95.1809 297.652 95.1809 cv
296.151 97.3967 li
cp
295.808 75.3684 mo
295.277 73.1184 293.607 72.1452 293.607 72.1452 cv
293.607 72.1452 254.815 45.7189 253.183 44.7746 cv
240.433 63.4309 li
240.433 63.4309 246.123 67.3674 247.138 67.9553 cv
247.92 68.4079 257.598 75.031 259.305 76.1833 cv
261.011 77.3356 295.235 100.505 295.235 100.505 cv
295.235 100.505 296.757 101.469 297.256 100.9 cv
297.755 100.33 299.566 97.6677 299.566 97.6677 cv
299.566 97.6677 300.625 96.2883 300.584 95.5983 cv
300.547 94.965 296.339 77.6184 295.808 75.3684 cv
cp
f
261.183 77.2746 mo
217.891 140.4 li
221.079 140.921 li
263.558 78.8996 li
261.183 77.2746 li
cp
f
271.558 84.3581 mo
231.203 143.452 li
234.1 144.358 li
273.871 86.0246 li
271.558 84.3581 li
cp
f
276.084 60.3117 mo
277.714 58.1965 li
285.73 63.5402 li
283.855 66.2277 li
286.037 67.9191 li
286.037 67.9191 288.945 64.2546 289.167 63.759 cv
289.516 62.9816 288.683 62.1027 288.683 62.1027 cv
288.683 62.1027 278.465 54.8981 277.916 54.7727 cv
277.368 54.6477 276.739 54.7219 276.449 54.9777 cv
276.159 55.2336 274.412 58.1491 273.824 58.7121 cv
276.084 60.3117 li
cp
f
180.402 106.025 mo
182.558 103.806 184.719 102.688 185.464 101.681 cv
186.21 100.674 186.397 99.4274 186.397 99.4274 cv
194.808 67.2121 li
196.371 72.9309 li
196.371 72.9309 188.944 102.287 188.433 103.431 cv
187.997 104.408 187.089 104.868 186.371 105.431 cv
185.995 105.725 184.214 107.118 182.716 108.561 cv
181.293 109.933 179.683 114.931 179.683 114.931 cv
176.35 114.858 li
176.35 114.858 178.553 107.927 180.402 106.025 cv
cp
f
147.871 87.6877 mo
147.871 86.5588 li
f
281.234 261.218 mo
283.15 263.397 280.156 269.262 274.438 274.195 cv
268.766 279.087 262.618 281.461 260.702 279.283 cv
258.785 277.106 261.794 271.247 267.464 266.259 cv
273.134 261.271 279.317 259.04 281.234 261.218 cv
cp
282.902 258.478 mo
282.292 257.884 282.057 257.744 280.73 256.993 cv
280.542 256.891 261.457 242.958 260.621 241.9 cv
261.558 246.337 li
261.558 246.337 263.143 247.045 277.105 258.009 cv
276.197 258.165 274.98 258.588 274.433 258.775 cv
273.227 259.188 268.817 261.345 265.683 264.108 cv
261.808 267.525 260.049 270.769 259.016 272.9 cv
258.683 273.587 258.402 274.598 258.402 274.598 cv
258.368 274.585 254.745 266.398 254.475 265.587 cv
250.933 256.775 249.558 254.108 248.079 251.545 cv
247.118 249.88 245.929 248.26 244.121 245.712 cv
240.225 240.224 205.865 194.131 205.865 194.131 cv
198.996 184.837 li
198.996 184.837 196.386 184.946 195.417 184.946 cv
199.728 190.713 232.791 235.152 242.382 248.325 cv
243.811 250.287 244.749 251.743 244.964 252.087 cv
245.423 252.822 246.404 254.714 247.638 257.391 cv
250.171 262.882 253.646 270.889 255.214 274.962 cv
255.637 276.059 255.979 276.874 256.371 277.962 cv
256.762 279.05 257.945 280.529 259.288 281.004 cv
263.538 282.504 266.385 280.916 267.902 280.306 cv
270.308 279.337 273.342 277.312 276.377 274.674 cv
279.721 271.768 282.222 267.702 283.089 265.462 cv
284.589 261.587 283.732 259.286 282.902 258.478 cv
cp
f
193.631 195.381 mo
198.425 188.9 li
200.253 191.228 li
195.656 197.503 li
193.631 195.381 li
cp
f
230.339 114.775 mo
235.714 114.806 li
233.633 117.724 li
231.058 117.681 li
230.339 114.775 li
cp
f
186.542 187.793 mo
191.672 181.803 li
193.27 184.272 li
188.527 189.874 li
186.542 187.793 li
cp
f
216.04 188.659 mo
218.198 186.471 li
215.124 186.126 li
213.97 186.001 li
216.04 188.659 li
cp
f
211.683 35.6081 mo
231.845 120.847 li
229.687 124.462 li
208.975 36.8996 li
211.683 35.6081 li
cp
f
188.996 45.2121 mo
188.996 45.2121 203.667 100.934 204.058 102.712 cv
204.385 104.198 205.219 104.505 205.638 104.734 cv
206.276 105.082 207.955 105.94 210.108 107.052 cv
212.144 108.105 213.632 110.585 214.243 112.102 cv
214.854 113.619 221.725 135.483 221.725 135.483 cv
223.84 132.644 li
223.84 132.644 217.608 112.422 217.114 110.88 cv
216.621 109.337 214.086 105.442 211.433 104.15 cv
210.214 103.556 207.73 102.165 207.402 101.962 cv
206.428 101.359 206.144 98.8786 205.621 96.9621 cv
204.255 91.9685 192.308 46.1496 192.308 46.1496 cv
188.996 45.2121 li
cp
f
195.083 43.0715 mo
186.906 43.0715 180.276 36.4426 180.276 28.2648 cv
180.276 20.0876 186.906 13.4582 195.083 13.4582 cv
203.26 13.4582 209.89 20.0876 209.89 28.2648 cv
209.89 36.4426 203.26 43.0715 195.083 43.0715 cv
cp
195.083 10.0168 mo
185.005 10.0168 176.835 18.1867 176.835 28.2648 cv
176.835 38.343 185.005 46.5129 195.083 46.5129 cv
205.162 46.5129 213.332 38.343 213.332 28.2648 cv
213.332 18.1867 205.162 10.0168 195.083 10.0168 cv
cp
f
179.277 36.8684 mo
162.326 117.195 li
165.443 117.195 li
181.683 40.2331 li
179.277 36.8684 li
cp
f
195.083 34.5983 mo
191.585 34.5983 188.749 31.7629 188.749 28.2648 cv
188.749 24.7673 191.585 21.9313 195.083 21.9313 cv
198.581 21.9313 201.416 24.7673 201.416 28.2648 cv
201.416 31.7629 198.581 34.5983 195.083 34.5983 cv
cp
195.083 18.9147 mo
189.919 18.9147 185.733 23.1013 185.733 28.2648 cv
185.733 33.4289 189.919 37.6149 195.083 37.6149 cv
200.247 37.6149 204.433 33.4289 204.433 28.2648 cv
204.433 23.1013 200.247 18.9147 195.083 18.9147 cv
cp
f
199.741 22.4899 mo
189.06 32.0827 li
190.752 34.0129 li
201.171 24.445 li
199.741 22.4899 li
cp
f
135.975 81.3996 mo
160.589 114.858 li
157.298 114.858 li
134.017 83.4411 li
135.975 81.3996 li
cp
f
149.1 115.025 mo
127.639 85.8923 li
125.767 88.3161 li
145.392 114.9 li
149.1 115.025 li
cp
f
133.162 80.9411 mo
132.392 81.6911 131.445 82.444 130.35 83.1911 cv
129.379 83.8537 128.412 84.4621 127.095 85.1779 cv
126.853 85.3098 126.18 85.7365 125.529 85.6848 cv
125.02 85.6437 124.307 85.0397 124.123 84.4396 cv
123.976 83.9626 124.216 83.5163 124.29 83.3835 cv
124.706 82.6398 127.445 80.8127 127.985 80.4279 cv
128.476 80.0778 131.058 78.2331 131.851 78.008 cv
132.476 77.8308 132.609 77.8561 133.043 78.0705 cv
133.586 78.3391 134.357 79.7785 133.162 80.9411 cv
cp
131.78 72.9592 mo
131.838 73.194 131.768 73.4084 131.652 73.6496 cv
131.284 74.4133 129.292 76.6027 126.605 78.509 cv
123.823 80.4821 120.058 82.3825 119.689 82.3303 cv
119.628 82.3215 119.539 82.3381 119.299 82.1452 cv
119.219 82.0808 110.071 69.6706 107.101 65.7111 cv
106.958 65.5217 106.751 64.7277 107.834 63.7067 cv
110.209 61.4675 111.722 60.3376 112.449 59.7902 cv
113.221 59.2082 114.996 58.0715 118.058 56.5402 cv
118.278 56.4304 118.787 56.0871 119.464 56.4621 cv
122.017 59.8581 131.78 72.9592 131.78 72.9592 cv
cp
112.1 78.2746 mo
111.537 78.5676 88.6416 93.7834 88.6416 93.7834 cv
87.4018 91.9621 li
109.933 75.1911 li
110.097 75.4685 112.1 78.2746 112.1 78.2746 cv
cp
122.059 54.8186 mo
121.079 53.7331 120.439 53.653 120.267 53.5769 cv
118.246 52.6809 113.354 55.6081 111.027 57.3059 cv
108.371 59.2434 105.28 61.6262 104.1 63.9411 cv
103.56 64.9997 103.759 66.1159 104.037 66.7121 cv
104.268 67.2058 106.433 70.0246 106.433 70.0246 cv
106.85 71.0661 105.892 71.5661 105.731 72.135 cv
105.444 73.1511 106.304 73.5876 105.958 74.4108 cv
105.713 74.9943 105.049 75.4641 104.808 75.6496 cv
102.905 77.1164 88.1318 88.4436 86.059 90.0847 cv
85.309 90.6784 84.2998 92.1311 84.6416 93.0783 cv
84.7055 93.2556 84.8061 93.5539 85.0922 94.0944 cv
85.2158 94.3273 85.3076 94.6076 86.1582 95.446 cv
86.3989 95.6828 86.7412 95.9538 86.9853 96.0246 cv
88.6279 96.5012 90.3916 95.4831 90.3916 95.4831 cv
90.3916 95.4831 109.902 82.7414 110.61 82.4099 cv
112.079 81.7224 112.358 82.8024 113.709 82.5656 cv
114.121 82.4934 115.126 81.82 115.6 82.4411 cv
116.6 83.7536 117.501 84.906 117.774 85.0407 cv
119.021 85.6555 119.848 84.6525 121.22 85.2302 cv
122.029 85.5705 122.833 87.1457 123.216 87.5602 cv
123.793 88.1852 124.88 88.3498 125.431 88.342 cv
127.048 88.319 130.225 86.3581 131.642 85.3581 cv
133.402 84.1149 135.78 82.0017 136.204 81.0241 cv
136.475 80.3996 136.642 79.7121 136.308 78.9411 cv
135.6 77.7331 134.449 76.1965 134.386 75.5402 cv
134.318 74.8283 135.402 73.4934 134.683 71.9621 cv
f
125.183 102.735 mo
118.135 102.735 li
119.528 100.466 li
121.294 100.45 li
125.183 102.735 li
cp
f
199.707 76.0939 mo
192.871 76.0939 li
192.496 78.3615 li
200.202 78.3615 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
