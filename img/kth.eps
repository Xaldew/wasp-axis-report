%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 285 285
%%HiResBoundingBox: 0.000000 0.000000 285.000000 285.000000
%ADO_DSC_Encoding: MacOS Roman
%%Title: KTH_Logotyp_PMS_2013.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Kristian
%%CreationDate: 2013-04-18
%%CropBox: 0 0 284.5450 284.5450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.1 x682 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE 3005 U)
%%CMYKCustomColor: 0.8753 0.4556 0 0 (PANTONE 3005 U)
%%RGBCustomColor: 
%%EndComments
% EPSF created by ps2eps 1.68
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
                                                                                                                                                                                                      
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2013-04-18T13:41:56+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-04-18T13:41:56+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2013-04-18T13:41:56+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AiWd2+dOxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2Ksp/LnSfLep+Y7WDW736spngFtbGF5VunaUD0GKj4A3Sp23zE1uT&#xA;JCBMBex+Hm5/Z+PFPIBM1uKFc/J35jaT5b0zzHdQaJe/WVE84ubYQvEtq6ykegpYfGF6VG22OiyZ&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:40FCB11F0A206811822AB2DD4E15BAD6</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:40FCB11F0A206811822AB2DD4E15BAD6</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0580117407206811822AB2DD4E15BAD6</stRef:instanceID>
            <stRef:documentID>xmp.did:0580117407206811822AB2DD4E15BAD6</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F1174072068118083A24884EE727F</stEvt:instanceID>
                  <stEvt:when>2012-08-14T22:57:30+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0180117407206811822AF84B6683CE3A</stEvt:instanceID>
                  <stEvt:when>2012-10-25T14:44:39+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0480117407206811822AF84B6683CE3A</stEvt:instanceID>
                  <stEvt:when>2012-10-25T17:16:35+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811822AA8FDBADD9855</stEvt:instanceID>
                  <stEvt:when>2012-12-05T13:32+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811822AA8FDBADD9855</stEvt:instanceID>
                  <stEvt:when>2012-12-05T13:33:38+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0180117407206811822A8C314FCC10C7</stEvt:instanceID>
                  <stEvt:when>2012-12-06T09:37:31+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0380117407206811822AF2322FF86CA4</stEvt:instanceID>
                  <stEvt:when>2013-02-25T10:13:28+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0480117407206811822AF2322FF86CA4</stEvt:instanceID>
                  <stEvt:when>2013-02-25T10:13:48+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0280117407206811822AEB218D1EABA9</stEvt:instanceID>
                  <stEvt:when>2013-03-05T08:28:26+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0180117407206811822AA16441D1FBB2</stEvt:instanceID>
                  <stEvt:when>2013-04-08T13:56:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0580117407206811822AB2DD4E15BAD6</stEvt:instanceID>
                  <stEvt:when>2013-04-18T13:19:15+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:40FCB11F0A206811822AB2DD4E15BAD6</stEvt:instanceID>
                  <stEvt:when>2013-04-18T13:41:56+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>296.999959</stDim:w>
            <stDim:h>210.001652</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE 3005 U</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 3005 U</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>LAB</xmpG:mode>
                           <xmpG:L>46.666698</xmpG:L>
                           <xmpG:A>-9</xmpG:A>
                           <xmpG:B>-48</xmpG:B>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -284.545 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 284.545 li
284.545 284.545 li
284.545 0 li
cp
clp
284.545 284.545 mo
0 284.545 li
0 0 li
284.545 0 li
284.545 284.545 li
cp
false sop
/0 
<<
/Name (PANTONE 3005 U)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ .875242 .455512 0 0 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
142.272 261.992 mo
141.356 260.986 140.351 259.867 139.321 258.715 cv
140.298 257.606 141.301 256.474 142.271 255.392 cv
143.243 256.474 144.245 257.606 145.222 258.716 cv
144.192 259.867 143.188 260.986 142.272 261.992 cv
cp
147.68 258.716 mo
150.159 255.901 152.815 252.915 154.664 251.066 cv
158.331 247.399 162.116 247.438 162.116 247.438 cv
162.116 247.438 157.792 245.315 153.234 249.869 cv
152.009 251.097 149.261 254.188 146.451 257.339 cv
145.436 256.2 144.431 255.073 143.5 254.035 cv
144.532 252.903 145.497 251.873 146.303 251.066 cv
149.971 247.399 153.757 247.438 153.757 247.438 cv
153.757 247.438 149.431 245.315 144.879 249.869 cv
144.3 250.448 143.376 251.45 142.272 252.67 cv
141.169 251.45 140.245 250.448 139.666 249.869 cv
135.11 245.315 130.786 247.438 130.786 247.438 cv
130.786 247.438 134.568 247.399 138.239 251.066 cv
139.046 251.873 140.011 252.903 141.043 254.035 cv
140.113 255.073 139.108 256.2 138.092 257.339 cv
135.282 254.188 132.533 251.097 131.307 249.869 cv
126.75 245.315 122.428 247.438 122.428 247.438 cv
122.428 247.438 126.21 247.399 129.878 251.066 cv
131.727 252.916 134.383 255.901 136.863 258.716 cv
134.523 261.334 132.288 263.81 131.018 265.081 cv
127.969 268.13 124.416 268.363 124.416 268.363 cv
124.416 268.363 128.237 270.601 133.449 265.274 cv
134.415 264.288 136.142 262.327 138.092 260.111 cv
139.153 261.316 140.15 262.449 140.992 263.387 cv
140.366 264.06 139.81 264.646 139.375 265.081 cv
136.327 268.13 132.773 268.363 132.773 268.363 cv
132.773 268.363 136.595 270.601 141.81 265.274 cv
141.948 265.133 142.104 264.968 142.272 264.789 cv
142.44 264.968 142.597 265.133 142.736 265.274 cv
147.944 270.601 151.769 268.363 151.769 268.363 cv
151.769 268.363 148.216 268.13 145.169 265.081 cv
144.735 264.646 144.178 264.06 143.553 263.386 cv
144.393 262.449 145.391 261.316 146.451 260.111 cv
148.4 262.327 150.128 264.288 151.093 265.274 cv
156.306 270.601 160.126 268.363 160.126 268.363 cv
160.126 268.363 156.573 268.13 153.523 265.081 cv
152.253 263.81 150.02 261.334 147.68 258.716 cv
cp
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
48.6284 94.3931 mo
48.8164 94.0352 49.0112 93.8682 49.1406 93.8276 cv
49.2881 93.7803 49.4009 93.7041 49.4883 93.6133 cv
49.6113 93.6367 49.7485 93.6343 49.8975 93.5859 cv
50.5146 93.3989 52.2808 94.6973 52.8955 96.6509 cv
53.0977 97.2959 53.1816 97.957 53.1553 98.5835 cv
52.7222 98.9077 52.1118 99.2539 51.3374 99.498 cv
50.7314 99.6865 50.0962 99.7856 49.5005 99.7856 cv
49.4326 99.7856 49.3799 99.7793 49.3174 99.7769 cv
48.9395 99.2769 48.6216 98.6992 48.4214 98.0537 cv
47.981 96.6465 48.2202 95.1699 48.6284 94.3931 cv
cp
54.8892 99.0845 mo
54.9707 99.6118 54.8809 100.14 54.623 100.63 cv
54.1938 101.448 53.3325 102.108 52.2583 102.442 cv
51.7891 102.589 51.3188 102.664 50.8604 102.664 cv
49.6006 102.664 48.625 102.116 48.1792 101.179 cv
48.6738 101.306 49.1851 101.33 49.5005 101.33 cv
50.2495 101.33 51.043 101.207 51.7983 100.972 cv
53.0757 100.569 54.2305 99.8525 54.8892 99.0845 cv
cp
46.5703 101.294 mo
47.1284 103.091 48.7725 104.208 50.8604 104.208 cv
51.4658 104.208 52.0811 104.11 52.6885 103.923 cv
52.7627 104.046 52.8477 104.169 52.9702 104.335 cv
53.2891 104.765 53.6592 105.126 54.0698 105.408 cv
54.2036 105.5 54.3555 105.543 54.5063 105.543 cv
54.752 105.543 54.9937 105.426 55.1436 105.208 cv
55.3848 104.857 55.2954 104.376 54.9438 104.135 cv
54.6738 103.95 54.4272 103.708 54.2129 103.418 cv
54.1665 103.355 54.1348 103.312 54.1035 103.268 cv
54.916 102.771 55.585 102.121 55.9902 101.349 cv
56.5044 100.37 56.603 99.2988 56.2759 98.25 cv
55.9644 97.251 55.1494 96.9399 54.7168 96.9136 cv
54.6641 96.9102 54.6143 96.9346 54.562 96.9424 cv
54.5103 96.6895 54.4468 96.4375 54.3687 96.188 cv
53.6206 93.8091 51.4658 91.897 49.8335 92.0376 cv
49.6455 91.8804 49.3247 91.6787 48.9302 91.813 cv
48.5347 91.9307 48.3809 92.252 48.3066 92.5151 cv
47.8984 92.7466 47.542 93.1406 47.2612 93.6748 cv
46.5649 94.999 46.4419 96.8989 46.9473 98.5127 cv
47.0244 98.7612 47.1152 99.0039 47.2158 99.2402 cv
47.1724 99.2627 47.1226 99.2695 47.0835 99.3008 cv
46.7461 99.5713 46.2583 100.295 46.5703 101.294 cv
cp
f
61.4805 109.047 mo
61.4561 108.05 61.7246 107.133 62.2358 106.466 cv
62.5347 106.076 63.0376 105.619 63.8218 105.482 cv
63.3101 106.355 62.9946 107.698 63.022 109.015 cv
63.0518 110.301 63.4082 111.641 63.9897 112.507 cv
62.5586 112.338 61.5205 110.936 61.4805 109.047 cv
cp
66.7632 106.59 mo
68.7954 106.519 70.6099 107.81 70.625 108.43 cv
70.625 108.592 70.666 108.728 70.7295 108.841 cv
70.6709 108.955 70.6343 109.091 70.6401 109.252 cv
70.6436 109.378 70.5469 109.617 70.2661 109.912 cv
69.6597 110.547 68.3369 111.246 66.8652 111.278 cv
66.1943 111.295 65.5361 111.193 64.9473 110.998 cv
64.7524 110.491 64.585 109.803 64.5659 108.981 cv
64.5493 108.178 64.6782 107.496 64.8433 106.983 cv
65.4258 106.754 66.0742 106.606 66.7632 106.59 cv
cp
64.3872 114.067 mo
65.4331 114.047 65.9648 113.353 66.1143 112.945 cv
66.1318 112.897 66.1221 112.847 66.1294 112.797 cv
66.3271 112.812 66.5259 112.824 66.7266 112.824 cv
66.7837 112.824 66.8418 112.823 66.8994 112.822 cv
68.5898 112.785 70.3501 112.061 71.3833 110.978 cv
71.7993 110.542 72.0591 110.079 72.1489 109.614 cv
72.3491 109.481 72.626 109.235 72.6152 108.825 cv
72.6152 108.409 72.3481 108.167 72.1157 108.019 cv
71.7227 106.414 69.2607 104.994 66.7285 105.046 cv
66.4673 105.052 66.209 105.073 65.9546 105.104 cv
65.9448 105.052 65.9521 104.998 65.9316 104.947 cv
65.7725 104.558 65.2354 103.9 64.1694 103.9 cv
64.1689 103.9 64.1675 103.9 64.1675 103.9 cv
62.9126 103.93 61.7915 104.507 61.0107 105.526 cv
60.5688 106.103 60.2725 106.805 60.1016 107.563 cv
60.0518 107.549 60.0024 107.533 59.9312 107.511 cv
59.5947 107.403 59.2847 107.246 59.0088 107.042 cv
58.665 106.79 58.1816 106.863 57.9292 107.207 cv
57.6768 107.551 57.7505 108.034 58.0938 108.287 cv
58.5044 108.588 58.9634 108.822 59.4614 108.982 cv
59.6582 109.044 59.8022 109.084 59.9395 109.115 cv
60.0142 111.986 61.8359 114.069 64.2837 114.069 cv
64.2886 114.069 64.3823 114.067 64.3872 114.067 cv
cp
f
46.4907 154.663 mo
45.9746 153.809 45.752 152.878 45.8643 152.045 cv
45.9307 151.555 46.1421 150.901 46.7534 150.401 cv
46.7412 151.414 47.1338 152.738 47.8145 153.874 cv
48.5088 155.021 49.4902 155.968 50.3857 156.422 cv
49.0708 156.984 47.4297 156.228 46.4907 154.663 cv
cp
49.855 149.907 mo
51.6143 148.854 53.8022 149.058 54.1182 149.576 cv
54.1992 149.723 54.3037 149.822 54.418 149.891 cv
54.4238 150.02 54.459 150.155 54.5435 150.293 cv
54.6089 150.401 54.644 150.657 54.5469 151.052 cv
54.3364 151.903 53.5347 153.167 52.271 153.928 cv
51.6948 154.275 51.0781 154.512 50.4688 154.634 cv
50.0488 154.291 49.5625 153.779 49.1367 153.077 cv
48.7173 152.377 48.4897 151.71 48.3804 151.178 cv
48.7734 150.695 49.2739 150.258 49.855 149.907 cv
cp
56.0459 151.422 mo
56.1904 150.838 56.1855 150.307 56.0347 149.861 cv
56.1436 149.645 56.2632 149.291 56.0454 148.937 cv
55.8374 148.581 55.4883 148.504 55.2153 148.49 cv
54.0791 147.293 51.2065 147.297 49.0591 148.584 cv
48.8359 148.719 48.6226 148.864 48.417 149.018 cv
48.3823 148.977 48.3613 148.926 48.3179 148.892 cv
48.2471 148.836 47.8647 148.563 47.2905 148.563 cv
46.939 148.563 46.5947 148.662 46.2661 148.86 cv
45.1919 149.509 44.5054 150.566 44.334 151.838 cv
44.2373 152.558 44.3286 153.313 44.5566 154.058 cv
44.5059 154.069 44.4561 154.08 44.3823 154.096 cv
44.0327 154.17 43.6855 154.188 43.353 154.148 cv
42.9316 154.097 42.5459 154.401 42.4956 154.825 cv
42.4463 155.248 42.749 155.632 43.1724 155.682 cv
43.3481 155.702 43.5254 155.713 43.7036 155.713 cv
44.0337 155.713 44.3682 155.678 44.7031 155.606 cv
44.9043 155.563 45.0488 155.529 45.1855 155.486 cv
46.2012 157.161 47.7896 158.161 49.4414 158.161 cv
50.1729 158.161 50.8691 157.964 51.5088 157.576 cv
52.4028 157.039 52.5195 156.173 52.4478 155.746 cv
52.4395 155.697 52.4067 155.658 52.3896 155.612 cv
52.6201 155.504 52.8472 155.384 53.0684 155.25 cv
54.5186 154.377 55.6875 152.875 56.0459 151.422 cv
cp
f
28.6953 147.887 mo
28.8022 147.772 28.8638 147.65 28.896 147.528 cv
29.0166 147.488 29.1348 147.417 29.2378 147.298 cv
29.6758 146.836 31.8594 147.095 33.353 148.495 cv
33.8491 148.961 34.2471 149.495 34.5313 150.05 cv
34.313 150.546 33.9512 151.149 33.396 151.743 cv
32.8428 152.329 32.2563 152.727 31.7456 152.982 cv
31.1836 152.735 30.6372 152.377 30.1489 151.914 cv
29.0742 150.907 28.5562 149.506 28.5298 148.629 cv
28.5176 148.224 28.6055 147.982 28.6953 147.887 cv
cp
36.8145 151.113 mo
36.8423 152.036 36.4165 153.034 35.644 153.853 cv
34.8428 154.708 33.8379 155.199 32.8877 155.199 cv
32.8872 155.199 li
32.3682 155.198 31.8853 155.047 31.4712 154.756 cv
32.4473 154.497 33.6113 153.765 34.5215 152.8 cv
35.4351 151.822 36.0889 150.631 36.2861 149.638 cv
36.6167 150.056 36.7979 150.56 36.8145 151.113 cv
cp
29.0903 153.038 mo
29.2793 153.217 29.4766 153.384 29.6792 153.539 cv
29.6528 153.58 29.6133 153.61 29.5947 153.656 cv
29.4336 154.059 29.3638 154.932 30.1255 155.646 cv
30.8862 156.363 31.8408 156.743 32.8872 156.743 cv
32.8877 156.743 li
34.2544 156.743 35.6597 156.082 36.7471 154.932 cv
36.8716 155.002 37.0049 155.066 37.1914 155.15 cv
37.6616 155.363 38.1592 155.497 38.6714 155.548 cv
38.6973 155.55 38.7227 155.552 38.748 155.552 cv
39.1401 155.552 39.4761 155.254 39.5156 154.854 cv
39.5571 154.431 39.2471 154.053 38.8228 154.011 cv
38.4795 153.978 38.1455 153.888 37.8276 153.743 cv
37.7632 153.714 37.7202 153.694 37.6748 153.673 cv
38.1396 152.841 38.3848 151.939 38.3579 151.066 cv
38.3247 149.963 37.8843 148.981 37.0859 148.231 cv
36.605 147.775 36.104 147.68 35.7686 147.68 cv
35.4043 147.68 35.144 147.792 35.0728 147.826 cv
35.0225 147.851 34.9907 147.896 34.9478 147.93 cv
34.7793 147.736 34.6006 147.548 34.4102 147.369 cv
32.5986 145.672 29.8164 145.061 28.4258 145.983 cv
28.1846 145.938 27.8022 145.919 27.5205 146.233 cv
27.2373 146.53 27.2622 146.885 27.3276 147.15 cv
27.0854 147.553 26.9683 148.071 26.9863 148.675 cv
27.0313 150.171 27.8584 151.885 29.0903 153.038 cv
cp
f
55.8579 202.157 mo
54.4438 201.341 53.4282 199.797 54.0249 198.303 cv
54.5005 199.196 55.4712 200.148 56.6313 200.822 cv
57.7622 201.473 59.1069 201.861 60.1133 201.814 cv
59.2441 202.929 57.436 203.07 55.8579 202.157 cv
cp
56.502 196.366 mo
57.5298 194.594 59.542 193.714 60.0767 194.019 cv
60.2183 194.105 60.3579 194.142 60.4902 194.146 cv
60.5571 194.254 60.6533 194.355 60.792 194.436 cv
60.9004 194.498 61.0547 194.704 61.1602 195.097 cv
61.3882 195.946 61.2988 197.439 60.5605 198.714 cv
60.23 199.288 59.8145 199.786 59.3521 200.185 cv
58.8027 200.091 58.104 199.888 57.4038 199.485 cv
56.7002 199.077 56.1797 198.604 55.8267 198.193 cv
55.9375 197.581 56.1636 196.955 56.502 196.366 cv
cp
62.6514 194.696 mo
62.4941 194.112 62.2324 193.648 61.8853 193.333 cv
61.8755 193.092 61.8101 192.725 61.459 192.53 cv
61.1011 192.309 60.7524 192.412 60.5049 192.534 cv
58.9321 192.035 56.4194 193.43 55.1646 195.595 cv
55.0352 195.82 54.9189 196.051 54.814 196.284 cv
54.7632 196.265 54.7197 196.229 54.6646 196.221 cv
54.6245 196.215 54.499 196.206 54.4585 196.206 cv
53.8062 196.206 53.2065 196.573 52.855 197.187 cv
51.8457 198.936 52.3154 201.05 53.875 202.561 cv
53.8354 202.596 53.7954 202.631 53.7378 202.681 cv
53.4683 202.915 53.1816 203.093 52.8618 203.225 cv
52.4673 203.387 52.2788 203.838 52.4409 204.231 cv
52.5635 204.53 52.8516 204.711 53.1558 204.711 cv
53.2534 204.711 53.3525 204.692 53.4487 204.652 cv
53.9199 204.459 54.3579 204.188 54.7495 203.848 cv
54.9028 203.715 55.0132 203.613 55.1138 203.509 cv
56.0381 204.037 57.0356 204.318 58.002 204.318 cv
59.5825 204.318 60.9155 203.573 61.6563 202.28 cv
62.1821 201.377 61.8657 200.562 61.5962 200.222 cv
61.5649 200.183 61.5171 200.164 61.4795 200.132 cv
61.6284 199.925 61.769 199.71 61.8979 199.485 cv
62.7451 198.023 63.0405 196.144 62.6514 194.696 cv
cp
f
45.9312 206.524 mo
45.5083 208.221 44.3252 209.36 42.9868 209.36 cv
42.8994 209.36 42.8115 209.355 42.7231 209.346 cv
43.4858 208.609 44.1323 207.35 44.4341 206.15 cv
44.7529 204.872 44.7412 203.491 44.4326 202.526 cv
45.1641 202.826 45.5576 203.389 45.7646 203.838 cv
46.1162 204.602 46.1758 205.555 45.9312 206.524 cv
cp
37.1709 205.426 mo
36.9634 205.078 36.9224 204.824 36.9526 204.704 cv
36.9917 204.551 36.9868 204.412 36.9556 204.288 cv
37.041 204.194 37.1104 204.075 37.1436 203.922 cv
37.3008 203.303 39.3364 202.466 41.3184 202.96 cv
41.9858 203.128 42.5864 203.416 43.1069 203.767 cv
43.1553 204.304 43.1304 204.997 42.9365 205.775 cv
42.7354 206.574 42.4199 207.209 42.125 207.66 cv
41.5034 207.721 40.8418 207.676 40.186 207.509 cv
38.7568 207.151 37.6211 206.179 37.1709 205.426 cv
cp
49.7979 205.502 mo
49.6235 205.111 49.165 204.938 48.7773 205.112 cv
48.4712 205.25 48.1372 205.335 47.7832 205.365 cv
47.708 205.372 47.6563 205.376 47.6035 205.38 cv
47.605 204.602 47.4712 203.852 47.1675 203.192 cv
46.6309 202.027 45.6655 201.217 44.4492 200.91 cv
43.5576 200.688 42.7764 201.142 42.4951 201.542 cv
42.4634 201.587 42.4585 201.642 42.4375 201.691 cv
42.1953 201.604 41.9473 201.525 41.6934 201.462 cv
39.2847 200.861 36.5557 201.688 35.793 203.167 cv
35.561 203.245 35.2168 203.414 35.126 203.825 cv
35.0239 204.221 35.2163 204.518 35.4009 204.718 cv
35.3848 205.188 35.5352 205.699 35.8457 206.218 cv
36.6133 207.502 38.1704 208.597 39.8091 209.006 cv
40.061 209.07 40.3154 209.113 40.5693 209.15 cv
40.5654 209.201 40.5444 209.25 40.5513 209.302 cv
40.6064 209.731 40.9712 210.525 41.9844 210.777 cv
42.3164 210.862 42.6538 210.904 42.9863 210.904 cv
42.9868 210.904 42.9868 210.904 42.9868 210.904 cv
45.0376 210.904 46.814 209.308 47.4185 206.932 cv
47.4233 206.932 47.4282 206.933 47.4331 206.933 cv
47.5737 206.933 47.7222 206.921 47.917 206.904 cv
48.4429 206.858 48.9448 206.73 49.4092 206.522 cv
49.7983 206.348 49.9722 205.891 49.7979 205.502 cv
cp
f
83.7861 235.563 mo
84.6392 236.11 85.9663 236.468 87.3813 236.49 cv
88.6875 236.49 89.9702 236.168 90.8125 235.655 cv
90.5752 237.217 88.9448 238.031 87.3408 238.031 cv
87.2656 238.03 li
86.2681 238.018 85.3613 237.716 84.7129 237.181 cv
84.332 236.867 83.8896 236.344 83.7861 235.563 cv
cp
86.9741 228.866 mo
86.9751 228.866 86.9761 228.866 86.9771 228.866 cv
87.1411 228.885 87.2769 228.837 87.3926 228.776 cv
87.5049 228.841 87.6406 228.883 87.8032 228.883 cv
87.9282 228.884 88.1631 228.988 88.4458 229.278 cv
89.0596 229.907 89.7109 231.255 89.6904 232.728 cv
89.6812 233.408 89.541 234.054 89.3208 234.638 cv
88.8149 234.808 88.1333 234.945 87.3159 234.945 cv
87.3145 234.945 li
86.5088 234.933 85.8301 234.778 85.3232 234.594 cv
85.1152 233.998 84.9907 233.345 85.0005 232.661 cv
85.0317 230.617 86.3564 228.866 86.9741 228.866 cv
cp
87.2764 239.575 mo
87.3037 239.575 87.3384 239.575 87.3408 239.575 cv
90.1934 239.575 92.3623 237.737 92.3862 235.304 cv
92.4023 234.258 91.7271 233.702 91.3257 233.539 cv
91.2798 233.521 91.2314 233.529 91.1836 233.52 cv
91.2129 233.266 91.231 233.008 91.2344 232.748 cv
91.2578 231.057 90.5972 229.271 89.5513 228.2 cv
89.1309 227.77 88.6782 227.494 88.2188 227.388 cv
88.0923 227.181 87.853 226.892 87.4326 226.892 cv
87.0132 226.88 86.7783 227.139 86.6245 227.361 cv
85.0078 227.696 83.4946 230.14 83.4565 232.639 cv
83.4526 232.9 83.4639 233.159 83.4868 233.416 cv
83.4331 233.424 83.3779 233.414 83.3262 233.434 cv
82.9204 233.584 82.2305 234.118 82.2197 235.162 cv
82.2036 236.415 82.7397 237.555 83.73 238.372 cv
84.2896 238.834 84.98 239.155 85.7319 239.354 cv
85.7148 239.403 85.6982 239.451 85.6733 239.521 cv
85.5522 239.858 85.3848 240.161 85.1763 240.42 cv
84.9087 240.753 84.9614 241.238 85.2939 241.506 cv
85.4365 241.621 85.6074 241.677 85.7773 241.677 cv
86.0029 241.677 86.2271 241.578 86.3794 241.389 cv
86.6958 240.995 86.9473 240.543 87.1274 240.042 cv
87.1953 239.852 87.2407 239.711 87.2764 239.575 cv
cp
f
80.7231 250.255 mo
80.4482 250.735 80.0508 251.093 79.5615 251.305 cv
79.8516 250.336 79.8364 248.956 79.4922 247.681 cv
79.1665 246.493 78.4927 245.245 77.7153 244.521 cv
79.1587 244.345 80.4941 245.491 80.9771 247.271 cv
81.2754 248.364 81.1831 249.452 80.7231 250.255 cv
cp
76.4507 250.942 mo
75.0327 251.332 73.5645 251.037 72.8018 250.602 cv
72.4482 250.399 72.2871 250.196 72.2563 250.084 cv
72.2163 249.928 72.1436 249.807 72.0542 249.713 cv
72.083 249.59 72.0854 249.451 72.0405 249.3 cv
71.8745 248.683 73.2393 246.96 75.2129 246.419 cv
75.8691 246.241 76.5322 246.183 77.1548 246.231 cv
77.4629 246.677 77.7866 247.301 78.002 248.086 cv
78.2134 248.869 78.2505 249.568 78.2109 250.106 cv
77.6978 250.469 77.1069 250.766 76.4507 250.942 cv
cp
82.7754 244.648 mo
82.5703 244.921 82.3188 245.159 82.0288 245.355 cv
81.9678 245.396 81.9263 245.424 81.8828 245.453 cv
81.0264 243.922 79.5967 242.958 78.0122 242.958 cv
77.6543 242.958 77.293 243.007 76.9399 243.103 cv
75.9331 243.373 75.5879 244.174 75.5425 244.604 cv
75.5366 244.66 75.5591 244.711 75.5654 244.766 cv
75.312 244.808 75.0586 244.86 74.8066 244.929 cv
72.4058 245.587 70.4263 247.646 70.4922 249.306 cv
70.3296 249.485 70.1162 249.8 70.2329 250.211 cv
70.3398 250.603 70.6514 250.767 70.9092 250.85 cv
71.126 251.268 71.5083 251.641 72.0342 251.941 cv
72.8687 252.419 73.9487 252.67 75.0459 252.67 cv
75.6567 252.67 76.2729 252.592 76.8555 252.433 cv
77.106 252.365 77.3506 252.284 77.5898 252.192 cv
77.6108 252.236 77.6152 252.285 77.6445 252.325 cv
77.8726 252.633 78.3804 252.992 79.0591 252.992 cv
79.2412 252.992 79.4287 252.967 79.6162 252.916 cv
80.6714 252.631 81.5176 251.976 82.0635 251.022 cv
82.7207 249.874 82.8672 248.372 82.4727 246.898 cv
82.5981 246.83 82.7236 246.75 82.894 246.635 cv
83.3267 246.342 83.7017 245.985 84.0088 245.578 cv
84.2656 245.237 84.1973 244.753 83.8564 244.496 cv
83.5161 244.24 83.0327 244.309 82.7754 244.648 cv
cp
f
119.784 263.344 mo
119.557 263.368 119.399 263.33 119.394 263.33 cv
119.289 263.222 119.211 262.704 119.169 262.427 cv
119.052 261.648 118.856 260.346 117.545 260.067 cv
117.287 260.009 117.032 259.979 116.787 259.979 cv
115.304 259.979 114.434 260.964 113.512 262.006 cv
113.313 262.23 113.103 262.469 112.866 262.72 cv
112.731 262.866 li
112.098 263.556 111.141 264.6 109.66 264.6 cv
109.255 264.6 108.821 264.521 108.372 264.369 cv
107.874 264.198 107.525 263.984 107.439 263.796 cv
107.304 263.498 107.597 262.786 107.832 262.214 cv
108.254 261.183 108.962 259.458 107.466 258.317 cv
106.947 257.927 106.371 257.729 105.753 257.729 cv
104.185 257.729 102.86 258.979 101.58 260.188 cv
101.39 260.367 101.201 260.545 101.014 260.716 cv
99.9878 261.657 98.8013 262.176 97.6724 262.176 cv
96.3579 262.176 95.1294 261.48 94.1499 260.205 cv
94.002 259.994 93.7632 259.602 93.8291 259.352 cv
93.9639 258.838 95.2158 258.237 96.0444 257.84 cv
97.4741 257.155 99.4321 256.217 98.7373 254.347 cv
97.6875 251.543 94.9517 251.543 94.0522 251.543 cv
93.8057 251.543 93.5488 251.552 93.2734 251.569 cv
91.3823 251.699 89.8848 251.008 89.189 249.709 cv
88.5449 248.508 88.7085 246.967 89.6255 245.586 cv
90.5845 244.146 91.8848 243.32 93.1929 243.32 cv
94.4878 243.32 95.6436 244.117 96.4429 245.556 cv
97.1489 246.851 98.3125 248.572 100.261 248.571 cv
100.718 248.571 101.189 248.473 101.661 248.277 cv
103.196 247.646 102.972 245.833 102.774 244.232 cv
102.649 243.225 102.479 241.845 102.86 241.375 cv
102.901 241.324 103.026 241.171 103.568 241.123 cv
103.829 241.087 104.076 241.069 104.31 241.069 cv
105.088 241.069 107.157 241.069 107.175 245.145 cv
107.174 245.742 li
107.167 247.496 107.159 249.483 108.221 250.55 cv
108.716 251.047 109.426 251.275 110.123 251.221 cv
111.823 251.09 112.31 249.463 112.666 248.275 cv
113.189 246.529 113.393 246.521 114.072 246.715 cv
115.549 247.135 115.875 248.555 116.102 250.099 cv
116.228 250.955 li
116.472 252.706 116.725 254.516 118.82 254.987 cv
118.941 255.013 119.064 255.025 119.186 255.025 cv
119.186 255.025 119.186 255.025 119.187 255.025 cv
120.267 255.025 120.841 254.114 121.259 253.45 cv
121.416 253.202 121.677 252.787 121.717 252.728 cv
121.717 252.728 121.778 252.738 121.9 252.815 cv
122.395 253.134 123.174 254.178 123.162 257.553 cv
122.601 257.459 122.008 257.361 121.359 257.259 cv
112.804 255.759 101.98 251.481 98.4233 250.076 cv
97.3105 249.637 97.3105 249.637 97.2031 249.637 cv
97.0894 249.637 96.9863 249.686 96.915 249.765 cv
96.9146 249.764 li
96.8867 249.795 96.8647 249.829 96.8481 249.866 cv
96.832 249.902 96.8208 249.942 96.8169 249.983 cv
96.8105 250.04 96.8164 250.098 96.835 250.151 cv
97.083 250.876 111.082 257.545 120.974 259.289 cv
121.625 259.393 122.231 259.486 122.815 259.574 cv
121.751 262.51 120.596 263.259 119.784 263.344 cv
cp
129.386 260.311 mo
129.91 260.311 130.39 260.279 130.507 259.908 cv
130.525 259.853 130.532 259.796 130.527 259.74 cv
130.536 259.713 130.541 259.683 130.543 259.651 cv
130.571 259.296 130.592 258.901 125.478 257.958 cv
125.526 256.085 125.422 252.327 123.147 250.864 cv
122.675 250.563 122.199 250.412 121.733 250.412 cv
120.436 250.412 119.752 251.497 119.299 252.215 cv
119.225 252.334 119.127 252.488 119.042 252.61 cv
118.819 252.435 118.711 251.993 118.521 250.635 cv
118.394 249.761 li
118.183 248.33 117.745 245.351 114.704 244.486 cv
114.322 244.378 113.957 244.324 113.618 244.324 cv
111.431 244.324 110.815 246.382 110.447 247.611 cv
110.315 248.052 110.094 248.79 109.866 248.919 cv
109.479 248.604 109.487 246.605 109.491 245.752 cv
109.491 245.133 li
109.474 241.078 107.585 238.753 104.31 238.753 cv
103.973 238.753 103.617 238.778 103.312 238.821 cv
102.34 238.904 101.583 239.272 101.061 239.916 cv
100.059 241.15 100.28 242.938 100.475 244.517 cv
100.542 245.058 100.639 245.84 100.593 246.202 cv
100.473 246.237 100.362 246.255 100.26 246.255 cv
99.7236 246.256 99.1401 245.664 98.4722 244.438 cv
97.2593 242.256 95.335 241.004 93.1929 241.004 cv
91.0967 241.004 89.0933 242.206 87.6973 244.304 cv
86.2988 246.407 86.0933 248.837 87.147 250.804 cv
88.187 252.743 90.3081 253.901 92.8198 253.901 cv
93.021 253.901 93.2261 253.895 93.4272 253.881 cv
93.6436 253.867 93.8521 253.859 94.0522 253.859 cv
95.6025 253.859 96.1729 254.278 96.4878 254.965 cv
96.1997 255.197 95.5176 255.524 95.0435 255.751 cv
93.6147 256.437 91.9961 257.212 91.5889 258.763 cv
91.3579 259.642 91.5811 260.573 92.2817 261.574 cv
94.1323 263.986 96.2349 264.492 97.6724 264.492 cv
99.3828 264.492 101.125 263.757 102.578 262.424 cv
102.773 262.246 102.97 262.061 103.169 261.872 cv
103.986 261.102 105.105 260.045 105.753 260.045 cv
105.831 260.045 105.93 260.06 106.064 260.133 cv
106.101 260.329 105.843 260.958 105.688 261.334 cv
105.285 262.319 104.782 263.545 105.33 264.753 cv
105.701 265.569 106.451 266.16 107.625 266.562 cv
108.316 266.797 109 266.916 109.66 266.916 cv
112.159 266.916 113.698 265.238 114.438 264.432 cv
114.556 264.304 li
114.805 264.04 115.033 263.783 115.247 263.541 cv
115.97 262.723 116.367 262.296 116.787 262.296 cv
116.79 262.296 116.794 262.296 116.797 262.296 cv
116.828 262.439 116.857 262.629 116.878 262.771 cv
117.017 263.689 117.31 265.927 120.026 265.647 cv
122.217 265.418 123.933 263.476 125.142 259.908 cv
127.131 260.176 128.552 260.311 129.386 260.311 cv
cp
f
59.8564 92.7422 mo
59.96 92.4775 60.0869 92.4351 60.0835 92.4155 cv
60.2852 92.4155 60.6211 92.5283 60.918 92.6274 cv
61.3501 92.772 61.7969 92.9219 62.2764 92.9219 cv
63.0249 92.9214 63.4805 92.5576 63.7393 92.2417 cv
64.979 90.6914 64.3906 89.1987 63.8213 87.7554 cv
63.7275 87.5176 63.6284 87.2656 63.5278 86.9946 cv
63.4604 86.8159 li
62.9136 85.374 62.5068 83.8369 63.999 82.3301 cv
64.521 81.8384 64.8047 81.7856 64.9028 81.7856 cv
65.2246 81.7856 65.7241 82.3647 66.1255 82.8301 cv
66.7681 83.5752 67.5684 84.5029 68.7568 84.5029 cv
69.0781 84.5024 69.3984 84.4326 69.6851 84.3042 cv
72.2212 83.2441 71.3311 80.3086 70.7417 78.3662 cv
70.6533 78.0757 70.5664 77.7891 70.4824 77.4878 cv
70.0625 76.0952 70.1509 74.8374 70.7378 73.8506 cv
71.3472 72.8271 72.4917 72.1157 74.0112 71.8003 cv
74.1572 71.7749 74.2905 71.7617 74.4131 71.7617 cv
74.7202 71.7617 74.8042 71.8462 74.832 71.874 cv
75.1997 72.2446 75.189 73.6069 75.1821 74.5088 cv
75.1704 76.0923 75.1538 78.2612 77.0952 78.4375 cv
79.7583 78.7046 81.0132 76.7476 81.8989 74.8198 cv
82.625 73.1274 83.9346 72.1172 85.4009 72.1172 cv
86.7065 72.1172 87.9468 72.9292 88.7183 74.2881 cv
89.5894 75.8267 89.7207 77.3638 89.0786 78.5059 cv
88.4878 79.5557 87.3013 80.1606 85.7676 80.2085 cv
82.0791 80.2236 81.1768 82.0942 81.0688 83.6768 cv
80.9775 85.3301 82.7261 85.9331 84.1309 86.418 cv
85.0337 86.7295 86.271 87.1563 86.5229 87.6865 cv
86.5532 87.7495 86.644 87.9414 86.4526 88.4673 cv
85.8643 90.2944 84.7905 90.5059 84.0337 90.5059 cv
83.2793 90.5059 82.3442 90.2505 81.3511 89.7773 cv
80.958 89.5781 li
79.7197 88.9492 78.3169 88.2358 77.0718 88.2358 cv
76.0229 88.2358 75.2026 88.7383 74.749 89.6772 cv
74.0454 91.2285 75.3149 92.4365 76.1548 93.2358 cv
76.5698 93.6313 77.1973 94.2285 77.2046 94.543 cv
77.2075 94.6636 77.085 94.8647 76.8472 95.1138 cv
76.3955 95.6226 75.8545 95.8599 75.145 95.8599 cv
74.4082 95.8599 73.6372 95.6016 73.0742 95.4126 cv
72.1196 95.0957 li
71.2388 94.7969 70.478 94.5391 69.7246 94.5391 cv
68.8428 94.5391 68.1108 94.8984 67.5601 95.5923 cv
66.7217 96.6157 67.3994 97.7539 67.8037 98.4341 cv
67.9297 98.646 68.1304 98.9829 68.1836 99.1646 cv
68.1611 99.1826 68.1294 99.2051 68.0864 99.2305 cv
67.8486 99.3643 67.5347 99.4326 67.1538 99.4326 cv
65.9629 99.4326 64.5127 98.8027 63.5273 98.3018 cv
64.3516 97.3325 65.4136 96.0532 66.7974 94.3535 cv
71.9399 88.0625 80.124 80.9521 83.7412 78.064 cv
83.835 77.998 li
85.2402 77.0054 85.2402 77.0054 85.2588 76.7871 cv
85.271 76.6333 li
85.0571 76.3638 li
84.8687 76.3638 li
84.7178 76.3638 84.6343 76.3638 83.2773 77.4463 cv
80.1543 79.6523 70.6919 86.3384 65.2163 93.0181 cv
63.7783 94.7847 62.7256 96.1431 61.9546 97.1948 cv
59.5908 94.7266 59.6113 93.3584 59.8564 92.7422 cv
cp
59.98 100.946 mo
60.1255 101.169 li
60.1465 101.298 li
60.5088 101.298 li
60.6743 101.298 60.855 101.295 61.9585 100.094 cv
63.3926 100.867 65.332 101.749 67.1538 101.749 cv
67.939 101.749 68.6357 101.58 69.2397 101.239 cv
69.8848 100.862 70.291 100.366 70.4463 99.7642 cv
70.7021 98.7749 70.1777 97.8936 69.7944 97.25 cv
69.7285 97.1387 69.6431 96.9951 69.5767 96.8716 cv
69.8999 96.7759 70.582 97.0205 71.3765 97.2896 cv
72.3384 97.6094 li
73.0122 97.835 74.0303 98.1763 75.145 98.1763 cv
76.5259 98.1763 77.6816 97.6631 78.5493 96.6846 cv
79.2109 95.9946 79.5376 95.2563 79.5205 94.4902 cv
79.4912 93.2139 78.5269 92.2959 77.7515 91.5581 cv
77.459 91.2798 76.9824 90.8262 76.8799 90.5986 cv
76.9082 90.5605 76.9478 90.5522 77.0718 90.5522 cv
77.7617 90.5522 78.9521 91.1572 79.9082 91.6431 cv
80.3335 91.8579 li
84.3618 93.7773 87.5288 92.6816 88.6431 89.2202 cv
88.9819 88.2939 88.9722 87.4429 88.6147 86.6914 cv
87.9453 85.2832 86.3198 84.7227 84.8862 84.228 cv
84.396 84.0591 83.6855 83.8135 83.3989 83.623 cv
83.4644 83.147 83.7656 82.5327 85.8086 82.5244 cv
88.1807 82.4507 90.1084 81.3999 91.0977 79.6411 cv
92.147 77.7754 92.0142 75.4082 90.7334 73.1455 cv
89.5444 71.0513 87.5513 69.8008 85.4009 69.8008 cv
82.9785 69.8008 80.8735 71.3354 79.7822 73.8794 cv
78.9194 75.7563 78.2925 76.1406 77.563 76.1445 cv
77.4893 75.7739 77.4946 75.04 77.4985 74.5264 cv
77.5103 73.0127 77.5234 71.2974 76.4761 70.2427 cv
76.1152 69.8789 75.4644 69.4453 74.4131 69.4453 cv
74.1621 69.4453 73.8936 69.4697 73.5781 69.5249 cv
71.3682 69.9829 69.6978 71.0688 68.7471 72.666 cv
67.8188 74.2266 67.6519 76.125 68.2573 78.1318 cv
68.3389 78.4258 68.4312 78.73 68.5249 79.0391 cv
69.002 80.6118 69.3516 81.9331 68.7778 82.1885 cv
68.5869 82.1372 68.144 81.624 67.8794 81.3169 cv
67.1694 80.4937 66.2856 79.4692 64.9028 79.4692 cv
64.0649 79.4692 63.25 79.8535 62.3823 80.6719 cv
59.6855 83.3936 60.813 86.3677 61.2949 87.6372 cv
61.3564 87.8008 li
61.4619 88.0859 61.5669 88.353 61.6665 88.605 cv
62.1489 89.8291 62.2549 90.2241 62.0835 90.5669 cv
61.9487 90.5298 61.7808 90.4736 61.6533 90.4307 cv
61.189 90.2754 60.6626 90.0991 60.0835 90.0991 cv
59.4556 90.0991 58.3101 90.333 57.7012 91.8931 cv
56.8833 93.9497 57.875 96.3877 60.623 99.1362 cv
59.7788 100.502 59.8999 100.777 59.98 100.946 cv
cp
f
69.0757 234.116 mo
68.3091 234.116 67.5698 234.379 66.7139 234.683 cv
66.4658 234.771 66.2021 234.865 65.9297 234.955 cv
65.6943 235.033 li
65.1602 235.211 64.4292 235.455 63.6538 235.455 cv
62.7129 235.455 61.915 235.084 61.2554 234.368 cv
60.9204 233.962 60.7412 233.603 60.7646 233.385 cv
60.8003 233.046 61.3906 232.577 61.8652 232.2 cv
62.7686 231.483 64.1333 230.399 63.4751 228.704 cv
63.2197 228.026 62.5049 226.889 60.5889 226.889 cv
59.6216 226.889 58.5776 227.161 57.5684 227.425 cv
57.2749 227.502 56.9863 227.577 56.6821 227.649 cv
56.1636 227.785 55.6597 227.854 55.1841 227.854 cv
52.9731 227.854 51.5493 226.434 51.1768 223.873 cv
51.126 223.486 51.1567 223.195 51.2617 223.076 cv
51.3594 222.965 51.6865 222.777 52.7773 222.777 cv
53.1553 222.777 53.5444 222.798 53.9229 222.816 cv
54.3193 222.837 54.7056 222.855 55.0605 222.855 cv
56.8032 222.855 57.7637 222.25 57.9087 221.099 cv
58.3633 218.322 56.2666 217.002 54.4526 216.193 cv
52.8735 215.367 51.9341 214.022 51.9385 212.597 cv
51.9434 211.247 52.7637 210.052 54.1899 209.317 cv
56.0645 208.354 57.999 208.456 59.0493 209.559 cv
59.7026 210.244 60.0156 211.266 59.9536 212.588 cv
60.002 215.436 61.1157 217.022 63.3115 217.312 cv
63.4878 217.319 li
65.0161 217.319 65.6357 215.741 66.1821 214.349 cv
66.5991 213.288 67.1172 211.968 67.7617 211.968 cv
67.9038 211.968 68.0845 212.012 68.3062 212.103 cv
69.2466 212.471 69.8247 212.973 70.0732 213.638 cv
70.4087 214.534 70.1709 215.803 69.397 217.281 cv
69.1826 217.667 li
68.3306 219.193 67.3647 220.923 67.8008 222.393 cv
67.9878 223.022 68.4116 223.527 69.0352 223.855 cv
69.3501 224.018 69.6841 224.101 70.0283 224.101 cv
71.1108 224.101 71.9355 223.301 72.6626 222.596 cv
73.0688 222.202 73.6821 221.607 73.978 221.607 cv
74.0566 221.607 74.2314 221.7 74.5171 222.014 cv
75.604 223.076 75.2222 224.412 74.6973 225.803 cv
74.373 226.671 li
73.7832 228.231 73.1729 229.845 74.645 231.269 cv
74.9756 231.573 75.3906 231.734 75.8457 231.734 cv
75.8462 231.734 li
76.4531 231.734 76.9976 231.445 77.4785 231.19 cv
77.7188 231.063 78.1216 230.85 78.1753 230.816 cv
78.1753 230.817 78.2217 230.854 78.3062 231.007 cv
78.5361 231.398 78.8418 232.631 77.0244 235.75 cv
76.1025 234.884 74.9106 233.78 73.3398 232.34 cv
68.9507 228.443 63.5898 222.303 57.4072 214.089 cv
56.7148 213.169 56.7148 213.169 56.5098 213.169 cv
56.4624 213.169 56.4155 213.178 56.3716 213.194 cv
56.2461 213.242 56.1499 213.359 56.1255 213.492 cv
55.9873 214.246 64.5054 227.248 71.9297 233.86 cv
73.4111 235.218 74.6772 236.324 75.7388 237.194 cv
74.3076 238.398 73.084 239.016 72.0977 239.016 cv
71.8511 239.015 71.6289 238.976 71.4453 238.904 cv
71.2368 238.817 71.1504 238.742 71.144 238.741 cv
71.1123 238.591 71.3008 238.105 71.4023 237.845 cv
71.687 237.114 72.1631 235.892 71.2085 235.013 cv
70.5952 234.418 69.8774 234.116 69.0757 234.116 cv
cp
72.0977 241.332 mo
72.0981 241.332 li
74.3608 241.332 76.5039 239.639 77.6206 238.636 cv
78.4502 239.21 79.04 239.508 79.3701 239.508 cv
79.6543 239.508 79.7827 239.34 79.8247 239.267 cv
79.8325 239.253 79.8394 239.238 79.8457 239.222 cv
79.8975 239.175 79.938 239.12 79.9561 239.064 cv
80.0254 238.85 80.0591 238.705 78.7412 237.396 cv
79.5615 236.064 81.7847 232.36 80.3184 229.858 cv
79.7095 228.763 78.8672 228.532 78.2681 228.532 cv
77.5464 228.532 76.9067 228.871 76.3931 229.145 cv
76.2939 229.196 76.1689 229.263 76.062 229.317 cv
75.9941 229.056 76.1147 228.613 76.5396 227.49 cv
76.8643 226.621 li
77.3223 225.408 78.3955 222.566 76.1875 220.41 cv
75.5181 219.668 74.7749 219.291 73.978 219.291 cv
72.7437 219.291 71.8047 220.201 71.0503 220.933 cv
70.7383 221.235 70.2168 221.741 70.0259 221.746 cv
69.7827 221.344 70.8535 219.426 71.2056 218.796 cv
71.4375 218.378 li
72.5527 216.247 72.8237 214.379 72.2427 212.826 cv
71.7578 211.528 70.7173 210.56 69.1719 209.954 cv
68.686 209.753 68.2114 209.651 67.7617 209.651 cv
65.5381 209.651 64.6646 211.877 64.0264 213.502 cv
63.835 213.989 63.5581 214.694 63.353 214.976 cv
62.8896 214.877 62.3032 214.531 62.2686 212.625 cv
62.3608 210.729 61.8276 209.117 60.7266 207.961 cv
58.9795 206.127 55.9102 205.826 53.1299 207.258 cv
50.9409 208.385 49.6294 210.377 49.6221 212.589 cv
49.6143 214.896 51.019 217.012 53.4434 218.277 cv
55.4194 219.161 55.7017 219.813 55.6494 220.505 cv
55.4067 220.542 54.7178 220.538 54.0396 220.503 cv
53.6226 220.482 53.1938 220.461 52.7773 220.461 cv
51.7051 220.461 50.3657 220.585 49.5205 221.548 cv
48.9517 222.196 48.7363 223.08 48.8823 224.19 cv
49.4189 227.879 51.8335 230.17 55.1841 230.17 cv
55.8564 230.17 56.5571 230.076 57.2407 229.897 cv
57.5361 229.828 57.8433 229.748 58.1543 229.666 cv
59.022 229.439 59.9194 229.205 60.5889 229.205 cv
61.1885 229.205 61.2515 229.372 61.3232 229.531 cv
61.2666 229.718 60.7397 230.136 60.4248 230.386 cv
59.6113 231.032 58.5986 231.836 58.4609 233.141 cv
58.3677 234.022 58.6968 234.906 59.5078 235.888 cv
60.6553 237.138 62.0503 237.771 63.6538 237.771 cv
64.8057 237.771 65.7817 237.445 66.4277 237.23 cv
66.6479 237.157 li
66.9463 237.059 67.2261 236.959 67.4897 236.865 cv
68.144 236.633 68.7085 236.433 69.0757 236.433 cv
69.1758 236.433 69.2773 236.441 69.417 236.532 cv
69.3721 236.676 69.2988 236.864 69.2441 237.004 cv
68.9238 237.826 68.0742 240.009 70.5811 241.054 cv
71.0571 241.238 71.5674 241.331 72.0977 241.332 cv
cp
f
35.0913 185.522 mo
34.9282 184.785 35.0513 184.528 35.0928 184.468 cv
35.2681 184.21 36.0396 184.085 36.6025 183.994 cv
37.686 183.819 39.4995 183.527 39.6929 181.667 cv
39.9272 179.007 37.1328 178.25 35.0928 177.698 cv
34.8433 177.631 34.5962 177.563 34.3535 177.493 cv
32.9473 177.093 31.876 176.291 31.3359 175.235 cv
30.7983 174.185 30.7852 172.88 31.2725 171.528 cv
31.5757 170.825 31.8271 170.825 31.9346 170.825 cv
32.5005 170.825 33.4473 171.43 34.208 171.916 cv
35.1753 172.533 36.0894 173.117 37.0093 173.117 cv
37.6245 173.117 38.1724 172.852 38.5791 172.333 cv
40.4429 169.756 38.6494 167.206 38.0679 166.379 cv
37.0444 164.888 36.832 163.322 37.4849 162.082 cv
38.0894 160.935 39.3418 160.276 40.9214 160.276 cv
41.1187 160.279 li
42.8867 160.343 44.3276 161.086 44.9731 162.266 cv
45.5459 163.313 45.437 164.607 44.6597 165.923 cv
44.0981 166.899 42.3892 169.871 45.0815 171.705 cv
45.4033 171.94 45.7871 172.065 46.1904 172.065 cv
46.1909 172.065 li
47.1772 172.064 48.042 171.368 49.0435 170.562 cv
49.769 169.977 50.7627 169.176 51.355 169.176 cv
51.4404 169.176 51.6406 169.176 51.998 169.653 cv
52.6943 170.467 52.9927 171.234 52.8848 171.933 cv
52.7441 172.843 51.918 173.792 50.4995 174.675 cv
50.0112 174.972 li
48.4976 175.887 46.7822 176.924 46.4888 178.422 cv
46.3608 179.072 46.519 179.719 46.9346 180.277 cv
47.2466 180.71 47.8418 181.226 48.9063 181.226 cv
49.5112 181.226 50.1265 181.063 50.7212 180.905 cv
51.2114 180.775 51.7183 180.641 52.0913 180.641 cv
52.3481 180.641 52.5332 180.641 52.7061 181.262 cv
53.103 182.7 52.0854 183.694 50.915 184.669 cv
50.2524 185.223 li
48.9263 186.322 47.5557 187.458 48.2241 189.459 cv
48.6636 190.702 49.9863 190.72 50.7764 190.73 cv
51.0234 190.733 51.417 190.739 51.6001 190.788 cv
51.604 190.819 51.6064 190.861 51.6055 190.918 cv
51.5913 191.49 51.1157 192.671 48.2759 194.391 cv
47.8857 193.21 47.3657 191.714 46.6611 189.777 cv
44.0083 182.176 42.5073 171.679 41.8662 167.196 cv
41.5205 164.78 41.5205 164.78 41.145 164.78 cv
40.8257 164.945 li
40.458 165.462 41.2554 180.529 44.6978 190.432 cv
45.4219 192.424 46.0029 193.938 46.48 195.117 cv
45.8638 195.247 45.0542 195.381 44.2441 195.381 cv
43.0376 195.381 42.2061 195.094 41.7739 194.527 cv
41.6128 194.315 41.5938 194.211 41.5908 194.211 cv
41.6323 194.067 42.019 193.742 42.2271 193.567 cv
42.8213 193.068 43.8154 192.231 43.3779 190.986 cv
42.7559 189.122 41.1836 188.85 39.6631 188.586 cv
39.374 188.535 39.0669 188.482 38.7402 188.415 cv
38.5483 188.377 li
37.0562 188.084 35.5605 187.622 35.0913 185.522 cv
cp
38.2754 190.685 mo
38.624 190.756 38.9551 190.813 39.2671 190.868 cv
40.4917 191.08 40.8853 191.193 41.0781 191.497 cv
40.9766 191.593 40.8398 191.707 40.7363 191.794 cv
40.0767 192.349 38.3247 193.822 39.9321 195.933 cv
40.8262 197.104 42.2769 197.697 44.2441 197.697 cv
45.4946 197.697 46.6821 197.455 47.4126 197.281 cv
48.2422 199.042 48.5205 199.057 48.731 199.057 cv
48.8691 199.057 48.9937 198.995 49.0776 198.891 cv
49.2412 198.805 li
49.3418 198.66 49.4775 198.449 48.981 196.667 cv
50.4976 195.808 53.855 193.736 53.9214 190.969 cv
53.936 190.223 53.7246 189.618 53.293 189.172 cv
52.5825 188.438 51.5566 188.424 50.8071 188.414 cv
50.6802 188.412 50.5166 188.41 50.3779 188.402 cv
50.4282 188.138 50.7476 187.821 51.7305 187.006 cv
52.3975 186.448 li
53.4907 185.538 55.7666 183.644 54.938 180.643 cv
54.5225 179.148 53.5117 178.325 52.0913 178.325 cv
51.417 178.325 50.7324 178.506 50.1284 178.666 cv
49.6768 178.785 49.2095 178.909 48.9058 178.909 cv
48.8115 178.909 48.7754 178.896 48.7617 178.867 cv
48.8438 178.384 50.502 177.382 51.21 176.954 cv
51.7197 176.644 li
53.7617 175.373 54.9238 173.907 55.1738 172.286 cv
55.3896 170.891 54.9136 169.498 53.8086 168.21 cv
52.9805 167.094 52.0171 166.859 51.355 166.859 cv
49.9458 166.859 48.6943 167.868 47.5898 168.758 cv
47.1743 169.093 46.5693 169.58 46.2803 169.716 cv
45.9009 169.428 45.5952 168.942 46.6606 167.089 cv
47.8457 165.084 47.9717 162.92 47.0054 161.154 cv
45.9639 159.25 43.7944 158.058 41.1997 157.965 cv
40.9214 157.96 li
38.4897 157.96 36.439 159.098 35.4355 161.003 cv
34.3843 162.999 34.6543 165.499 36.1655 167.7 cv
37.3535 169.39 37.1895 170.204 36.8496 170.76 cv
36.5024 170.633 35.8857 170.238 35.4546 169.963 cv
34.3872 169.281 33.1772 168.509 31.9346 168.509 cv
31.0757 168.509 29.8945 168.874 29.1201 170.675 cv
28.3828 172.711 28.436 174.653 29.2739 176.291 cv
30.1094 177.924 31.688 179.143 33.7153 179.721 cv
33.9663 179.793 34.2256 179.863 34.4878 179.934 cv
36.166 180.388 37.4448 180.789 37.4185 181.412 cv
37.272 181.54 36.6221 181.645 36.2339 181.707 cv
35.1997 181.874 33.9131 182.082 33.1763 183.166 cv
32.6797 183.897 32.5659 184.832 32.8301 186.025 cv
33.6689 189.779 36.7754 190.39 38.1021 190.649 cv
38.2754 190.685 li
cp
f
36.0454 130.231 mo
36.3301 129.271 36.6187 129.271 36.7568 129.271 cv
37.1016 129.271 37.6025 129.454 38.0864 129.63 cv
38.7158 129.859 39.3662 130.096 40.0391 130.096 cv
40.0391 130.096 40.0391 130.096 40.0396 130.096 cv
40.8193 130.096 41.4731 129.772 41.9067 129.19 cv
43.6372 127.033 41.439 124.904 39.9844 123.495 cv
39.7676 123.284 39.5532 123.077 39.3374 122.858 cv
38.2627 121.806 37.7007 120.583 37.7544 119.413 cv
37.8081 118.253 38.4644 117.129 39.6514 116.165 cv
40.0391 115.851 40.2549 115.817 40.3296 115.817 cv
40.8208 115.817 41.5508 117.157 41.9868 117.957 cv
42.6992 119.265 43.436 120.617 44.7856 120.617 cv
44.7861 120.617 li
45.0532 120.617 45.3179 120.558 45.522 120.465 cv
48.3164 119.36 48.0854 116.498 47.9609 114.959 cv
47.8447 113.546 48.2021 112.311 48.9673 111.48 cv
50.0801 110.272 51.9814 110.127 53.6685 111.153 cv
55.1792 112.074 56.0688 113.418 56.0479 114.747 cv
56.0293 115.934 55.2861 117.004 53.9575 117.759 cv
50.6797 119.614 51.0479 121.864 51.583 123.092 cv
51.8384 123.609 52.4165 124.225 53.7207 124.225 cv
54.3027 124.225 54.9351 124.113 55.6045 123.995 cv
56.2461 123.881 56.9092 123.765 57.4648 123.765 cv
58.3901 123.765 58.5347 124.036 58.627 124.617 cv
58.7939 125.64 58.6509 126.443 58.2026 127.003 cv
57.6162 127.737 56.439 128.177 54.8188 128.274 cv
54.3789 128.292 li
52.6167 128.358 50.6191 128.434 49.5791 129.566 cv
49.1377 130.047 48.9219 130.664 48.958 131.391 cv
49.1025 133.088 50.8003 133.523 51.9233 133.811 cv
53.7026 134.266 53.6606 134.443 53.5024 135.107 cv
53.1631 136.562 51.7964 136.932 50.3057 137.211 cv
49.3804 137.391 li
47.7275 137.708 46.0186 138.037 45.6318 140.065 cv
45.3877 141.372 46.5361 142.035 47.2227 142.432 cv
47.4302 142.551 47.7583 142.741 47.896 142.871 cv
47.8843 142.898 47.8672 142.932 47.8418 142.975 cv
47.5283 143.482 46.5054 144.309 43.1958 144.422 cv
43.4536 143.151 43.7734 141.491 44.186 139.297 cv
45.5435 131.479 49.4053 121.671 51.0542 117.483 cv
51.9897 115.106 51.9897 115.106 51.7393 114.859 cv
51.6714 114.805 51.583 114.774 51.4961 114.774 cv
50.5625 114.774 43.8311 129.316 42.1567 138.895 cv
41.7314 141.158 41.4639 142.852 41.2988 144.143 cv
38.1885 143.149 37.5674 142.001 37.4893 141.369 cv
37.4531 141.098 37.4927 141 37.4912 141 cv
37.5942 140.892 38.1021 140.795 38.3745 140.743 cv
39.1357 140.598 40.4097 140.354 40.6504 139.056 cv
41.0288 137.1 39.7617 136.082 38.5366 135.098 cv
38.3208 134.924 38.0923 134.741 37.8569 134.542 cv
37.7158 134.423 li
36.5425 133.438 35.4478 132.303 36.0454 130.231 cv
cp
36.2266 136.197 mo
36.3589 136.309 li
36.6123 136.523 36.856 136.719 37.0854 136.903 cv
38.0898 137.71 38.3818 138.004 38.3979 138.372 cv
38.2593 138.407 38.0771 138.442 37.9399 138.468 cv
37.0942 138.629 34.8477 139.059 35.1914 141.664 cv
35.457 143.801 37.4497 145.418 41.0806 146.489 cv
41.0244 147.901 41.2236 148.156 41.3213 148.274 cv
41.4033 148.373 41.6011 148.475 41.7422 148.456 cv
41.7832 148.471 41.8218 148.479 41.8604 148.478 cv
42.123 148.478 42.2856 148.452 42.6929 146.751 cv
44.3501 146.743 48.3228 146.604 49.8193 144.18 cv
50.2075 143.535 50.3252 142.903 50.1689 142.299 cv
49.9141 141.311 49.0278 140.799 48.3809 140.426 cv
48.2754 140.365 48.1411 140.287 48.0273 140.215 cv
48.2012 140.019 48.627 139.895 49.8174 139.666 cv
50.7314 139.488 li
52.0229 139.247 55.0469 138.681 55.7568 135.638 cv
56.4839 132.586 53.7915 131.897 52.4976 131.566 cv
52.1094 131.467 51.478 131.305 51.2725 131.158 cv
51.2764 131.143 51.2813 131.137 51.2861 131.132 cv
51.6719 130.712 53.4897 130.644 54.4663 130.606 cv
54.938 130.588 li
57.2832 130.447 58.9902 129.728 60.0117 128.45 cv
60.8867 127.356 61.1899 125.941 60.9141 124.249 cv
60.7476 123.203 60.0786 121.448 57.4648 121.448 cv
56.7065 121.448 55.9072 121.589 55.2021 121.713 cv
54.6353 121.813 54.1001 121.908 53.7207 121.908 cv
53.6719 121.908 53.6313 121.906 53.5986 121.904 cv
53.4429 121.443 53.4312 120.718 55.0996 119.774 cv
57.1426 118.613 58.3325 116.794 58.3638 114.783 cv
58.3979 112.625 57.0933 110.529 54.873 109.174 cv
52.2471 107.578 49.1089 107.908 47.2637 109.911 cv
46.0547 111.223 45.4824 113.083 45.6523 115.147 cv
45.8188 117.212 45.5464 117.865 44.8574 118.225 cv
44.6147 117.939 44.2656 117.298 44.021 116.849 cv
43.208 115.357 42.1968 113.5 40.3296 113.5 cv
39.6201 113.5 38.9014 113.791 38.1919 114.366 cv
36.4766 115.76 35.5249 117.469 35.4404 119.307 cv
35.356 121.145 36.1646 122.994 37.7017 124.498 cv
37.9146 124.714 38.1421 124.935 38.3726 125.158 cv
39.5425 126.292 40.4795 127.268 40.0391 127.78 cv
39.7749 127.78 39.2993 127.606 38.8794 127.454 cv
38.2378 127.22 37.5103 126.955 36.7568 126.955 cv
35.7734 126.955 34.4663 127.409 33.8223 129.581 cv
32.7539 133.282 35.1875 135.325 36.2266 136.197 cv
cp
f
229.655 99.0801 mo
230.317 99.8457 231.489 100.576 232.749 100.973 cv
233.501 101.207 234.295 101.33 235.044 101.33 cv
235.359 101.33 235.871 101.306 236.366 101.179 cv
235.92 102.116 234.944 102.664 233.684 102.664 cv
233.226 102.664 232.755 102.589 232.284 102.441 cv
231.333 102.146 230.551 101.598 230.082 100.899 cv
229.807 100.488 229.531 99.8594 229.655 99.0801 cv
cp
231.648 96.6519 mo
232.266 94.6953 234.044 93.3999 234.638 93.5835 cv
234.791 93.6328 234.931 93.6353 235.055 93.6108 cv
235.144 93.7021 235.26 93.7813 235.413 93.8311 cv
235.532 93.8682 235.728 94.0356 235.916 94.394 cv
236.324 95.1709 236.563 96.6475 236.122 98.0557 cv
235.922 98.7012 235.604 99.2783 235.227 99.7769 cv
235.164 99.7793 235.111 99.7856 235.044 99.7856 cv
234.448 99.7856 233.813 99.6865 233.211 99.499 cv
232.434 99.2539 231.822 98.9072 231.389 98.5825 cv
231.363 97.9551 231.446 97.2949 231.648 96.6519 cv
cp
230.438 103.273 mo
230.408 103.315 230.378 103.355 230.335 103.415 cv
230.118 103.708 229.871 103.95 229.602 104.135 cv
229.25 104.376 229.16 104.857 229.401 105.208 cv
229.551 105.427 229.793 105.543 230.039 105.543 cv
230.189 105.543 230.342 105.5 230.475 105.408 cv
230.886 105.126 231.256 104.766 231.578 104.332 cv
231.699 104.167 231.783 104.045 231.856 103.923 cv
232.464 104.11 233.079 104.208 233.684 104.208 cv
235.771 104.208 237.416 103.091 237.975 101.295 cv
238.286 100.295 237.798 99.5708 237.46 99.3003 cv
237.421 99.2695 237.371 99.2627 237.328 99.2402 cv
237.429 99.0044 237.52 98.7627 237.596 98.5151 cv
238.103 96.9004 237.979 95.0005 237.283 93.6758 cv
237.002 93.1406 236.645 92.7456 236.24 92.5161 cv
236.179 92.2813 236.033 91.9385 235.642 91.8218 cv
235.245 91.6865 234.93 91.8633 234.716 92.0361 cv
233.075 91.9077 230.927 93.8047 230.176 96.1885 cv
230.098 96.4375 230.034 96.689 229.982 96.9414 cv
229.931 96.9341 229.881 96.9092 229.828 96.9136 cv
229.396 96.9399 228.579 97.251 228.269 98.2495 cv
227.896 99.4468 228.084 100.693 228.8 101.76 cv
229.204 102.363 229.774 102.868 230.438 103.273 cv
cp
f
220.566 112.506 mo
221.137 111.639 221.493 110.299 221.522 109.013 cv
221.55 107.696 221.234 106.354 220.722 105.481 cv
222.144 105.729 223.11 107.163 223.065 109.05 cv
223.024 110.931 221.991 112.331 220.566 112.506 cv
cp
217.679 111.278 mo
216.208 111.246 214.886 110.547 214.279 109.912 cv
213.998 109.617 213.901 109.377 213.904 109.261 cv
213.91 109.1 213.875 108.963 213.815 108.847 cv
213.878 108.738 213.919 108.606 213.919 108.449 cv
213.936 107.81 215.748 106.549 217.78 106.59 cv
218.47 106.606 219.118 106.754 219.701 106.983 cv
219.866 107.496 219.995 108.177 219.979 108.979 cv
219.96 109.803 219.792 110.491 219.597 110.998 cv
219.01 111.193 218.356 111.294 217.679 111.278 cv
cp
224.605 109.115 mo
224.743 109.084 224.888 109.044 225.086 108.981 cv
225.582 108.822 226.042 108.588 226.451 108.287 cv
226.795 108.034 226.869 107.551 226.616 107.207 cv
226.363 106.864 225.88 106.789 225.537 107.042 cv
225.262 107.245 224.95 107.403 224.616 107.51 cv
224.543 107.534 224.491 107.549 224.44 107.565 cv
223.959 105.448 222.388 103.948 220.317 103.899 cv
219.31 103.899 218.772 104.558 218.613 104.948 cv
218.593 104.998 218.6 105.052 218.591 105.104 cv
218.335 105.073 218.076 105.052 217.814 105.046 cv
215.308 104.997 212.844 106.402 212.434 108.013 cv
212.225 108.141 211.929 108.383 211.93 108.806 cv
211.919 109.211 212.171 109.458 212.395 109.611 cv
212.483 110.073 212.744 110.54 213.162 110.978 cv
214.196 112.061 215.955 112.785 217.645 112.822 cv
217.703 112.823 217.761 112.824 217.818 112.824 cv
218.019 112.824 218.217 112.812 218.414 112.797 cv
218.422 112.846 218.412 112.897 218.43 112.945 cv
218.579 113.353 219.11 114.047 220.152 114.067 cv
220.159 114.067 220.254 114.069 220.261 114.069 cv
222.708 114.069 224.531 111.985 224.605 109.115 cv
cp
f
229.998 151.052 mo
229.9 150.657 229.936 150.401 229.998 150.298 cv
230.082 150.162 230.118 150.027 230.124 149.899 cv
230.234 149.835 230.335 149.74 230.411 149.602 cv
230.742 149.058 232.93 148.853 234.688 149.906 cv
235.271 150.257 235.771 150.694 236.165 151.178 cv
236.056 151.709 235.828 152.375 235.41 153.073 cv
234.983 153.777 234.496 154.29 234.075 154.634 cv
233.466 154.512 232.85 154.275 232.273 153.928 cv
231.01 153.167 230.208 151.903 229.998 151.052 cv
cp
238.681 152.045 mo
238.792 152.878 238.57 153.808 238.053 154.665 cv
237.115 156.227 235.476 156.987 234.159 156.422 cv
235.055 155.968 236.036 155.02 236.732 153.87 cv
237.411 152.737 237.804 151.414 237.791 150.401 cv
238.402 150.901 238.614 151.555 238.681 152.045 cv
cp
233.034 157.575 mo
233.675 157.964 234.371 158.161 235.104 158.161 cv
236.755 158.161 238.344 157.16 239.359 155.486 cv
239.496 155.528 239.642 155.563 239.844 155.606 cv
240.177 155.678 240.51 155.713 240.84 155.713 cv
241.019 155.713 241.195 155.702 241.371 155.682 cv
241.795 155.632 242.098 155.248 242.048 154.825 cv
241.998 154.4 241.606 154.097 241.191 154.148 cv
240.854 154.188 240.511 154.169 240.165 154.097 cv
240.09 154.081 240.039 154.069 239.987 154.058 cv
240.217 153.313 240.308 152.558 240.211 151.839 cv
240.039 150.566 239.354 149.509 238.278 148.86 cv
237.95 148.662 237.605 148.563 237.255 148.563 cv
236.68 148.563 236.298 148.836 236.228 148.892 cv
236.184 148.926 236.163 148.977 236.128 149.019 cv
235.922 148.864 235.708 148.718 235.484 148.583 cv
233.351 147.303 230.501 147.293 229.34 148.488 cv
229.096 148.495 228.72 148.558 228.507 148.924 cv
228.295 149.272 228.392 149.611 228.511 149.856 cv
228.358 150.302 228.354 150.835 228.498 151.422 cv
228.857 152.875 230.026 154.378 231.476 155.25 cv
231.697 155.384 231.925 155.504 232.155 155.613 cv
232.139 155.658 232.105 155.696 232.098 155.745 cv
232.026 156.173 232.143 157.038 233.034 157.575 cv
cp
f
255.285 147.273 mo
255.396 147.401 255.521 147.478 255.647 147.521 cv
255.68 147.646 255.743 147.772 255.854 147.892 cv
255.939 147.982 256.027 148.223 256.015 148.627 cv
255.989 149.504 255.471 150.907 254.393 151.917 cv
253.904 152.38 253.354 152.741 252.785 152.987 cv
252.285 152.732 251.698 152.325 251.151 151.745 cv
250.595 151.15 250.232 150.547 250.014 150.05 cv
250.298 149.495 250.695 148.962 251.191 148.496 cv
252.685 147.095 254.867 146.835 255.285 147.273 cv
cp
248.898 153.852 mo
248.128 153.034 247.702 152.036 247.73 151.113 cv
247.747 150.561 247.928 150.058 248.259 149.639 cv
248.456 150.631 249.11 151.822 250.025 152.802 cv
250.934 153.766 252.098 154.498 253.074 154.756 cv
251.902 155.579 250.142 155.176 248.898 153.852 cv
cp
249.597 147.931 mo
249.554 147.896 249.522 147.851 249.472 147.826 cv
249.401 147.792 249.141 147.68 248.776 147.68 cv
248.441 147.68 247.94 147.775 247.462 148.229 cv
246.661 148.981 246.22 149.963 246.187 151.067 cv
246.16 151.939 246.405 152.841 246.869 153.673 cv
246.823 153.694 246.779 153.715 246.714 153.744 cv
246.399 153.888 246.065 153.977 245.722 154.011 cv
245.298 154.053 244.987 154.431 245.029 154.855 cv
245.068 155.254 245.404 155.552 245.797 155.552 cv
245.822 155.552 245.848 155.55 245.874 155.548 cv
246.387 155.497 246.884 155.363 247.35 155.151 cv
247.537 155.067 247.672 155.002 247.797 154.932 cv
248.887 156.082 250.291 156.743 251.657 156.743 cv
252.703 156.743 253.658 156.363 254.418 155.646 cv
255.18 154.931 255.11 154.059 254.949 153.656 cv
254.931 153.61 254.892 153.581 254.865 153.54 cv
255.067 153.385 255.265 153.219 255.452 153.041 cv
256.687 151.884 257.514 150.169 257.559 148.673 cv
257.576 148.07 257.459 147.552 257.219 147.151 cv
257.279 146.918 257.322 146.548 257.039 146.25 cv
256.761 145.939 256.399 145.938 256.131 145.983 cv
254.766 145.053 251.959 145.661 250.135 147.37 cv
249.944 147.549 249.766 147.736 249.597 147.931 cv
cp
f
228.686 202.158 mo
227.988 202.561 227.247 202.774 226.542 202.774 cv
225.654 202.774 224.919 202.438 224.432 201.814 cv
225.449 201.862 226.782 201.473 227.916 200.821 cv
229.074 200.148 230.045 199.196 230.52 198.304 cv
231.116 199.796 230.101 201.341 228.686 202.158 cv
cp
223.385 195.097 mo
223.49 194.704 223.644 194.498 223.751 194.436 cv
223.888 194.358 223.983 194.259 224.05 194.151 cv
224.178 194.148 224.313 194.115 224.447 194.031 cv
224.992 193.717 227.015 194.591 228.041 196.364 cv
228.382 196.957 228.608 197.583 228.718 198.194 cv
228.365 198.605 227.845 199.076 227.144 199.484 cv
226.441 199.887 225.741 200.09 225.19 200.184 cv
224.729 199.786 224.313 199.287 223.983 198.712 cv
223.246 197.438 223.156 195.945 223.385 195.097 cv
cp
231.69 197.188 mo
231.338 196.573 230.738 196.206 230.086 196.206 cv
230.045 196.206 229.92 196.215 229.88 196.221 cv
229.824 196.229 229.781 196.265 229.73 196.284 cv
229.625 196.051 229.508 195.819 229.378 195.593 cv
228.133 193.44 225.645 192.06 224.049 192.536 cv
223.83 192.423 223.469 192.292 223.116 192.513 cv
222.758 192.712 222.678 193.059 222.662 193.331 cv
222.313 193.646 222.05 194.11 221.893 194.695 cv
221.504 196.143 221.8 198.023 222.646 199.482 cv
222.775 199.708 222.916 199.924 223.065 200.132 cv
223.028 200.164 222.981 200.182 222.95 200.221 cv
222.68 200.561 222.361 201.376 222.886 202.275 cv
223.629 203.573 224.962 204.318 226.542 204.318 cv
227.51 204.318 228.508 204.037 229.431 203.509 cv
229.531 203.613 229.641 203.714 229.793 203.846 cv
230.184 204.186 230.621 204.457 231.095 204.652 cv
231.19 204.692 231.29 204.711 231.389 204.711 cv
231.691 204.711 231.979 204.531 232.103 204.232 cv
232.265 203.839 232.077 203.388 231.683 203.225 cv
231.365 203.094 231.071 202.911 230.807 202.681 cv
230.749 202.631 230.709 202.596 230.67 202.561 cv
232.229 201.049 232.698 198.936 231.69 197.188 cv
cp
f
247.373 205.427 mo
246.923 206.179 245.787 207.152 244.354 207.51 cv
243.705 207.675 243.047 207.722 242.427 207.661 cv
242.125 207.209 241.81 206.576 241.608 205.777 cv
241.414 204.997 241.39 204.303 241.438 203.766 cv
241.958 203.415 242.558 203.128 243.224 202.96 cv
245.209 202.467 247.243 203.303 247.396 203.897 cv
247.431 204.059 247.501 204.183 247.589 204.279 cv
247.557 204.404 247.551 204.546 247.592 204.702 cv
247.622 204.824 247.581 205.078 247.373 205.427 cv
cp
238.614 206.521 mo
238.369 205.555 238.429 204.602 238.78 203.838 cv
238.987 203.389 239.381 202.826 240.112 202.525 cv
239.804 203.49 239.792 204.871 240.11 206.152 cv
240.412 207.351 241.059 208.609 241.821 209.346 cv
240.366 209.506 239.064 208.331 238.614 206.521 cv
cp
248.759 203.172 mo
248.02 201.697 245.274 200.861 242.849 201.462 cv
242.596 201.525 242.349 201.603 242.107 201.69 cv
242.086 201.641 242.081 201.586 242.05 201.541 cv
241.768 201.142 240.99 200.686 240.095 200.91 cv
238.879 201.217 237.914 202.027 237.377 203.192 cv
237.073 203.852 236.939 204.603 236.941 205.38 cv
236.889 205.376 236.836 205.372 236.761 205.365 cv
236.403 205.335 236.079 205.252 235.768 205.112 cv
235.381 204.938 234.923 205.111 234.747 205.502 cv
234.573 205.891 234.747 206.348 235.137 206.522 cv
235.601 206.73 236.103 206.858 236.627 206.904 cv
236.827 206.922 236.976 206.934 237.116 206.934 cv
237.12 206.934 237.124 206.933 237.128 206.933 cv
237.733 209.309 239.509 210.904 241.558 210.904 cv
241.891 210.904 242.228 210.862 242.557 210.778 cv
243.572 210.525 243.938 209.731 243.993 209.303 cv
244 209.251 243.979 209.202 243.976 209.15 cv
244.229 209.113 244.481 209.07 244.732 209.007 cv
246.373 208.597 247.93 207.503 248.698 206.219 cv
249.008 205.702 249.158 205.192 249.144 204.722 cv
249.311 204.547 249.528 204.244 249.425 203.852 cv
249.335 203.442 249.02 203.265 248.759 203.172 cv
cp
f
193.731 235.655 mo
194.577 236.168 195.873 236.49 197.253 236.49 cv
197.254 236.49 197.255 236.49 197.256 236.49 cv
198.596 236.468 199.908 236.11 200.758 235.563 cv
200.562 236.991 199.164 238.007 197.278 238.03 cv
197.204 238.031 li
195.602 238.031 193.973 237.218 193.731 235.655 cv
cp
196.098 229.278 mo
196.381 228.988 196.616 228.884 196.733 228.883 cv
196.896 228.883 197.031 228.842 197.145 228.778 cv
197.248 228.832 197.37 228.867 197.512 228.867 cv
197.523 228.867 197.532 228.866 197.548 228.867 cv
198.188 228.867 199.513 230.617 199.544 232.66 cv
199.553 233.344 199.43 233.997 199.223 234.591 cv
198.705 234.776 198.006 234.933 197.163 234.946 cv
196.383 234.946 195.722 234.81 195.226 234.642 cv
195.004 234.056 194.863 233.408 194.854 232.727 cv
194.833 231.255 195.484 229.907 196.098 229.278 cv
cp
198.872 239.524 mo
198.846 239.452 198.829 239.402 198.812 239.353 cv
200.909 238.796 202.351 237.182 202.326 235.163 cv
202.314 234.117 201.625 233.584 201.219 233.434 cv
201.167 233.414 201.112 233.424 201.059 233.416 cv
201.081 233.159 201.093 232.899 201.089 232.638 cv
201.05 230.151 199.551 227.721 197.927 227.367 cv
197.795 227.17 197.551 226.892 197.143 226.892 cv
196.729 226.907 196.478 227.152 196.329 227.386 cv
195.871 227.49 195.415 227.768 194.993 228.2 cv
193.946 229.272 193.286 231.058 193.31 232.748 cv
193.313 233.008 193.331 233.265 193.36 233.52 cv
193.313 233.528 193.265 233.521 193.22 233.539 cv
192.817 233.702 192.143 234.258 192.157 235.3 cv
192.184 237.737 194.353 239.575 197.204 239.575 cv
197.207 239.575 197.241 239.575 197.269 239.575 cv
197.304 239.712 197.35 239.854 197.419 240.046 cv
197.6 240.546 197.851 240.997 198.165 241.389 cv
198.317 241.578 198.541 241.677 198.767 241.677 cv
198.937 241.677 199.107 241.621 199.251 241.506 cv
199.583 241.238 199.636 240.753 199.368 240.42 cv
199.161 240.162 198.993 239.859 198.872 239.524 cv
cp
f
212.492 249.707 mo
212.404 249.8 212.33 249.92 212.29 250.075 cv
212.257 250.197 212.096 250.399 211.743 250.602 cv
210.981 251.037 209.516 251.33 208.092 250.942 cv
207.438 250.766 206.848 250.469 206.333 250.106 cv
206.294 249.568 206.33 248.87 206.541 248.089 cv
206.758 247.302 207.082 246.678 207.385 246.232 cv
208.012 246.184 208.675 246.241 209.329 246.419 cv
211.306 246.959 212.67 248.682 212.509 249.281 cv
212.462 249.438 212.463 249.58 212.492 249.707 cv
cp
204.982 251.304 mo
204.493 251.092 204.096 250.734 203.821 250.255 cv
203.361 249.452 203.269 248.364 203.567 247.27 cv
204.017 245.614 205.208 244.502 206.532 244.502 cv
206.63 244.502 206.729 244.509 206.829 244.521 cv
206.052 245.245 205.378 246.494 205.052 247.684 cv
204.708 248.956 204.692 250.335 204.982 251.304 cv
cp
209.735 244.929 mo
209.484 244.86 209.231 244.807 208.979 244.766 cv
208.984 244.712 209.007 244.661 209.001 244.606 cv
208.957 244.175 208.612 243.374 207.606 243.104 cv
207.251 243.007 206.89 242.958 206.532 242.958 cv
204.947 242.958 203.518 243.923 202.66 245.453 cv
202.618 245.425 202.577 245.397 202.517 245.357 cv
202.228 245.161 201.976 244.923 201.769 244.647 cv
201.512 244.31 201.027 244.239 200.687 244.497 cv
200.347 244.755 200.279 245.238 200.536 245.579 cv
200.846 245.988 201.221 246.344 201.652 246.637 cv
201.822 246.75 201.946 246.83 202.071 246.898 cv
201.677 248.374 201.824 249.875 202.481 251.022 cv
203.027 251.976 203.873 252.631 204.929 252.916 cv
205.116 252.967 205.304 252.992 205.486 252.992 cv
206.165 252.992 206.672 252.633 206.9 252.324 cv
206.93 252.285 206.934 252.235 206.955 252.192 cv
207.193 252.284 207.438 252.365 207.688 252.433 cv
208.271 252.592 208.888 252.67 209.5 252.67 cv
210.598 252.669 211.677 252.419 212.511 251.941 cv
213.033 251.642 213.415 251.271 213.633 250.853 cv
213.863 250.782 214.199 250.622 214.31 250.217 cv
214.421 249.82 214.234 249.517 214.055 249.313 cv
214.135 247.663 212.148 245.589 209.735 244.929 cv
cp
f
195.355 249.709 mo
194.716 250.901 193.393 251.585 191.724 251.585 cv
191.576 251.585 191.425 251.58 191.262 251.568 cv
190.995 251.552 190.738 251.543 190.491 251.543 cv
189.593 251.543 186.856 251.543 185.806 254.35 cv
185.112 256.217 187.07 257.155 188.5 257.84 cv
189.328 258.237 190.58 258.838 190.715 259.352 cv
190.781 259.602 190.542 259.994 190.425 260.164 cv
189.415 261.48 188.187 262.176 186.872 262.176 cv
185.743 262.176 184.557 261.657 183.528 260.715 cv
183.343 260.545 183.155 260.367 182.966 260.188 cv
181.686 258.979 180.361 257.729 178.792 257.729 cv
178.175 257.729 177.599 257.927 177.072 258.322 cv
175.583 259.458 176.29 261.183 176.713 262.213 cv
176.948 262.785 177.24 263.498 177.105 263.796 cv
177.02 263.984 176.671 264.198 176.173 264.368 cv
175.723 264.521 175.289 264.6 174.885 264.6 cv
173.404 264.6 172.447 263.556 171.813 262.866 cv
171.674 262.714 li
171.443 262.47 171.233 262.232 171.035 262.008 cv
170.113 260.965 169.242 259.979 167.758 259.979 cv
167.514 259.979 167.258 260.009 167.013 260.064 cv
165.689 260.346 165.493 261.648 165.376 262.427 cv
165.334 262.705 165.256 263.223 165.157 263.325 cv
165.157 263.326 165.009 263.372 164.759 263.343 cv
163.949 263.259 162.795 262.51 161.729 259.574 cv
162.315 259.486 162.924 259.393 163.577 259.288 cv
173.465 257.544 187.463 250.875 187.71 250.151 cv
187.729 250.097 187.734 250.039 187.728 249.982 cv
187.724 249.941 187.713 249.902 187.696 249.866 cv
187.68 249.829 187.657 249.794 187.629 249.764 cv
187.558 249.686 187.455 249.637 187.341 249.637 cv
187.233 249.637 187.233 249.637 186.121 250.076 cv
182.564 251.481 171.74 255.759 163.19 257.258 cv
162.539 257.361 161.945 257.459 161.383 257.553 cv
161.37 254.179 162.149 253.135 162.64 252.819 cv
162.705 252.777 162.754 252.754 162.771 252.739 cv
162.914 252.861 163.144 253.225 163.285 253.45 cv
163.752 254.189 164.392 255.275 165.74 254.983 cv
167.82 254.516 168.073 252.704 168.317 250.953 cv
168.442 250.1 li
168.67 248.556 168.996 247.135 170.47 246.715 cv
171.157 246.521 171.355 246.528 171.879 248.275 cv
172.234 249.463 172.722 251.09 174.414 251.22 cv
175.189 251.285 175.829 251.048 176.324 250.55 cv
177.386 249.484 177.378 247.498 177.37 245.745 cv
177.37 245.143 li
177.387 241.069 179.456 241.069 180.234 241.069 cv
180.469 241.069 180.715 241.087 181.036 241.13 cv
181.519 241.171 181.644 241.324 181.685 241.375 cv
182.065 241.845 181.895 243.225 181.771 244.231 cv
181.573 245.832 181.349 247.647 182.882 248.276 cv
183.355 248.473 183.828 248.571 184.285 248.571 cv
186.232 248.571 187.396 246.851 188.098 245.563 cv
188.901 244.117 190.057 243.32 191.352 243.32 cv
192.66 243.32 193.961 244.146 194.919 245.585 cv
195.837 246.967 196 248.508 195.355 249.709 cv
cp
191.352 241.004 mo
189.209 241.004 187.285 242.256 186.068 244.446 cv
185.404 245.664 184.821 246.255 184.285 246.255 cv
184.184 246.255 184.072 246.237 183.951 246.201 cv
183.906 245.84 184.003 245.057 184.069 244.516 cv
184.265 242.938 184.485 241.15 183.483 239.916 cv
182.961 239.272 182.203 238.904 181.292 238.828 cv
177.389 238.296 175.072 240.661 175.054 245.131 cv
175.054 245.755 li
175.058 246.607 175.065 248.604 174.628 248.925 cv
174.451 248.79 174.23 248.052 174.098 247.611 cv
173.729 246.382 173.113 244.324 170.927 244.324 cv
170.588 244.324 170.223 244.378 169.838 244.486 cv
166.8 245.352 166.361 248.33 166.15 249.762 cv
166.023 250.633 li
165.832 252.003 165.725 252.44 165.505 252.613 cv
165.419 252.49 165.32 252.335 165.245 252.215 cv
164.793 251.497 164.109 250.412 162.813 250.412 cv
162.347 250.412 161.87 250.563 161.393 250.867 cv
159.121 252.327 159.018 256.084 159.066 257.958 cv
153.951 258.901 153.973 259.297 154.001 259.652 cv
154.004 259.684 154.01 259.714 154.018 259.742 cv
154.014 259.797 154.021 259.853 154.038 259.908 cv
154.155 260.279 154.635 260.311 155.159 260.311 cv
155.992 260.311 157.413 260.176 159.403 259.908 cv
160.612 263.477 162.328 265.418 164.517 265.646 cv
164.668 265.663 164.811 265.67 164.944 265.67 cv
167.229 265.67 167.536 263.639 167.666 262.771 cv
167.688 262.629 167.717 262.439 167.747 262.296 cv
167.751 262.296 167.755 262.296 167.758 262.296 cv
168.179 262.296 168.576 262.724 169.3 263.543 cv
169.514 263.784 169.74 264.04 169.983 264.298 cv
170.107 264.433 li
170.847 265.238 172.387 266.916 174.885 266.916 cv
175.544 266.916 176.229 266.796 176.92 266.561 cv
178.094 266.16 178.844 265.569 179.215 264.753 cv
179.764 263.545 179.261 262.318 178.856 261.334 cv
178.702 260.958 178.444 260.329 178.47 260.169 cv
178.615 260.06 178.715 260.045 178.792 260.045 cv
179.44 260.045 180.559 261.102 181.375 261.872 cv
181.574 262.061 181.771 262.246 181.964 262.423 cv
183.419 263.758 185.162 264.492 186.872 264.492 cv
188.311 264.492 190.413 263.986 192.293 261.532 cv
192.964 260.573 193.187 259.642 192.956 258.763 cv
192.548 257.212 190.93 256.437 189.501 255.751 cv
189.026 255.524 188.345 255.197 188.057 254.965 cv
188.372 254.277 188.943 253.859 190.491 253.859 cv
190.691 253.859 190.9 253.867 191.108 253.88 cv
193.938 254.078 196.273 252.899 197.397 250.804 cv
198.451 248.838 198.246 246.408 196.848 244.302 cv
195.451 242.206 193.448 241.004 191.352 241.004 cv
cp
f
233.371 223.856 mo
232.914 226.987 230.909 228.443 227.837 227.644 cv
227.559 227.577 227.271 227.502 226.978 227.426 cv
225.968 227.161 224.924 226.889 223.956 226.889 cv
222.04 226.889 221.325 228.025 221.073 228.693 cv
220.411 230.399 221.776 231.483 222.68 232.2 cv
223.153 232.577 223.744 233.046 223.78 233.385 cv
223.803 233.604 223.624 233.962 223.33 234.321 cv
222.63 235.084 221.832 235.455 220.891 235.455 cv
220.115 235.455 219.384 235.211 218.85 235.033 cv
218.622 234.958 li
218.342 234.865 218.078 234.771 217.83 234.684 cv
216.975 234.379 216.235 234.116 215.469 234.116 cv
214.667 234.116 213.95 234.417 213.355 234.993 cv
212.382 235.893 212.857 237.114 213.142 237.844 cv
213.243 238.104 213.433 238.591 213.41 238.72 cv
213.395 238.741 213.308 238.817 213.127 238.894 cv
212.067 239.301 210.598 238.71 208.804 237.197 cv
209.865 236.327 211.131 235.221 212.611 233.864 cv
220.038 227.249 228.557 214.246 228.419 213.492 cv
228.396 213.359 228.3 213.243 228.174 213.194 cv
228.13 213.178 228.083 213.169 228.035 213.169 cv
227.83 213.169 227.83 213.169 227.141 214.085 cv
220.958 222.3 215.597 228.441 211.201 232.345 cv
209.632 233.783 208.441 234.885 207.521 235.751 cv
205.703 232.631 206.009 231.398 206.252 230.982 cv
206.288 230.918 206.318 230.876 206.326 230.854 cv
206.5 230.89 206.849 231.075 207.066 231.19 cv
207.547 231.445 208.092 231.734 208.699 231.734 cv
209.154 231.734 209.569 231.573 209.921 231.249 cv
211.371 229.846 210.763 228.234 210.174 226.676 cv
209.849 225.807 li
209.322 224.415 208.939 223.078 210.078 221.961 cv
210.313 221.7 210.488 221.607 210.566 221.607 cv
210.862 221.607 211.476 222.202 211.882 222.596 cv
212.609 223.301 213.434 224.101 214.517 224.101 cv
214.86 224.101 215.194 224.018 215.519 223.851 cv
216.134 223.527 216.558 223.022 216.744 222.392 cv
217.181 220.922 216.214 219.191 215.361 217.664 cv
215.16 217.304 li
214.374 215.803 214.136 214.534 214.472 213.637 cv
214.72 212.973 215.298 212.471 216.26 212.095 cv
216.46 212.012 216.641 211.968 216.782 211.968 cv
217.427 211.968 217.945 213.288 218.361 214.349 cv
218.908 215.741 219.528 217.319 221.056 217.319 cv
221.279 217.307 li
223.428 217.023 224.542 215.436 224.59 212.512 cv
224.528 211.266 224.842 210.245 225.495 209.559 cv
226.547 208.455 228.482 208.354 230.355 209.317 cv
231.781 210.052 232.602 211.247 232.605 212.597 cv
232.61 214.022 231.671 215.367 230.156 216.162 cv
228.278 217.002 226.181 218.322 226.629 221.057 cv
226.78 222.25 227.741 222.855 229.484 222.855 cv
229.839 222.855 230.225 222.837 230.621 222.816 cv
231 222.798 231.389 222.777 231.768 222.777 cv
232.858 222.777 233.186 222.965 233.284 223.076 cv
233.389 223.196 233.42 223.486 233.371 223.856 cv
cp
231.768 220.461 mo
231.351 220.461 230.922 220.482 230.505 220.503 cv
229.822 220.539 229.134 220.542 228.893 220.504 cv
228.835 219.833 229.103 219.171 231.166 218.246 cv
233.525 217.012 234.93 214.896 234.922 212.589 cv
234.915 210.378 233.604 208.385 231.416 207.259 cv
228.634 205.825 225.565 206.126 223.817 207.962 cv
222.717 209.117 222.184 210.73 222.274 212.549 cv
222.239 214.597 221.608 214.9 221.195 214.981 cv
220.989 214.703 220.71 213.992 220.518 213.502 cv
219.88 211.877 219.006 209.651 216.782 209.651 cv
216.333 209.651 215.858 209.753 215.395 209.946 cv
213.827 210.56 212.787 211.528 212.302 212.826 cv
211.722 214.379 211.992 216.247 213.119 218.4 cv
213.339 218.794 li
213.681 219.406 214.701 221.233 214.464 221.758 cv
214.222 221.638 213.773 221.203 213.494 220.933 cv
212.74 220.201 211.801 219.291 210.566 219.291 cv
209.77 219.291 209.026 219.668 208.408 220.357 cv
206.146 222.569 207.223 225.412 207.683 226.627 cv
208.007 227.495 li
208.435 228.626 208.553 229.064 208.488 229.317 cv
208.376 229.263 208.25 229.196 208.151 229.144 cv
207.638 228.871 206.998 228.532 206.276 228.532 cv
205.677 228.532 204.835 228.763 204.24 229.835 cv
202.76 232.36 204.983 236.065 205.804 237.397 cv
204.485 238.704 204.52 238.85 204.589 239.064 cv
204.607 239.12 204.645 239.198 204.726 239.262 cv
204.754 239.314 204.79 239.362 204.828 239.394 cv
204.897 239.449 205.086 239.508 205.175 239.508 cv
205.505 239.508 206.095 239.21 206.924 238.636 cv
208.041 239.639 210.184 241.332 212.446 241.332 cv
212.978 241.332 213.487 241.238 213.99 241.043 cv
216.472 240.009 215.621 237.825 215.301 237.003 cv
215.245 236.862 215.172 236.674 215.127 236.529 cv
215.263 236.441 215.367 236.433 215.469 236.433 cv
215.836 236.433 216.4 236.633 217.054 236.865 cv
217.317 236.959 217.597 237.059 217.904 237.16 cv
218.116 237.23 li
218.763 237.446 219.739 237.771 220.891 237.771 cv
222.495 237.771 223.89 237.138 225.077 235.841 cv
225.848 234.906 226.177 234.022 226.084 233.141 cv
225.945 231.836 224.934 231.032 224.12 230.386 cv
223.805 230.136 223.278 229.718 223.237 229.521 cv
223.293 229.373 223.356 229.205 223.956 229.205 cv
224.626 229.205 225.523 229.439 226.392 229.666 cv
226.702 229.748 227.009 229.828 227.278 229.892 cv
227.987 230.076 228.688 230.17 229.36 230.17 cv
232.711 230.17 235.126 227.879 235.666 224.174 cv
235.81 223.08 235.594 222.196 235.024 221.548 cv
234.179 220.585 232.84 220.461 231.768 220.461 cv
cp
f
253.209 175.235 mo
252.669 176.291 251.598 177.093 250.187 177.495 cv
249.947 177.563 249.7 177.631 249.45 177.698 cv
247.411 178.25 244.618 179.007 244.854 181.686 cv
245.045 183.527 246.858 183.819 247.942 183.994 cv
248.506 184.085 249.276 184.21 249.452 184.468 cv
249.493 184.528 249.616 184.785 249.454 185.52 cv
248.984 187.622 247.488 188.084 245.996 188.377 cv
245.801 188.415 li
245.478 188.482 245.171 188.535 244.881 188.586 cv
243.36 188.85 241.788 189.122 241.173 190.969 cv
240.729 192.231 241.724 193.067 242.317 193.567 cv
242.525 193.742 242.914 194.069 242.952 194.198 cv
242.952 194.199 242.94 194.304 242.771 194.527 cv
242.338 195.094 241.507 195.381 240.301 195.381 cv
239.49 195.381 238.681 195.247 238.064 195.117 cv
238.542 193.938 239.123 192.421 239.849 190.427 cv
243.289 180.529 244.085 165.462 243.718 164.945 cv
243.398 164.78 li
243.023 164.78 243.023 164.78 242.679 167.19 cv
242.038 171.674 240.537 182.173 237.885 189.772 cv
237.18 191.712 236.659 193.209 236.269 194.391 cv
233.429 192.671 232.953 191.49 232.939 190.922 cv
232.938 190.863 232.94 190.819 232.944 190.788 cv
233.128 190.739 233.521 190.733 233.768 190.73 cv
234.558 190.72 235.881 190.702 236.327 189.44 cv
236.989 187.457 235.617 186.32 234.291 185.222 cv
233.632 184.671 li
232.46 183.696 231.441 182.702 231.839 181.264 cv
232.012 180.641 232.197 180.641 232.453 180.641 cv
232.826 180.641 233.333 180.775 233.823 180.905 cv
234.419 181.063 235.034 181.226 235.639 181.226 cv
236.703 181.226 237.299 180.71 237.6 180.291 cv
238.026 179.719 238.184 179.072 238.056 178.421 cv
237.763 176.923 236.046 175.886 234.531 174.97 cv
234.049 174.677 li
232.626 173.792 231.801 172.843 231.66 171.934 cv
231.552 171.234 231.85 170.468 232.597 169.59 cv
232.903 169.176 233.104 169.176 233.189 169.176 cv
233.781 169.176 234.775 169.977 235.501 170.562 cv
236.502 171.368 237.367 172.065 238.354 172.065 cv
238.758 172.065 239.141 171.94 239.431 171.728 cv
242.155 169.871 240.447 166.899 239.879 165.91 cv
239.108 164.607 238.999 163.313 239.571 162.266 cv
240.217 161.086 241.657 160.343 243.424 160.279 cv
243.622 160.276 li
245.202 160.276 246.455 160.935 247.06 162.082 cv
247.712 163.322 247.5 164.888 246.484 166.368 cv
245.895 167.206 244.102 169.756 245.994 172.37 cv
246.373 172.852 246.92 173.117 247.535 173.117 cv
248.455 173.117 249.369 172.533 250.337 171.916 cv
251.098 171.43 252.044 170.825 252.61 170.825 cv
252.718 170.825 252.97 170.825 253.247 171.464 cv
253.76 172.88 253.747 174.185 253.209 175.235 cv
cp
236.015 198.513 mo
236.032 198.491 236.051 198.467 236.071 198.439 cv
236.084 198.459 236.109 198.47 236.116 198.492 cv
236.015 198.513 li
cp
252.61 168.509 mo
251.367 168.509 250.157 169.281 249.09 169.963 cv
248.659 170.238 248.044 170.631 247.698 170.76 cv
247.351 170.179 247.211 169.362 248.387 167.689 cv
249.89 165.499 250.16 162.999 249.109 161.003 cv
248.105 159.098 246.055 157.96 243.622 157.96 cv
243.342 157.965 li
240.75 158.058 238.58 159.25 237.539 161.154 cv
236.573 162.921 236.699 165.084 237.878 167.077 cv
238.923 168.896 238.657 169.402 238.271 169.709 cv
237.952 169.562 237.361 169.086 236.954 168.758 cv
235.85 167.868 234.599 166.859 233.189 166.859 cv
232.527 166.859 231.563 167.094 230.786 168.147 cv
229.631 169.498 229.155 170.891 229.371 172.287 cv
229.621 173.907 230.783 175.373 232.828 176.646 cv
233.333 176.953 li
234.041 177.381 235.701 178.384 235.77 178.896 cv
235.77 178.896 235.733 178.909 235.639 178.909 cv
235.335 178.909 234.868 178.785 234.416 178.666 cv
233.813 178.506 233.128 178.325 232.453 178.325 cv
231.033 178.325 230.022 179.148 229.606 180.645 cv
228.776 183.646 231.056 185.541 232.151 186.452 cv
232.813 187.005 li
233.806 187.828 234.122 188.144 234.171 188.402 cv
234.031 188.41 233.865 188.412 233.737 188.414 cv
232.988 188.424 231.962 188.438 231.251 189.172 cv
230.819 189.618 230.608 190.223 230.623 190.974 cv
230.69 193.736 234.047 195.808 235.563 196.667 cv
235.067 198.449 235.203 198.66 235.304 198.804 cv
235.663 198.993 li
235.707 198.978 li
235.814 199.057 li
236.024 199.057 236.303 199.042 237.132 197.281 cv
237.863 197.455 239.051 197.697 240.301 197.697 cv
242.268 197.697 243.719 197.104 244.612 195.932 cv
246.219 193.822 244.468 192.35 243.809 191.795 cv
243.704 191.707 243.566 191.592 243.465 191.495 cv
243.652 191.195 244.042 191.082 245.277 190.868 cv
245.589 190.813 245.921 190.756 246.267 190.685 cv
246.442 190.649 li
247.769 190.39 250.876 189.779 251.715 186.022 cv
251.979 184.832 251.865 183.897 251.368 183.166 cv
250.632 182.082 249.345 181.874 248.311 181.707 cv
247.923 181.645 247.273 181.54 247.159 181.464 cv
247.101 180.789 248.379 180.389 250.056 179.935 cv
250.318 179.863 250.578 179.793 250.825 179.722 cv
252.856 179.143 254.436 177.924 255.271 176.29 cv
256.109 174.652 256.162 172.711 255.399 170.61 cv
254.65 168.874 253.47 168.509 252.61 168.509 cv
cp
f
238.972 120.443 mo
239.227 120.559 239.491 120.617 239.759 120.617 cv
241.108 120.617 241.845 119.265 242.558 117.958 cv
242.993 117.157 243.724 115.817 244.216 115.817 cv
244.29 115.817 244.507 115.851 244.893 116.163 cv
246.081 117.13 246.737 118.254 246.79 119.414 cv
246.844 120.583 246.282 121.807 245.192 122.873 cv
244.992 123.077 244.777 123.284 244.561 123.494 cv
243.105 124.903 240.906 127.033 242.613 129.159 cv
243.071 129.772 243.726 130.096 244.505 130.096 cv
245.178 130.096 245.828 129.859 246.457 129.63 cv
246.942 129.454 247.442 129.271 247.787 129.271 cv
247.926 129.271 248.214 129.271 248.496 130.223 cv
249.097 132.303 248.002 133.438 246.829 134.423 cv
246.691 134.54 li
246.454 134.74 246.226 134.923 246.011 135.096 cv
244.784 136.081 243.516 137.099 243.893 139.047 cv
244.135 140.354 245.409 140.598 246.17 140.743 cv
246.443 140.795 246.951 140.893 247.049 140.993 cv
247.05 140.994 247.093 141.089 247.055 141.377 cv
246.978 142.002 246.355 143.148 243.246 144.143 cv
243.081 142.853 242.813 141.16 242.389 138.899 cv
240.714 129.316 233.982 114.774 233.049 114.774 cv
232.946 114.774 232.845 114.816 232.771 114.889 cv
232.555 115.106 232.555 115.106 233.492 117.487 cv
235.141 121.674 239.001 131.481 240.359 139.302 cv
240.771 141.495 241.092 143.151 241.35 144.422 cv
238.039 144.309 237.017 143.483 236.71 142.986 cv
236.682 142.938 236.662 142.899 236.649 142.871 cv
236.787 142.741 237.115 142.551 237.322 142.432 cv
238.009 142.035 239.157 141.372 238.911 140.061 cv
238.526 138.037 236.817 137.708 235.165 137.391 cv
234.239 137.211 li
232.748 136.932 231.382 136.562 231.041 135.102 cv
230.884 134.443 230.842 134.266 232.621 133.811 cv
233.744 133.523 235.441 133.088 235.59 131.348 cv
235.622 130.664 235.406 130.047 234.965 129.566 cv
233.926 128.434 231.928 128.358 230.165 128.292 cv
229.745 128.275 li
228.105 128.177 226.929 127.737 226.342 127.003 cv
225.894 126.443 225.751 125.64 225.918 124.612 cv
226.01 124.036 226.154 123.765 227.079 123.765 cv
227.635 123.765 228.298 123.881 228.939 123.995 cv
229.609 124.113 230.241 124.225 230.824 124.225 cv
232.128 124.225 232.706 123.609 232.985 123.041 cv
233.496 121.864 233.865 119.613 230.59 117.759 cv
229.259 117.004 228.516 115.934 228.497 114.747 cv
228.477 113.418 229.366 112.074 230.875 111.154 cv
232.565 110.125 234.463 110.271 235.577 111.48 cv
236.343 112.311 236.7 113.546 236.584 114.96 cv
236.459 116.498 236.227 119.36 238.972 120.443 cv
cp
237.281 109.911 mo
235.436 107.907 232.3 107.576 229.67 109.175 cv
227.451 110.529 226.147 112.625 226.181 114.783 cv
226.213 116.794 227.402 118.613 229.447 119.774 cv
231.155 120.741 231.101 121.479 230.95 121.904 cv
230.916 121.906 230.875 121.908 230.824 121.908 cv
230.444 121.908 229.909 121.813 229.342 121.713 cv
228.637 121.589 227.838 121.448 227.079 121.448 cv
224.466 121.448 223.797 123.203 223.631 124.244 cv
223.354 125.941 223.658 127.356 224.533 128.45 cv
225.555 129.728 227.262 130.447 229.626 130.589 cv
230.078 130.606 li
231.055 130.644 232.872 130.712 233.259 131.132 cv
233.263 131.137 233.269 131.143 233.271 131.158 cv
233.066 131.305 232.436 131.467 232.047 131.566 cv
230.753 131.897 228.062 132.586 228.786 135.633 cv
229.497 138.681 232.522 139.247 233.814 139.488 cv
234.728 139.666 li
235.92 139.895 236.345 140.019 236.518 140.215 cv
236.404 140.287 236.27 140.365 236.164 140.426 cv
235.517 140.799 234.631 141.311 234.376 142.299 cv
234.22 142.902 234.338 143.535 234.732 144.191 cv
236.222 146.604 240.196 146.743 241.853 146.751 cv
242.264 148.47 242.426 148.478 242.692 148.478 cv
242.736 148.478 242.778 148.472 242.818 148.459 cv
242.925 148.453 243.144 148.37 243.224 148.273 cv
243.321 148.156 243.521 147.901 243.465 146.488 cv
247.095 145.419 249.088 143.801 249.353 141.672 cv
249.697 139.059 247.45 138.629 246.604 138.468 cv
246.467 138.441 246.284 138.407 246.146 138.371 cv
246.16 138.007 246.451 137.713 247.461 136.902 cv
247.69 136.718 247.934 136.522 248.188 136.307 cv
248.319 136.197 li
249.357 135.324 251.79 133.282 250.72 129.573 cv
250.078 127.409 248.771 126.955 247.787 126.955 cv
247.034 126.955 246.307 127.22 245.665 127.454 cv
245.244 127.607 244.77 127.775 244.444 127.741 cv
244.064 127.268 245.002 126.291 246.172 125.158 cv
246.403 124.935 246.63 124.714 246.827 124.514 cv
248.38 122.995 249.188 121.146 249.104 119.308 cv
249.021 117.469 248.069 115.761 246.352 114.365 cv
245.644 113.791 244.925 113.5 244.216 113.5 cv
242.349 113.5 241.336 115.357 240.523 116.849 cv
240.278 117.299 239.928 117.942 239.685 118.227 cv
239.007 117.888 238.722 117.249 238.893 115.148 cv
239.063 113.083 238.49 111.223 237.281 109.911 cv
cp
f
195.825 74.2891 mo
196.598 72.9287 197.838 72.1172 199.144 72.1172 cv
200.61 72.1172 201.92 73.1274 202.657 74.8462 cv
203.479 76.6338 204.636 78.4609 206.992 78.4609 cv
207.14 78.4609 207.292 78.4531 207.439 78.4385 cv
209.391 78.2612 209.374 76.0928 209.361 74.5093 cv
209.354 73.6074 209.345 72.2446 209.712 71.8745 cv
209.74 71.8462 209.824 71.7617 210.132 71.7617 cv
210.254 71.7617 210.387 71.7749 210.496 71.7935 cv
212.054 72.1157 213.198 72.8276 213.808 73.8516 cv
214.395 74.8384 214.482 76.0957 214.055 77.5127 cv
213.978 77.79 213.891 78.0776 213.803 78.3687 cv
213.213 80.3105 212.323 83.2446 214.835 84.2939 cv
215.146 84.4326 215.467 84.5029 215.788 84.5029 cv
216.977 84.5029 217.776 83.5752 218.42 82.8296 cv
218.821 82.3647 219.32 81.7856 219.642 81.7856 cv
219.739 81.7856 220.023 81.8384 220.517 82.3022 cv
222.038 83.8369 221.631 85.3735 221.084 86.8159 cv
221.017 86.9961 li
220.917 87.2646 220.817 87.5161 220.725 87.7529 cv
220.155 89.1973 219.566 90.6904 220.813 92.2524 cv
221.063 92.5576 221.52 92.9219 222.268 92.9219 cv
222.747 92.9219 223.194 92.772 223.626 92.6274 cv
223.923 92.5283 224.259 92.4155 224.501 92.4146 cv
224.502 92.415 224.586 92.4795 224.691 92.7485 cv
224.935 93.3594 224.955 94.7275 222.59 97.1948 cv
221.818 96.1431 220.766 94.7847 219.327 93.0171 cv
213.852 86.3374 204.39 79.6519 201.267 77.4458 cv
199.91 76.3638 199.827 76.3638 199.676 76.3638 cv
199.511 76.3652 li
199.27 76.6089 li
199.285 76.7876 li
199.305 77.0054 199.305 77.0054 200.707 77.9961 cv
200.803 78.0635 li
204.42 80.9512 212.604 88.0615 217.746 94.353 cv
219.13 96.0522 220.192 97.332 221.017 98.3018 cv
220.032 98.8027 218.582 99.4326 217.391 99.4326 cv
217.011 99.4326 216.697 99.3647 216.474 99.2383 cv
216.423 99.2085 216.386 99.1836 216.361 99.1641 cv
216.415 98.9819 216.615 98.6455 216.741 98.4341 cv
217.146 97.7539 217.823 96.6157 216.996 95.606 cv
216.434 94.8979 215.702 94.5391 214.82 94.5391 cv
214.067 94.5391 213.307 94.7969 212.427 95.0952 cv
211.47 95.4131 li
210.907 95.6016 210.137 95.8599 209.4 95.8599 cv
208.69 95.8599 208.149 95.623 207.668 95.0811 cv
207.46 94.8647 207.338 94.6636 207.341 94.543 cv
207.348 94.2285 207.976 93.6313 208.391 93.2358 cv
209.229 92.4365 210.499 91.2285 209.783 89.6519 cv
209.343 88.7388 208.522 88.2358 207.474 88.2358 cv
206.229 88.2358 204.826 88.9487 203.589 89.5776 cv
203.215 89.7671 li
202.2 90.2505 201.266 90.5059 200.511 90.5059 cv
199.755 90.5059 198.681 90.2949 198.078 88.4243 cv
197.901 87.9409 197.992 87.749 198.022 87.686 cv
198.274 87.1563 199.511 86.7295 200.414 86.4175 cv
201.818 85.9331 203.566 85.3301 203.475 83.6616 cv
203.368 82.0947 202.467 80.2236 198.809 80.209 cv
197.243 80.1606 196.057 79.5557 195.466 78.5059 cv
194.824 77.3643 194.955 75.8267 195.825 74.2891 cv
cp
193.811 73.147 mo
192.53 75.4082 192.397 77.7754 193.447 79.6416 cv
194.437 81.3999 196.364 82.4507 198.768 82.5249 cv
200.798 82.5332 201.085 83.1558 201.146 83.6226 cv
200.86 83.813 200.149 84.0586 199.658 84.228 cv
198.225 84.7227 196.6 85.2832 195.93 86.6914 cv
195.572 87.4434 195.563 88.2939 195.888 89.1772 cv
197.023 92.7056 200.143 93.7988 204.232 91.8477 cv
204.638 91.6426 li
205.594 91.1567 206.783 90.5522 207.474 90.5522 cv
207.598 90.5522 207.636 90.5605 207.664 90.5986 cv
207.563 90.8262 207.085 91.2798 206.793 91.5581 cv
206.019 92.2959 205.054 93.2139 205.025 94.4902 cv
205.008 95.2563 205.334 95.9946 205.966 96.6519 cv
206.863 97.6631 208.02 98.1763 209.4 98.1763 cv
210.515 98.1763 211.532 97.835 212.206 97.6094 cv
213.17 97.2891 li
213.961 97.0215 214.632 96.7666 214.968 96.8726 cv
214.901 96.9961 214.816 97.1387 214.75 97.2495 cv
214.367 97.8936 213.843 98.7749 214.099 99.7642 cv
214.254 100.366 214.66 100.862 215.32 101.247 cv
215.909 101.58 216.606 101.749 217.391 101.749 cv
219.213 101.749 221.152 100.867 222.587 100.093 cv
223.679 101.282 223.867 101.298 224.031 101.298 cv
224.136 101.316 224.252 101.267 224.344 101.183 cv
224.459 101.166 li
224.563 100.946 li
224.644 100.777 224.766 100.502 223.921 99.1362 cv
226.67 96.3882 227.662 93.9507 226.847 91.8994 cv
226.234 90.333 225.089 90.0991 224.461 90.0991 cv
223.882 90.0991 223.355 90.2754 222.891 90.4307 cv
222.764 90.4731 222.597 90.5293 222.463 90.5659 cv
222.291 90.2183 222.399 89.8203 222.879 88.6025 cv
222.979 88.3516 223.083 88.0854 223.188 87.8022 cv
223.25 87.6372 li
223.731 86.3672 224.859 83.3931 222.133 80.644 cv
221.294 79.8535 220.479 79.4692 219.642 79.4692 cv
218.259 79.4692 217.376 80.4937 216.666 81.3169 cv
216.4 81.624 215.958 82.1372 215.753 82.167 cv
215.193 81.9331 215.542 80.6128 216.019 79.041 cv
216.113 78.7314 216.205 78.4263 216.279 78.1572 cv
216.893 76.126 216.727 74.2275 215.798 72.667 cv
214.848 71.0693 213.177 69.9829 210.93 69.5181 cv
209.476 69.2661 208.515 69.7925 208.068 70.2427 cv
207.021 71.2979 207.034 73.0132 207.046 74.5269 cv
207.05 75.0405 207.055 75.7739 206.981 76.1445 cv
206.252 76.1406 205.625 75.7563 204.774 73.9063 cv
203.671 71.3354 201.566 69.8008 199.144 69.8008 cv
196.993 69.8008 195 71.0513 193.811 73.147 cv
cp
f
86.3203 185.355 mo
91.5225 171.691 li
88.5791 171.691 li
85.8462 178.786 li
85.4541 179.837 85.0581 181.07 84.7173 182.306 cv
84.6904 182.306 li
84.3491 181.044 83.981 179.837 83.5615 178.731 cv
80.9067 171.691 li
77.7793 171.691 li
83.0088 185.355 li
86.3203 185.355 li
cp
f
103.188 183.094 mo
97.9829 183.094 li
97.9829 179.417 li
102.95 179.417 li
102.95 177.261 li
97.9829 177.261 li
97.9829 173.925 li
103.188 173.925 li
103.188 171.691 li
95.1455 171.691 li
95.1455 185.355 li
103.188 185.355 li
103.188 183.094 li
cp
f
113.357 185.355 mo
113.357 174.109 li
117.143 174.109 li
117.143 171.691 li
106.736 171.691 li
106.736 174.109 li
110.519 174.109 li
110.519 185.355 li
113.357 185.355 li
cp
f
129.255 173.925 mo
129.255 171.691 li
121.215 171.691 li
121.215 185.355 li
129.255 185.355 li
129.255 183.094 li
124.053 183.094 li
124.053 179.417 li
129.02 179.417 li
129.02 177.261 li
124.053 177.261 li
124.053 173.925 li
129.255 173.925 li
cp
f
142.999 178.971 mo
138.397 171.691 li
134.614 171.691 li
134.614 185.355 li
137.374 185.355 li
137.347 178.206 li
137.347 176.947 137.322 176.104 137.268 175.344 cv
137.295 175.344 li
137.664 176.156 138.161 177.127 138.688 177.943 cv
143.391 185.355 li
147.173 185.355 li
147.173 171.691 li
144.415 171.691 li
144.442 177.707 li
144.442 179.468 144.469 180.781 144.52 181.648 cv
144.497 181.648 li
144.05 180.703 143.523 179.81 142.999 178.971 cv
cp
f
155.611 183.251 mo
154.456 183.251 153.378 183.043 152.59 182.726 cv
152.484 185.274 li
153.245 185.458 154.351 185.618 155.295 185.618 cv
158.791 185.618 161.206 183.803 161.206 181.02 cv
161.206 176.736 155.111 177.759 155.111 175.423 cv
155.111 174.396 155.874 173.714 157.606 173.714 cv
158.396 173.714 159.474 173.871 160.21 174.109 cv
160.315 171.691 li
159.552 171.559 158.502 171.455 157.714 171.455 cv
154.114 171.455 152.115 173.161 152.115 175.736 cv
152.115 180.178 158.132 178.916 158.132 181.335 cv
158.132 182.675 156.897 183.251 155.611 183.251 cv
cp
f
166.176 171.691 mo
166.176 185.355 li
169.015 185.355 li
169.015 178.942 li
174.083 185.355 li
177.843 185.355 li
171.957 178.261 li
177.552 171.691 li
174.059 171.691 li
169.015 177.786 li
169.015 171.691 li
166.176 171.691 li
cp
f
186.077 176.787 mo
186.34 176.077 186.602 175.316 186.763 174.659 cv
186.785 174.659 li
186.971 175.289 187.233 176.104 187.496 176.814 cv
188.915 180.651 li
184.606 180.651 li
186.077 176.787 li
cp
183.925 182.701 mo
189.624 182.701 li
190.597 185.355 li
193.752 185.355 li
188.601 171.691 li
185.265 171.691 li
180.087 185.355 li
182.925 185.355 li
183.925 182.701 li
cp
f
201.896 178.653 mo
201.529 178.653 201.004 178.629 200.688 178.548 cv
200.688 173.925 li
201.059 173.897 201.556 173.897 202.081 173.897 cv
203.842 173.897 204.735 174.869 204.735 176.211 cv
204.735 177.814 203.658 178.653 201.896 178.653 cv
cp
202.316 171.612 mo
200.713 171.612 199.007 171.663 197.851 171.691 cv
197.851 185.355 li
200.688 185.355 li
200.688 180.86 li
201.03 180.887 201.556 180.914 201.896 180.914 cv
205.366 180.914 207.757 179.021 207.757 176.025 cv
207.757 173.267 205.786 171.612 202.316 171.612 cv
cp
f
86.6226 196.723 mo
88.9619 196.723 90.4839 198.326 90.4839 201.372 cv
90.4839 204.422 88.6963 205.892 86.5166 205.892 cv
83.8354 205.892 82.7339 203.842 82.7339 201.243 cv
82.7339 198.298 84.5449 196.723 86.6226 196.723 cv
cp
86.3599 208.39 mo
90.2759 208.39 93.5332 205.708 93.5332 201.188 cv
93.5332 196.563 90.7734 194.253 86.8066 194.253 cv
83.0234 194.253 79.7119 196.958 79.7119 201.451 cv
79.7119 205.55 81.9185 208.39 86.3599 208.39 cv
cp
f
103.544 208.333 mo
104.885 208.333 106.093 208.125 107.225 207.73 cv
106.986 205.21 li
106.171 205.603 105.148 205.841 104.124 205.841 cv
101.416 205.841 99.8403 204.289 99.8403 201.346 cv
99.8403 198.64 101.286 196.695 103.964 196.695 cv
104.913 196.695 105.884 196.853 106.856 197.17 cv
107.119 194.674 li
106.199 194.411 105.069 194.305 104.175 194.305 cv
99.0518 194.305 96.8184 197.746 96.8184 201.608 cv
96.8184 205.762 99.0791 208.333 103.544 208.333 cv
cp
f
123.806 208.153 mo
123.806 194.488 li
120.968 194.488 li
120.968 199.927 li
114.528 199.927 li
114.528 194.488 li
111.69 194.488 li
111.69 208.153 li
114.528 208.153 li
114.528 202.371 li
120.968 202.371 li
120.968 208.153 li
123.806 208.153 li
cp
f
138.794 201.74 mo
143.864 208.153 li
147.623 208.153 li
141.735 201.059 li
147.333 194.488 li
143.84 194.488 li
138.794 200.584 li
138.794 194.488 li
135.956 194.488 li
135.956 208.153 li
138.794 208.153 li
138.794 201.74 li
cp
f
156.428 196.723 mo
158.765 196.723 160.289 198.326 160.289 201.372 cv
160.289 204.422 158.5 205.892 156.32 205.892 cv
153.641 205.892 152.539 203.842 152.539 201.243 cv
152.539 198.298 154.351 196.723 156.428 196.723 cv
cp
156.165 208.39 mo
160.08 208.39 163.338 205.708 163.338 201.188 cv
163.338 196.563 160.578 194.253 156.611 194.253 cv
152.825 194.253 149.516 196.958 149.516 201.451 cv
149.516 205.55 151.723 208.39 156.165 208.39 cv
cp
f
171.603 200.741 mo
176.306 208.153 li
180.088 208.153 li
180.088 194.488 li
177.332 194.488 li
177.357 200.505 li
177.357 202.266 177.384 203.579 177.436 204.446 cv
177.411 204.446 li
176.965 203.501 176.439 202.607 175.914 201.768 cv
171.315 194.488 li
167.528 194.488 li
167.528 208.153 li
170.289 208.153 li
170.263 201.004 li
170.263 199.745 170.238 198.902 170.184 198.142 cv
170.211 198.142 li
170.578 198.953 171.077 199.927 171.603 200.741 cv
cp
f
188.396 206.049 mo
187.241 206.049 186.163 205.841 185.375 205.523 cv
185.27 208.072 li
186.03 208.256 187.136 208.416 188.081 208.416 cv
191.576 208.416 193.992 206.601 193.992 203.817 cv
193.992 199.533 187.897 200.558 187.897 198.221 cv
187.897 197.194 188.659 196.512 190.394 196.512 cv
191.182 196.512 192.26 196.669 192.995 196.907 cv
193.102 194.488 li
192.338 194.356 191.287 194.253 190.498 194.253 cv
186.9 194.253 184.901 195.959 184.901 198.534 cv
184.901 202.976 190.919 201.714 190.919 204.131 cv
190.919 205.473 189.685 206.049 188.396 206.049 cv
cp
f
203.367 208.153 mo
203.367 196.907 li
207.15 196.907 li
207.15 194.488 li
196.747 194.488 li
196.747 196.907 li
200.529 196.907 li
200.529 208.153 li
203.367 208.153 li
cp
f
97.4473 155.771 mo
97.1069 155.729 li
89.9346 154.839 89.8921 153.419 89.7202 147.456 cv
89.7202 137.096 li
101.709 150.137 li
106.279 155.146 108.798 157.907 115.451 157.907 cv
116.688 157.907 118.057 157.813 119.638 157.62 cv
119.972 157.581 li
120 155.979 li
119.623 155.964 li
115.625 155.79 113.445 153.524 109.102 149.019 cv
108.502 148.394 107.866 147.733 107.19 147.043 cv
95.5088 134.043 li
100.21 129.235 li
101.215 128.183 li
105.166 124.03 109.645 119.325 115.617 118.694 cv
115.964 118.658 li
115.964 117.056 li
100.144 117.056 li
100.144 118.658 li
100.491 118.694 li
102.057 118.86 102.898 119.225 103.139 119.846 cv
103.585 121.001 102.195 123.37 98.8955 127.076 cv
89.7202 136.87 li
89.7202 127.019 li
89.895 121.035 89.9346 119.611 95.5503 118.73 cv
95.8794 118.679 li
95.8794 117.093 li
76.6333 117.093 li
76.6333 118.688 li
76.9678 118.733 li
83.6216 119.62 83.6611 121.04 83.8359 127.006 cv
83.8359 147.443 li
83.6611 153.422 83.6216 154.843 76.9678 155.729 cv
76.6333 155.774 li
76.6333 157.369 li
97.4473 157.369 li
97.4473 155.771 li
cp
f
149.967 155.769 mo
149.627 155.729 li
142.12 154.833 141.836 153.13 141.836 146.063 cv
141.836 119.608 li
144.937 119.608 li
151.798 119.608 154.6 121.734 156.47 128.367 cv
156.569 128.713 li
158.063 128.391 li
157.323 117.032 li
120.443 117.032 li
119.722 128.391 li
121.215 128.713 li
121.314 128.367 li
123.185 121.734 125.987 119.608 132.852 119.608 cv
135.952 119.608 li
135.952 146.063 li
135.952 153.13 135.665 154.833 128.158 155.729 cv
127.82 155.769 li
127.82 157.369 li
149.967 157.369 li
149.967 155.769 li
cp
f
209.175 118.733 mo
209.509 118.688 li
209.509 117.093 li
188.694 117.093 li
188.694 118.685 li
189.023 118.733 li
196.422 119.807 196.422 120.766 196.422 127.006 cv
196.422 135.044 li
175.42 135.044 li
175.42 127.006 li
175.42 120.766 175.42 119.807 182.815 118.733 cv
183.147 118.685 li
183.147 117.093 li
162.334 117.093 li
162.334 118.688 li
162.669 118.733 li
169.322 119.62 169.361 121.04 169.536 127.006 cv
169.536 147.443 li
169.361 153.422 169.322 154.843 162.669 155.729 cv
162.334 155.774 li
162.334 157.369 li
183.147 157.369 li
183.147 155.778 li
182.815 155.729 li
175.42 154.655 175.42 153.696 175.42 147.456 cv
175.42 138.257 li
196.422 138.257 li
196.422 147.456 li
196.422 153.696 196.422 154.655 189.023 155.729 cv
188.694 155.778 li
188.694 157.369 li
209.509 157.369 li
209.509 155.774 li
209.175 155.729 li
202.521 154.843 202.482 153.422 202.308 147.456 cv
202.308 127.019 li
202.482 121.04 202.521 119.62 209.175 118.733 cv
cp
f
93.9746 54.1367 mo
95.6338 54.1367 96.9849 55.4878 96.9849 57.146 cv
96.9849 57.6875 96.8296 58.187 96.5781 58.626 cv
96.4644 58.6167 96.3501 58.6084 96.2339 58.6084 cv
94.917 58.6084 93.7437 59.2041 92.9546 60.1362 cv
92.022 59.5586 90.9678 58.2363 90.9678 57.146 cv
90.9678 55.4878 92.3159 54.1367 93.9746 54.1367 cv
cp
94.1406 48.8735 mo
94.1406 47.6216 95.1572 46.605 96.4058 46.605 cv
97.6602 46.605 98.6797 47.6216 98.6797 48.8735 cv
98.6797 50.125 97.6602 51.1411 96.4058 51.1411 cv
95.1572 51.1411 94.1406 50.125 94.1406 48.8735 cv
cp
100.842 41.3691 mo
101.723 41.3691 102.438 42.084 102.438 42.9678 cv
102.438 43.8486 101.723 44.563 100.842 44.563 cv
99.959 44.563 99.2407 43.8486 99.2407 42.9678 cv
99.2407 42.084 99.959 41.3691 100.842 41.3691 cv
cp
115.483 38.5674 mo
115.549 38.6846 115.615 38.8057 115.691 38.9175 cv
113.616 39.1104 111.981 40.8418 111.981 42.9678 cv
111.981 44.4814 112.813 45.791 114.038 46.4966 cv
112.563 47.3413 111.565 48.9277 111.565 50.7466 cv
111.565 53.0024 113.103 54.9028 115.185 55.4663 cv
115.109 55.9463 115.109 56.4438 115.208 56.9473 cv
115.208 56.9473 115.29 57.1733 115.362 57.3701 cv
115.103 57.373 114.831 57.3218 114.583 57.373 cv
112.294 57.8223 110.793 60.0479 111.245 62.3379 cv
111.691 64.6206 113.92 66.123 116.21 65.6729 cv
117.95 65.3325 119.22 63.9575 119.534 62.3135 cv
119.63 62.6299 119.838 63.4868 119.88 63.707 cv
120.345 66.062 118.801 68.3579 116.445 68.8193 cv
114.246 69.2505 112.078 68.5869 110.518 67.1997 cv
109.942 69.2021 108.471 70.9238 106.38 71.7388 cv
104.282 72.5576 101.931 71.6299 100.926 69.6646 cv
101.189 69.4404 101.423 69.1841 101.628 68.9048 cv
105.116 70.1694 106.895 67.543 107.206 66.8198 cv
108.5 63.8057 106.523 60.6841 103.332 60.6563 cv
102.306 60.647 101.366 61.0161 100.627 61.6143 cv
100.545 61.6719 100.464 61.731 100.38 61.7842 cv
100.353 61.6821 100.115 60.1362 98.1064 59.0425 cv
98.2773 58.5366 98.4951 57.958 98.543 57.0972 cv
98.6812 54.6279 98.3901 53.7217 100.083 49.8413 cv
102.164 45.604 106.711 41.3633 115.483 38.5674 cv
cp
106.259 37.8105 mo
106.983 37.8105 107.571 38.4014 107.571 39.1255 cv
107.571 39.8521 106.983 40.4434 106.259 40.4434 cv
105.529 40.4434 104.938 39.8521 104.938 39.1255 cv
104.938 38.4014 105.529 37.8105 106.259 37.8105 cv
cp
112.065 35.4185 mo
112.642 35.4185 113.112 35.8892 113.112 36.4678 cv
113.112 37.0474 112.642 37.5181 112.065 37.5181 cv
111.487 37.5181 111.016 37.0474 111.016 36.4678 cv
111.016 35.8892 111.487 35.4185 112.065 35.4185 cv
cp
116.071 40.4224 mo
117.473 40.4224 118.616 41.5649 118.616 42.9678 cv
118.616 44.3735 117.473 45.5161 116.071 45.5161 cv
114.665 45.5161 113.525 44.3735 113.525 42.9678 cv
113.525 41.5649 114.665 40.4224 116.071 40.4224 cv
cp
118.665 34.791 mo
119.805 34.791 120.731 35.7202 120.731 36.8633 cv
120.731 38.0059 119.805 38.9351 118.665 38.9351 cv
117.519 38.9351 116.589 38.0059 116.589 36.8633 cv
116.589 35.7202 117.519 34.791 118.665 34.791 cv
cp
115.724 54.0098 mo
114.231 53.6719 113.109 52.3389 113.109 50.7466 cv
113.109 48.8975 114.614 47.3955 116.463 47.3955 cv
118.312 47.3955 119.817 48.8975 119.817 50.7466 cv
119.817 51.1563 119.732 51.5488 119.597 51.9136 cv
119.256 51.895 118.909 51.9136 118.559 51.9834 cv
117.319 52.2241 116.315 52.9932 115.724 54.0098 cv
cp
122.803 59.3174 mo
122.803 60.8511 121.561 62.0957 120.025 62.0957 cv
118.491 62.0957 117.247 60.8511 117.247 59.3174 cv
117.247 57.7842 118.491 56.5396 120.025 56.5396 cv
121.561 56.5396 122.803 57.7842 122.803 59.3174 cv
cp
139.247 30.9092 mo
139.329 30.957 139.413 31.0088 139.497 31.0537 cv
136.942 37.4448 136.674 51.7505 136.674 51.7505 cv
138.185 52.7251 li
138.074 53.1079 138.011 53.5117 138.011 53.9312 cv
138.011 53.9312 138.046 54.1694 138.08 54.3779 cv
137.826 54.3325 137.567 54.23 137.314 54.23 cv
134.982 54.23 133.083 56.1274 133.083 58.4614 cv
133.083 60.7905 134.982 62.6875 137.314 62.6875 cv
139.087 62.6875 140.598 61.583 141.226 60.0298 cv
141.256 60.3589 141.295 61.2397 141.295 61.4658 cv
141.295 63.8667 139.34 65.8237 136.939 65.8237 cv
134.699 65.8237 132.84 64.7231 131.577 63.0674 cv
130.651 64.9404 129.043 66.3521 126.842 66.7803 cv
124.482 67.2446 122.188 65.7002 121.726 63.3452 cv
121.684 63.1211 121.558 62.2529 121.524 61.9214 cv
122.438 63.3267 124.13 64.1201 125.871 63.7793 cv
128.163 63.3301 129.656 61.1035 129.209 58.8174 cv
128.763 56.5283 126.534 55.0293 124.248 55.4785 cv
123.998 55.5273 123.774 55.666 123.539 55.7617 cv
123.536 55.5537 123.524 55.3218 123.524 55.3218 cv
123.322 54.2808 122.749 53.4097 121.977 52.8037 cv
122.598 51.7261 li
120.134 46.6206 118.336 32.0918 139.247 30.9092 cv
cp
123.162 31.4219 mo
123.991 31.4219 124.667 32.0977 124.667 32.9302 cv
124.667 33.7593 123.991 34.4326 123.162 34.4326 cv
122.329 34.4326 121.651 33.7593 121.651 32.9302 cv
121.651 32.0977 122.329 31.4219 123.162 31.4219 cv
cp
128.048 29.0298 mo
128.715 29.0298 129.258 29.5728 129.258 30.2451 cv
129.258 30.9155 128.715 31.4614 128.048 31.4614 cv
127.375 31.4614 126.826 30.9155 126.826 30.2451 cv
126.826 29.5728 127.375 29.0298 128.048 29.0298 cv
cp
133.598 27.7241 mo
134.129 27.7241 134.563 28.1582 134.563 28.6924 cv
134.563 29.2295 134.129 29.6665 133.598 29.6665 cv
133.061 29.6665 132.624 29.2295 132.624 28.6924 cv
132.624 28.1582 133.061 27.7241 133.598 27.7241 cv
cp
137.906 25.4136 mo
141.133 25.4136 li
140.421 25.8149 139.933 26.5688 139.933 27.4468 cv
139.933 27.6367 139.96 27.8208 140.002 27.9956 cv
139.468 28.002 138.968 28.0103 138.588 28.0225 cv
138.15 27.3501 137.891 26.5508 137.891 25.6885 cv
137.891 25.5942 137.9 25.5044 137.906 25.4136 cv
cp
141.21 21.4849 mo
141.21 23.7871 li
138.35 23.7871 li
138.907 22.6777 139.974 21.7832 141.21 21.4849 cv
cp
142.27 29.3315 mo
143.071 29.3315 143.725 29.9819 143.725 30.7842 cv
143.725 31.5859 143.071 32.2363 142.27 32.2363 cv
141.467 32.2363 140.817 31.5859 140.817 30.7842 cv
140.817 29.9819 141.467 29.3315 142.27 29.3315 cv
cp
142.268 26.4741 mo
142.803 26.4741 143.236 26.9067 143.236 27.4399 cv
143.236 27.9741 142.803 28.4067 142.268 28.4067 cv
141.734 28.4067 141.302 27.9741 141.302 27.4399 cv
141.302 26.9067 141.734 26.4741 142.268 26.4741 cv
cp
143.33 21.4849 mo
144.573 21.7832 145.644 22.6777 146.202 23.7871 cv
143.33 23.7871 li
143.33 21.4849 li
cp
146.646 25.4136 mo
146.651 25.5044 146.661 25.5942 146.661 25.6885 cv
146.661 26.5508 146.401 27.3501 145.963 28.0225 cv
145.583 28.0103 145.081 28.002 144.544 27.9956 cv
144.586 27.8208 144.614 27.6367 144.614 27.4468 cv
144.614 26.5688 144.124 25.8149 143.408 25.4136 cv
146.646 25.4136 li
cp
161.954 51.7261 mo
162.575 52.8037 li
161.803 53.4097 161.229 54.2808 161.027 55.3218 cv
161.027 55.3218 161.017 55.5537 161.013 55.7617 cv
160.776 55.666 160.554 55.5273 160.304 55.4785 cv
158.018 55.0293 155.788 56.5283 155.343 58.8174 cv
154.896 61.1035 156.389 63.3301 158.681 63.7793 cv
160.422 64.1201 162.113 63.3267 163.027 61.9214 cv
162.993 62.2529 162.867 63.1211 162.824 63.3452 cv
162.363 65.7002 160.069 67.2446 157.709 66.7803 cv
155.508 66.3521 153.9 64.9404 152.974 63.0674 cv
151.711 64.7231 149.853 65.8237 147.611 65.8237 cv
145.209 65.8237 143.246 63.8667 143.246 61.4658 cv
143.246 61.2397 143.285 60.3589 143.314 60.0298 cv
143.946 61.583 145.464 62.6875 147.238 62.6875 cv
149.569 62.6875 151.469 60.7905 151.469 58.4614 cv
151.469 56.1274 149.569 54.23 147.238 54.23 cv
146.984 54.23 146.725 54.3325 146.471 54.3779 cv
146.504 54.1694 146.541 53.9312 146.541 53.9312 cv
146.541 53.5117 146.477 53.1079 146.366 52.7251 cv
147.877 51.7505 li
147.877 51.7505 147.608 37.4448 145.052 31.0537 cv
145.137 31.0088 145.221 30.957 145.303 30.9092 cv
166.215 32.0918 164.418 46.6206 161.954 51.7261 cv
cp
150.953 27.7241 mo
151.49 27.7241 151.929 28.1582 151.929 28.6924 cv
151.929 29.2295 151.49 29.6665 150.953 29.6665 cv
150.423 29.6665 149.987 29.2295 149.987 28.6924 cv
149.987 28.1582 150.423 27.7241 150.953 27.7241 cv
cp
156.503 29.0298 mo
157.176 29.0298 157.725 29.5728 157.725 30.2451 cv
157.725 30.9155 157.176 31.4614 156.503 31.4614 cv
155.838 31.4614 155.294 30.9155 155.294 30.2451 cv
155.294 29.5728 155.838 29.0298 156.503 29.0298 cv
cp
161.39 31.4219 mo
162.223 31.4219 162.901 32.0977 162.901 32.9302 cv
162.901 33.7593 162.223 34.4326 161.39 34.4326 cv
160.561 34.4326 159.884 33.7593 159.884 32.9302 cv
159.884 32.0977 160.561 31.4219 161.39 31.4219 cv
cp
164.525 56.5396 mo
166.06 56.5396 167.304 57.7842 167.304 59.3174 cv
167.304 60.8511 166.06 62.0957 164.525 62.0957 cv
162.991 62.0957 161.748 60.8511 161.748 59.3174 cv
161.748 57.7842 162.991 56.5396 164.525 56.5396 cv
cp
165.886 34.791 mo
167.032 34.791 167.962 35.7202 167.962 36.8633 cv
167.962 38.0059 167.032 38.9351 165.886 38.9351 cv
164.745 38.9351 163.82 38.0059 163.82 36.8633 cv
163.82 35.7202 164.745 34.791 165.886 34.791 cv
cp
171.025 42.9678 mo
171.025 44.3735 169.886 45.5161 168.48 45.5161 cv
167.078 45.5161 165.935 44.3735 165.935 42.9678 cv
165.935 41.5649 167.078 40.4224 168.48 40.4224 cv
169.886 40.4224 171.025 41.5649 171.025 42.9678 cv
cp
165.992 51.9834 mo
165.642 51.9136 165.295 51.895 164.953 51.9136 cv
164.818 51.5488 164.734 51.1563 164.734 50.7466 cv
164.734 48.8975 166.238 47.3955 168.088 47.3955 cv
169.938 47.3955 171.441 48.8975 171.441 50.7466 cv
171.441 52.3389 170.32 53.6719 168.827 54.0098 cv
168.236 52.9932 167.232 52.2241 165.992 51.9834 cv
cp
169.068 38.5674 mo
177.84 41.3633 182.388 45.604 184.47 49.8413 cv
186.161 53.7217 185.87 54.6279 186.009 57.0972 cv
186.056 57.958 186.273 58.5366 186.444 59.0425 cv
184.437 60.1362 184.198 61.6821 184.17 61.7842 cv
184.086 61.731 184.006 61.6719 183.924 61.6143 cv
183.186 61.0161 182.245 60.647 181.221 60.6563 cv
178.028 60.6841 176.052 63.8057 177.345 66.8198 cv
177.656 67.543 179.436 70.1694 182.924 68.9048 cv
183.128 69.1841 183.361 69.4404 183.625 69.6646 cv
182.621 71.6299 180.27 72.5576 178.171 71.7388 cv
176.08 70.9238 174.609 69.2021 174.033 67.1997 cv
172.474 68.5869 170.305 69.2505 168.106 68.8193 cv
165.751 68.3579 164.207 66.062 164.671 63.707 cv
164.713 63.4868 164.922 62.6299 165.017 62.3135 cv
165.332 63.9575 166.601 65.3325 168.341 65.6729 cv
170.631 66.123 172.859 64.6206 173.306 62.3379 cv
173.758 60.0479 172.257 57.8223 169.967 57.373 cv
169.72 57.3218 169.449 57.373 169.188 57.3701 cv
169.262 57.1733 169.343 56.9473 169.343 56.9473 cv
169.442 56.4438 169.442 55.9463 169.366 55.4663 cv
171.448 54.9028 172.986 53.0024 172.986 50.7466 cv
172.986 48.9277 171.987 47.3413 170.513 46.4966 cv
171.738 45.791 172.57 44.4814 172.57 42.9678 cv
172.57 40.8418 170.936 39.1104 168.86 38.9175 cv
168.936 38.8057 169.003 38.6846 169.068 38.5674 cv
cp
172.485 35.4185 mo
173.065 35.4185 173.535 35.8892 173.535 36.4678 cv
173.535 37.0474 173.065 37.5181 172.485 37.5181 cv
171.91 37.5181 171.439 37.0474 171.439 36.4678 cv
171.439 35.8892 171.91 35.4185 172.485 35.4185 cv
cp
178.292 37.8105 mo
179.021 37.8105 179.613 38.4014 179.613 39.1255 cv
179.613 39.8521 179.021 40.4434 178.292 40.4434 cv
177.568 40.4434 176.98 39.8521 176.98 39.1255 cv
176.98 38.4014 177.568 37.8105 178.292 37.8105 cv
cp
183.708 41.3691 mo
184.592 41.3691 185.31 42.084 185.31 42.9678 cv
185.31 43.8486 184.592 44.563 183.708 44.563 cv
182.828 44.563 182.113 43.8486 182.113 42.9678 cv
182.113 42.084 182.828 41.3691 183.708 41.3691 cv
cp
188.146 46.605 mo
189.396 46.605 190.41 47.6216 190.41 48.8735 cv
190.41 50.125 189.396 51.1411 188.146 51.1411 cv
186.891 51.1411 185.871 50.125 185.871 48.8735 cv
185.871 47.6216 186.891 46.605 188.146 46.605 cv
cp
190.577 54.1367 mo
192.235 54.1367 193.584 55.4878 193.584 57.146 cv
193.584 58.2363 192.529 59.5586 191.596 60.1362 cv
190.808 59.2041 189.635 58.6084 188.317 58.6084 cv
188.201 58.6084 188.087 58.6167 187.974 58.626 cv
187.722 58.187 187.566 57.6875 187.566 57.146 cv
187.566 55.4878 188.917 54.1367 190.577 54.1367 cv
cp
186.5 69.1006 mo
184.954 69.1006 183.703 67.8481 183.703 66.3027 cv
183.703 65.5479 184.002 64.8618 184.488 64.3584 cv
184.994 63.8237 185.712 63.4893 186.507 63.4893 cv
187.709 63.4893 188.732 64.2515 189.119 65.3184 cv
189.234 65.625 189.298 65.9561 189.298 66.3027 cv
189.298 67.8481 188.045 69.1006 186.5 69.1006 cv
cp
142.262 44.8706 mo
144.155 44.8706 145.692 46.4014 145.692 48.2905 cv
145.692 49.1553 145.371 49.9448 144.839 50.5469 cv
144.124 50.0054 143.231 49.6841 142.268 49.6841 cv
141.301 49.6836 140.41 50.0073 139.696 50.5518 cv
139.165 49.9492 138.842 49.1572 138.842 48.2905 cv
138.842 46.4014 140.373 44.8706 142.262 44.8706 cv
cp
140.117 35.21 mo
140.117 34.021 141.081 33.0566 142.27 33.0566 cv
143.462 33.0566 144.431 34.021 144.431 35.21 cv
144.431 36.3994 143.462 37.3633 142.27 37.3633 cv
141.081 37.3633 140.117 36.3994 140.117 35.21 cv
cp
142.27 38.2725 mo
143.799 38.2725 145.041 39.5088 145.041 41.0332 cv
145.041 42.5571 143.799 43.7939 142.27 43.7939 cv
140.745 43.7939 139.51 42.5571 139.51 41.0332 cv
139.51 39.5088 140.745 38.2725 142.27 38.2725 cv
cp
142.266 59.9414 mo
140.731 59.9414 139.488 58.6978 139.488 57.1631 cv
139.488 55.6299 140.731 54.3853 142.266 54.3853 cv
143.805 54.3853 145.054 55.6299 145.054 57.1631 cv
145.054 58.6978 143.805 59.9414 142.266 59.9414 cv
cp
98.0439 69.1016 mo
96.4985 69.1016 95.2461 67.8481 95.2461 66.3027 cv
95.2461 65.7192 95.4248 65.1763 95.731 64.7275 cv
96.229 63.981 97.0791 63.4893 98.0439 63.4893 cv
99.0078 63.4893 99.8574 63.9805 100.355 64.7256 cv
100.662 65.1753 100.842 65.7178 100.842 66.3027 cv
100.842 67.8481 99.5894 69.1016 98.0439 69.1016 cv
cp
94.106 64.3584 mo
93.9653 64.645 93.02 66.6362 94.4116 68.7676 cv
95.9268 71.0884 98.5024 70.689 98.5884 70.6782 cv
100.366 72.9263 103.335 75.6074 105.762 74.9146 cv
105.762 74.9146 121.054 67.8271 142.261 67.7969 cv
142.278 67.7969 li
163.497 67.8271 178.79 74.9146 178.79 74.9146 cv
181.216 75.6074 184.186 72.9263 185.963 70.6782 cv
186.049 70.689 188.624 71.0884 190.14 68.7676 cv
191.531 66.6362 190.586 64.645 190.445 64.3584 cv
191.714 62.3032 193.665 60.4795 193.665 60.4795 cv
194.564 59.647 195.128 58.4644 195.128 57.146 cv
195.128 54.6372 193.086 52.5923 190.577 52.5923 cv
190.374 52.5923 190.178 52.6104 189.984 52.6343 cv
189.952 52.5078 189.909 52.3779 189.874 52.2515 cv
191.104 51.6182 191.955 50.3477 191.955 48.8735 cv
191.955 46.771 190.245 45.061 188.146 45.061 cv
187.439 45.061 186.788 45.2656 186.222 45.5977 cv
186.113 45.4712 186.008 45.3442 185.892 45.2178 cv
186.484 44.6475 186.854 43.8516 186.854 42.9678 cv
186.854 41.2339 185.443 39.8252 183.708 39.8252 cv
182.645 39.8252 181.707 40.3589 181.139 41.1729 cv
180.958 41.0527 180.777 40.9346 180.593 40.8174 cv
180.943 40.3408 181.157 39.7583 181.157 39.1255 cv
181.157 37.5479 179.872 36.2656 178.292 36.2656 cv
177.055 36.2656 176.009 37.062 175.613 38.166 cv
175.318 38.0366 175.013 37.9092 174.709 37.7827 cv
174.941 37.397 175.08 36.9507 175.08 36.4678 cv
175.08 35.0386 173.915 33.8735 172.485 33.8735 cv
171.195 33.8735 170.127 34.8271 169.934 36.0698 cv
169.738 36.0093 169.555 35.9463 169.355 35.8862 cv
168.924 34.3687 167.542 33.2471 165.886 33.2471 cv
165.519 33.2471 165.165 33.3101 164.834 33.416 cv
164.704 33.3071 164.571 33.2012 164.436 33.0991 cv
164.439 33.0415 164.445 32.9873 164.445 32.9302 cv
164.445 31.2471 163.075 29.8774 161.39 29.8774 cv
160.726 29.8774 160.116 30.0947 159.618 30.457 cv
159.497 30.4111 159.381 30.3633 159.261 30.3184 cv
159.261 30.2939 159.269 30.2695 159.269 30.2451 cv
159.269 28.7222 158.03 27.4858 156.503 27.4858 cv
155.472 27.4858 154.579 28.0649 154.108 28.9097 cv
153.896 28.8701 153.681 28.8311 153.46 28.7915 cv
153.463 28.7588 153.473 28.7256 153.473 28.6924 cv
153.473 27.3081 152.341 26.1797 150.953 26.1797 cv
149.751 26.1797 148.742 27.0332 148.502 28.1675 cv
148.26 28.1489 148.01 28.1313 147.763 28.1162 cv
148.067 27.4014 148.235 26.6172 148.235 25.7939 cv
148.235 23.5107 146.942 21.5259 145.046 20.5273 cv
145.046 20.5273 144.349 20.166 143.339 19.9668 cv
143.339 17.877 143.339 15.4243 143.339 15.4243 cv
143.339 15.4243 145.642 15.4243 145.893 15.4243 cv
145.98 15.3223 146.152 14.9751 146.152 14.3564 cv
146.152 13.7476 145.98 13.4004 145.893 13.2974 cv
145.642 13.2974 143.339 13.2974 143.339 13.2974 cv
143.339 10.752 li
143.234 10.6646 142.885 10.4961 142.271 10.4961 cv
142.27 10.4961 li
141.654 10.4961 141.307 10.6646 141.201 10.752 cv
141.201 13.2974 li
141.201 13.2974 138.909 13.2974 138.659 13.2974 cv
138.571 13.4004 138.4 13.7476 138.4 14.3564 cv
138.4 14.9751 138.571 15.3223 138.659 15.4243 cv
138.909 15.4243 141.201 15.4243 141.201 15.4243 cv
141.201 15.4243 141.201 17.877 141.201 19.9668 cv
140.197 20.166 139.503 20.5273 139.503 20.5273 cv
137.609 21.5259 136.315 23.5107 136.315 25.7939 cv
136.315 26.6172 136.484 27.4014 136.789 28.1162 cv
136.542 28.1313 136.291 28.1489 136.05 28.1675 cv
135.809 27.0332 134.801 26.1797 133.598 26.1797 cv
132.21 26.1797 131.079 27.3081 131.079 28.6924 cv
131.079 28.7256 131.088 28.7588 131.091 28.7915 cv
130.871 28.8311 130.654 28.8701 130.442 28.9097 cv
129.973 28.0649 129.08 27.4858 128.048 27.4858 cv
126.522 27.4858 125.282 28.7222 125.282 30.2451 cv
125.282 30.2695 125.291 30.2939 125.291 30.3184 cv
125.17 30.3633 125.053 30.4111 124.933 30.457 cv
124.435 30.0947 123.825 29.8774 123.162 29.8774 cv
121.476 29.8774 120.106 31.2471 120.106 32.9302 cv
120.106 32.9873 120.112 33.0415 120.116 33.0991 cv
119.98 33.2012 119.848 33.3071 119.717 33.416 cv
119.386 33.3101 119.033 33.2471 118.665 33.2471 cv
117.009 33.2471 115.627 34.3687 115.196 35.8862 cv
114.997 35.9463 114.813 36.0093 114.617 36.0698 cv
114.424 34.8271 113.357 33.8735 112.065 33.8735 cv
110.636 33.8735 109.472 35.0386 109.472 36.4678 cv
109.472 36.9507 109.61 37.397 109.843 37.7827 cv
109.538 37.9092 109.233 38.0366 108.938 38.166 cv
108.543 37.062 107.496 36.2656 106.259 36.2656 cv
104.679 36.2656 103.394 37.5479 103.394 39.1255 cv
103.394 39.7583 103.608 40.3408 103.958 40.8174 cv
103.774 40.9346 103.593 41.0527 103.412 41.1729 cv
102.846 40.3589 101.907 39.8252 100.842 39.8252 cv
99.1084 39.8252 97.6968 41.2339 97.6968 42.9678 cv
97.6968 43.8516 98.0674 44.6475 98.6592 45.2178 cv
98.5439 45.3442 98.4385 45.4712 98.3301 45.5977 cv
97.7627 45.2656 97.1113 45.061 96.4058 45.061 cv
94.3066 45.061 92.5962 46.771 92.5962 48.8735 cv
92.5962 50.3477 93.4468 51.6182 94.6772 52.2515 cv
94.6411 52.3779 94.5991 52.5078 94.5664 52.6343 cv
94.373 52.6104 94.1768 52.5923 93.9746 52.5923 cv
91.4658 52.5923 89.4233 54.6372 89.4233 57.146 cv
89.4233 58.4644 89.9868 59.647 90.8862 60.4795 cv
90.8862 60.4795 92.8369 62.3032 94.106 64.3584 cv
cp
f
173.222 86.6831 mo
173.623 86.6831 174 86.4395 174.148 86.041 cv
174.334 85.5283 174.075 84.9614 173.566 84.771 cv
163.7 81.1162 153.291 79.2642 142.612 79.2642 cv
141.925 79.2642 li
131.257 79.2642 120.845 81.1162 110.982 84.771 cv
110.469 84.9614 110.21 85.5283 110.399 86.041 cv
110.587 86.5508 111.157 86.8135 111.667 86.6235 cv
121.312 83.0493 131.491 81.2363 141.925 81.2363 cv
142.612 81.2363 li
153.057 81.2363 163.235 83.0493 172.879 86.6235 cv
172.993 86.6655 173.107 86.6831 173.222 86.6831 cv
cp
f
173.262 78.7603 mo
174.501 78.5552 175.861 78.332 176.546 78.2173 cv
176.77 78.8203 177.071 79.6289 177.307 80.2505 cv
176.724 80.5732 175.97 80.9922 175.405 81.3057 cv
174.959 80.7749 174.07 79.7197 173.262 78.7603 cv
cp
163.309 75.7349 mo
163.125 76.6431 162.232 77.228 161.32 77.041 cv
158.006 76.3623 li
157.093 76.1729 156.508 75.2827 156.691 74.3721 cv
156.877 73.4609 157.77 72.8696 158.682 73.0601 cv
162 73.7446 li
162.917 73.9316 163.498 74.8242 163.309 75.7349 cv
cp
142.264 75.4365 mo
138.799 73.4551 li
142.27 71.4702 li
145.748 73.4551 li
142.264 75.4365 li
cp
126.539 76.3623 mo
123.224 77.041 li
122.313 77.228 121.42 76.6431 121.237 75.7349 cv
121.046 74.8242 121.629 73.9316 122.545 73.7446 cv
125.863 73.0601 li
126.775 72.8696 127.667 73.4609 127.854 74.3721 cv
128.038 75.2827 127.453 76.1729 126.539 76.3623 cv
cp
109.139 81.3057 mo
108.575 80.9922 107.821 80.5732 107.239 80.2505 cv
107.474 79.6289 107.775 78.8203 107.999 78.2173 cv
108.683 78.332 110.044 78.5552 111.284 78.7603 cv
110.475 79.7197 109.585 80.7749 109.139 81.3057 cv
cp
179.179 80.9409 mo
177.744 77.1045 li
177.526 76.5225 li
175.678 76.8267 li
165.567 72.9478 154.927 70.8882 144.013 70.6924 cv
142.264 69.6934 li
140.525 70.6924 li
129.618 70.8882 118.978 72.9478 108.868 76.8267 cv
107.019 76.5225 li
106.802 77.1045 li
105.366 80.9409 li
109.492 83.2329 li
110.822 81.6528 li
120.202 78.1357 130.059 76.2358 140.16 76.0098 cv
142.264 77.2129 li
144.38 76.0098 li
154.486 76.2358 164.343 78.1357 173.723 81.6528 cv
175.053 83.2329 li
179.179 80.9409 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
